* Tools
- Temporary use. Locate what not being categorised other files. 
  Transfer to somewhere else if each tools collecting enough volumes.

** Database
*** HeidiSQL
- http://celtislab.net/archives/20130826/heidisql%E3%81%A7mysql%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%B8%E6%8E%A5%E7%B6%9A%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/

*** MySQL Workbench
- https://www-jp.mysql.com/products/workbench/

** WebServer
*** Apache
**** 特徴
***** 複数バージョンのサポート
***** MPM : Multi Processing Module
- 
  複数OSに最適化

***** モジュールによる機能追加
- 
  モジュールを追加することで拡張可能。
  「Core」がまずあり、モジュールを追加して機能を拡張する。「mod_XXX」と名付けられる。
  
  追加は「静的リンク」と「動的リンク」がある。
  - 静的リンク
    静的リンクはApacheの実行ファイルそのものにモジュールを組み込む。バイナリ的に一体化する。
    早いが再コンパイルが必要。
  - DSO : Dynamic Shared Object、動的共有オブジェクト
    動的リンクはモジュールを別ファイルとして作成し、必要に応じてモジュールのファイルから機能を呼び出す方式。
    あらかじめ「mod_so」モジュールを静的リンクしておく必要がある。
    負荷が高くなるが導入が容易。

***** プロセスの挙動
****** prefork
- 
  スレッドを使わず、先行してforkを行うウェブサーバ。
  伝統的に親プロセスを1つ持ち、クライアントからリクエストが来るとforkする。実際の通信は子プロセスが受け持つ。
  そのため、接続数だけ子プロセスが起動する。
  forkに時間がかかるため、あらかじめ複数個のプロセスを事前に立ち上げておくため、preforkと呼ばれる。

- メリット
  ある子プロセスがフリーズしても、他のプロセスには影響せず、安定した通信が可能。

- デメリット
  クライアントが多くなるほどメモリやCPU負荷が増えていく。

****** worker
- 
  マルチスレッドとマルチプロセスのハイブリッド型。
  子プロセス1つ1つがマルチスレッドで動作し、スレッド1つが1つのクライアントを受け持つ。

****** event
- 
  workerの一種で、マルチスレッドで動作する。
  違いはKeep-Aliveの処理方法で、Keep-Aliveの処理を別のスレッドに割り振って通信を処理する。
  2.4.1で正式に採用された。

**** Modules
***** mod_rewrite
- 
  Apache Webサーバにおいて、クライアントからリクエストのあったURLの内部書き換えや、
  さまざまな環境変数等に応じたリダイレクトを可能とするモジュール。
  正規表現を使用したマッチングを行うことができる。

- 使用方法
  - httpd.confに設定する
    こちらの方が

  - .htaccessに設定する
    処理が遅くなるので、httpd.conf推奨。

**** Settings
***** httpd.conf
***** .htaccess
**** Command
***** httpd
****** -k
******* install
******* uninstall
******* start
******* stop
******* restart
*** nginx

*** IIS
** Ruby
*** Library
**** Rack
- 
  WSGIに影響されて開発された、Rubyにおけるサーバとアプリケーション／フレームワーク間のインターフェースの役割を果たすライブラリ。

- 
  [[http://gihyo.jp/dev/serial/01/ruby/0023][第23回 Rackとは何か（1）Rackの生まれた背景 - Ruby Freaks Lounge - gihyo.jp]]

*** Web Server
**** Unicorn
- Rack Web Srever.
  RackとWebサーバーの機能を併せ持つ。

- 
  Unicorn+Railsで公開も可能だが、レスポンスがApacheやNginxに劣るため、Nginx+Unicorn+Railsでの公開が一般的。
  ちなみにNginxはRailsの機能をサポートしていないため、Nginx+Railsでは動作しない。

**** WEBrick
- 汎用HTTPサーバフレームワーク
  単純なHTTP Webサーバの機能を提供するRubyのライブラリ。
  

**** Mongrel

**** Thin
** Python

*** Library
**** WSGI
- Web Server Gateway Interface
  PythonのためのWebサーバとWebアプリケーション・フレームワーク間の標準インターフェースを定める仕様。

- 
  フレームワークの実装が特定のWebサーバに依存していることが多く、フレームワークかサーバが制限される場合が多くあった。
  そのため、お互いに複数の環境に対応するため
  
- 他言語への影響
  - PSGI(Perl)
  - Rack(Ruby)
  - SCGI
  - Ring(Clojure)
  - WAI(Haskell)

*** Web Application Framework

**** Django

**** Flask
**** Pyramid
**** Tornado
- 
  Facebook製。

**** CherryPy

**** Bottle
**** Zope

**** Twisted

**** TurboGears
** PHP
*** Library
**** PSGI
- 
  PHP版WSGI
** Undefined

