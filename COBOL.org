* COBOL

** 規定

*** 正書法
**** コーディングフォーマット
- 1行は80文字以内で、5つの領域に分かれてコーディングをする。
***** 一連番号領域(0-6)
- 
  プログラムの行番号を6桁の数字で記述する。
  行番号は「000010」か「000100」からスタートし、
  1行ごとに10もしくは100ずつ可算していくのが一般的。
  ただし、最近のコンパイラは一連番号領域を無視するので、
  昇順でなかったりスペースで埋めてあっても問題ない。

***** 標識領域(7)
- 
  8行目以降に何が書かれているかを空白または記号で示す。
  |------+--------------------------------------|
  | 記号 | 内容                                 |
  |------+--------------------------------------|
  | 空白 | プログラムコードであることを示す。   |
  | *    | コメント行であることを示す。         |
  | /    | 印刷時に改ページ行であることを示す。 |
  | -    | 前行からの継続であることを示す       |
  |------+--------------------------------------|

***** A領域(8-11)
- 
  各部の開始宣言、節や段落の宣言、データ項目のレベル番号をこの領域の先頭から書き始める。

***** B領域(12-72)
- 
  手続き部の命令文や作業領域のレベル番号などを記述する。

***** 見出し領域(73-80)
- 
  翻訳対称外の領域で、プログラムの修正日や修正者名等のコメント的な記述をする。

**** コーディングルール
- ピリオド
  部、節、段落の宣言部、1つの命令文、命令ブロックの終了をピリオドで示す。
  命令ブロック内ではピリオドは不要。

- 行継続
  標識領域にハイフンを各課、または命令文の区切りに改行することで、
  2行以上にまたがった記述が可能。


*** 基本要素
**** 分離符
***** 分離符の空白
***** 分離符のコンマ
***** 分離符のセミコロン
***** 分離符の終止符
***** 左括弧、右括弧
***** 引用符
***** 仮原文区切り記号
***** コロン
***** ポインタ修飾記号
***** 連結演算子

**** 語
- 語の制限
  長さ30文字以内
  空白以外の英数字及びハイフン(-)、アンダースコア(_)から成る。小文字と大文字は等価。
  最初と最後はハイフンおよびアンダースコアではならない。
  （先頭文字がアンダースコアで始まる文字は、COBOLが予約している。）
  
***** 利用者語
***** システム名
****** 機能名
****** 計算記名
****** 言語名
****** ファイル識別子

***** 予約語

****** 必須語
- 
  必ず書かなければならない語。

******* 必要語
******* 特殊文字語
****** 補助語
- 
  書いても書かなくてもよい語。

****** 特殊用途語
******* 特殊レジスタ
- 
  コンパイラが自動的に生成する記憶領域。
  特定の機能を使ったときに発生する情報が格納される。


******* 表意定数を識別する語

***** 関数名

**** 定数
***** 数字定数
****** 固定小数点定数
****** 浮動小数点定数
***** 文字定数
***** 16進文字定数
***** 日本語定数
****** 日本語文字定数
****** 日本語16進文字定数
***** ブール定数
**** 表意定数
- 
  特定の値を持つ定数または定数の繰り返しを書くときに使う。
  SPACEとSPACESなど、単複は同意語とみなす。

- ZERO
  文脈によって、数値ゼロ、文字0の繰り返し、ブール文字0の繰り返しのいずれか。
- SPACE
  部脈によって、英字の空白の繰り返し、日本語文字の空白の繰り返しのいずれか。
- HIGH-VALUE
  プログラムの文字の大小順序における最大の文字コードの繰り返し
- LOW-VALUE
  プログラムの文字の大小順序における最小の文字コードの繰り返し
- QUOTE
  引用符(")の繰り返し
- ALL 定数
  ALLの後に書いた定数の繰り返し
- 記号文字
  記号文字の繰り返し

**** 連結式
- 
  2つ以上の定数を連結演算子でつないで、1つの定数の値を表現する方法。
**** 特殊用途の定数
- プログラム名定数
- ファイル識別名定数
- 原文名定数
**** PICTURE句の文字列


*** 構成
**** 見出し部
- IDENTIFICATION DIVISION
  プログラム名やその作成者、作成日などのメンテナンス情報を記述する。
  なお、節(SECTION)は存在しない。

- 内容
  プログラム名
  作成者名
  作成日
  etc

***** 段落
- PROGRAM-ID     : プログラム名
- AUTHOR         : プログラム作成者
- DATE-WRITTEN   : プログラム作成日
- DATE-COMPILED  : コンパイル日
- INSTLLATION    : インストール先
- SECURITY       : 機密事項

**** 環境部
- ENVIRONMENT DIVISION
  作成しようとしているプログラムを翻訳(コンパイル)するコンピュータ名や実行するコンピュータ名、
  環境変数の受け渡し情報やプログラムから読み書きするファイルの名前や種類などを定義する。
  コンピュータ名等は影響がないため省略されがちだが、ファイル管理段落は影響があるため、きちんと記述する必要あり。

- 内容
  使用する環境変数
  使用するファイル
  etc

***** 節と段落
- CONFIGURATION SECTION : 構成節
  - SOURCE-COMPUTER       : 翻訳するコンピュータ名
  - OBJECT-COMPUTER       : 実行するコンピュータ名
    etc
- INPUT-OUTPUT SECTION  : 入出力節
  - FILE-CONTROL          : ファイル管理

**** データ部
- DATA DIVISION
  入出力ファイルのレイアウト、データ項目（変数）、外部プログラムとのインターフェースなど、
  プログラムで扱う全てのデータを定義する。

- 内容
  データ項目（変数）の定義
  ファイルのレイアウト
  etc

***** PICTURE句
****** データ型
- 数字形式
  9 : 数字1桁
  S : 符号付の値
  V : 小数点の位置

- 英数字形式
  X : 任意の文字

- 書式編集形式
  Z : ゼロサプレス。桁に満たない場合、その部分を空白に置き換える。
  , : カンマが挿入される文字位置
  . : 位置合わせ用の小数点
  \ : 通貨記号。ゼロサプレスと同様。

- ex) 9(5)V99 => 十進整数部5けた、小数部2けた
      S9(5)   => 十進5けたの符号あり整数
      ZZZ,ZZ9 => 整数部3桁+カンマ+整数部3桁


***** 節
- FILE SECTION             : ファイル
- WORKING-STORAGE SECTION  : 作業場所
  プログラム上で使用する全ての変数定義を行う。
- LINKAGE SECTION          : 連絡
  外部プログラムとのやりとりに関する情報を定義する。
  C言語でいうmain関数の引数にあたる。
- COMMUNICATION SECTION    : 通信
- REPORT SECTION           : レポート

**** 手続き部
- PROCEDURE DIVISION
  プログラムが行う処理内容を記述する。
  規定の節や段落は存在せず、作成者が作成する。
  節がC言語の関数、段落がさらに小さな処理のまとまり。

***** 文

****** ACCEPT
- 
  標準入力から値を取得する。

****** ADD

****** CALL

****** CLOSE

****** COMPUTE

****** COPY

****** DELETE

****** DISPLAY
- 
  表示する。

****** DIVIDE

****** EVALUATE
- 
  SWITCH文のようなもの。
  条件にあった処理をおこないたい場合に使う。

- 書式1
  EVALUATE 評価対称
    WHEN 値
      命令文
    ...
    WHEN 値1 THRU 値2
      命令文
    ...
    WHEN 値
    WHEN 値
      命令文
    ...
    WHEN OTHER
      命令文

****** GO TO

****** IF

****** INITIALIZE

****** INSPECT

****** MOVE

****** MULTIPLY

****** OPEN

****** PERFORM
- 
  繰り返し処理を行う。
  WHILEのようなもの。

****** READ

****** REDEFINES

****** REWITE

****** SEARCH

****** SET

****** START

****** SUBTRACT

****** STRING

****** SORT

****** STOP

****** UNSTRING

****** WRITE

****** 原始文操作
***** 関数
***** データベース


** OpenCOBOL
**** cobc
- 
  cobcでコンパイルが出来る。

***** ビルドターゲット

- -E
  前処理のみ。コメントが削除され、COPY句を展開したものが標準出力に出力される。

- -C
  翻訳のみ。COBOLソースファイルをCファイルに変換する。*.c。
  
- -S
  コンパイルのみ。ccによってコンパイルする。*.s。

- -c
  コンパイルとアセンブルをする。*.o。

- -m
  動的リンクモジュールを生成する。*.so。

- -x
  実行可能プログラムを生成する。

***** ソースフォーマット
- 
  固定形式と自由形式をサポートしている。
  デフォルトフォーマットは固定形式。

- -free
  書式を自由形式にする。
- -fixed
  書式を固定形式にする。

***** ワーニングオプション
- -Wall
  全てのワーニングを有効にする。

- -Wcolumn-overflow
  72桁を超えるテキストを警告する。

- -Wend-evaluate
  END-EVALUATEがなければ警告する。

- -Wend-if
  END-IFがなければ警告する。

- -Wparentheses
  ORとANDが括弧なしで並んでいれば警告する。


** Link
- [[http://www12.ocn.ne.jp/~peg/index.html][OpenCOBOL Documenation Library]]
  

* JCL

** ステートメント
*** フィールド
- コメント以外は72桁目以降のフィールドをコーディングに利用できない。

**** IDフィールド
- 通常は1桁目と2桁目に//を入れる。
- 区切りステートメントの1桁目と2桁目には/*をいれるか、DLMパラメータで指定した2つの文字を入れる。
- コメントステートメントの1桁目から3桁目には//*を入れる。

**** 名前フィールド
- 
  特定のステートメントに名前を付けて、
  他のステートメントおよびシステムからそのステートメントを参照できるようにする。

- ルール
  - 名前は3桁目からはじめる必要がある。
  - 1文字から8文字までの英数字または国別文字($, #, @)を用いる。
  - 先頭文字は英字または国別文字($, #, @)を用いる。数字不可。
  - 名前の後に、少なくとも1つのブランクを続ける。

**** 命令フィールド
- 
  ステートメントのタイプ、またはコマンド・ステートメントの場合はコマンドを指定する。
  - そのステートメントで使用できる構文で定めた文字を指定する。
  - 名前フィールドの後に続けて指定する。
  - 命令の前後には、少なくとも1つのブランクが必要。

**** パラメータ、またはオペランド欄
- 
  コンマで区切られたパラメータが入れられる。
  - 命令フィールドの後に続けて指定する。
  - 前に少なくとも1つのブランクが必要。

**** コメント欄
- 
  コーディングするときのメモ。
  - コメント欄は、パラメータ・フィールドの後に続ける。
  - 前に少なくとも1つのブランクが必要。
*** 命令
**** COMMAND
**** コメント
**** CNTL
**** DD
- 
  データ・セットについて記述し、そのデータ・セットに必要な入出力リソースを指定するために使用する。

***** 構文
- //[ddname or procstepname.ddname] DD [positional-parameter][,keyword-parameter]... [comment] 
- //[ddname or procstepname.ddname] DD

***** 名前フィールド
- 
  - 各ddnameはジョブステップ内で固有のものにする。重複があった場合の処理はシステムによって異なる。
  - ddnameは3桁目から始める。

- ddnameの省略
  以下の場合ddnameをコーディングしない。
  - そのDDステートメントで、先行するDDステートメントのデータセットに連結するデータセットを定義する場合
  - そのDDステートメントが、索引順次データセットについての2番目または3番目の連続するDDステートメントである場合

***** パラメータ
****** 定位置パラメータ
- 1つだけ指定できる。*, DUMMY, DYNAMのいずれか。

****** キーワードパラメータ
******* DISP
- 
  システムに対しデータセットの状況を説明し、
  そのステップまたはジョブの終了後データセットの後処理方法を指定するために使用する。
  正常終了の場合の後処理の他に、異常終了の場合の後処理を別に指定できる。

******** 構文
- DISP=([status][,normal-termination-disp][,abnormal-termination-disp])

********* 状況サブパラメータ
- NEW
  このステップで新規データセットを作成することを示す。
- OLD
  このステップ以前からデータセットが存在しており、このステップでデータセットを排他的に（占有して）使用する必要があることを示す
  出力テープデータセットにDISP=OLDを指定した場合、1)RACFかパスワードによって保護されていないか、2)有効期限の指定がなければ、
  ヘッダーラベルのデータセット名を検査しない。
- SHR
  データセットがこのステップ以前に存在すること、および他のジョブがそれを共有できることを示す。SHAREとも指定可能。
  OLDと同様の条件で、データセット名を検査しない場合がある。
- MOD
  - データセットが存在し、レコードをデータセットの尾張に追加する、もしくは、新規データセットを作成することを示す。
    いずれの場合も、MODではデータセットの排他的仕様を指定する。
    オープン時に、読取/書込機構は既存のデータセットの最後の順次レコードの後、または新規データセットの先頭に位置づけられる。
    同一ステップ内の後続OPENでは、読取/書込機構は最後の順次レコードの後に位置づけられる。
- デフォルト
  省略した場合はNEWとなる。

********* 正常終了の後処理パラメータ
- DELETE
  このステップが正常終了した場合、データセットはもはや必要ないことを示す。
- KEEP
  データセットをボリューム上に保存することを示す。
- PASS
  同一ジョブ内の後続ステップで使用するために渡すことを示す。
- CATLG
  システムカタログまたはユーザカタログ内に、データセットを指す項目を入れることを示す。
  開かれていないテープデータセットは、ボリューム要求が非特定でないか、2種記録密度磁気テープ装置であるが密度指定がない場合でない限り、カタログ化される。
- UNCATLG
  1)システムまたはユーザカタログ内のデータセットを指す項目、および2)最高レベルの項目を除く扶養の索引を削除することを指示する。
  データセットが保存されることに注意。
- デフォルト
  NEWの場合はDELETE、既存のデータセットの場合はKEEPとなる。

********* 異常終了の後処理パラメータ
- DELETE
- KEEP
- CATLG
- UNCATLG
- デフォルト
  2番目のサブパラメータによって指定または暗黙指定された処理となる。
  ただし2番目のサブパラメータがPASSの場合、NEWではDELETE、既存データセットではKEEPとなる。

******* DSNAME
- 
  データセット名を指定するために使用する。
  新規データセットの場合、指定した名前をそのデータセットに割り当て、
  既存のデータセットの場合、その名前を使用してデータセットを探し出す。

******** 構文
- DSNAME/DSN=name

******* SYSOUT
- 
  データセットを、通常、SYSOUTデータセットと呼ばれるシステム出力データセットとして識別するために使用する。
  SMS管理データセットには使用しない。

******** 構文
- SYSOUT= { class                                }
          { *                                    }
          { ([class] [,writer-name] [,form-name])}

******* UNIT
- 
  データセットを以下のものに入れるようシステムに要求するために使用する。
  - 特定の装置
  - 特定のタイプまたはグループの装置
  - 他のデータセットと同じ装置
  UNITパラメータを使用して、何台の装置を割り当てるかをシステムに伝え、
  またデータセットが開かれるまでボリュームの装置を伸ばせるように、システムに要求することもできる。

******** 構文
- UNIT=([ddd  ] [,unit-count] [,DEFFER])
        [/ddd ] [,p         ]
        [/dddd] [,          ]
        [device-type]
        [gourp-name]

********* サブパラメータの定義

******* VOLUME
- 
  システム管理テープ・ボリューム上のデータセットには、SMSと非SMSの両特性がある。
  必要であれば、システム管理テープボリューム上のデータセットとシステム管理DASDデータセットは区別される。
  区別が必要でない場合、し捨てう管理データセットという用語は、システム管理テープボリューム上のデータセットと、
  システム管理DASDデータセットの両方を意味する。

******** 構文
- {VOLUME} = ([PRIVATE] [,RETAIN] [,volume-sequence-number] [,volume-count]
  {VOL}                 [,      ] [,                      ]

********* サブパラメータの定義

**** 特殊DD
***** JOBCAT DD
***** JOBLIB DD
- 目的
  - 専用ライブラリーを作成する
  - ジョブ内の各EXECステートメントのPGMパラメータで指名されたプログラムを探す専用ライブラリを指定する。
    その専用ライブラリで見つからない場合に限り、システムライブラリーを探索する。
  
  専用ライブラリは、直接アクセス装置上の区分データセット(PDS)または拡張区分データセット(PDSE)。
  そのメンバーは、実行可能なユーザ作成プログラム。

****** 構文
- //JOBLIB DD parameter[,parameter]... [comments]

****** パラメータ
******* カタログ式ライブラリの検索
- DSNAME
- DISP
  状況サブパラメータはOLDまたはSHR。
  後処理サブパラメータは、使用した後どのように処理したいかを示している必要がある。

******* カタログ化されていないライブラリの検索
- DSNAME
- DISP
  DISP=(OLD,PASS)またはDISP=(SHR,PASS)
  SHRはデータセットが既存であることを示すが、他のジョブはこのライブラリを使用できる。
- UNIT
- VOLUME

******* ライブラリの作成
- DSNAME
- UNIT
- VOLUME
  任意のボリュームに対して非特定要求を行う場合を除く。
- SPACE
  PDSディレクトリ用のスペースを指定する。
- DISP
  状況はNEW。
  作成するライブラリを保持するつもりなら、後処理としてCATLGの指定をする。
  終了後削除したい場合、PASSとする。
  そうでなければ、システムはDELETEと仮定して、最初のステップが終了した時点で削除する。

******* メンバを追加する時
- DSNAME
  ライブラリの後にライブラリに追加するプログラムの名前を続ける。
  DSNAME=LIBRARY(PROGRAM)など。
- DISP
  状況をMODと指定する。
  作成時にカタログしている場合後処理を指定しない。
  それ以外の場合、PASSまたはCATALOGとする。
- VOLUME
  ジョブ作成しようとしていて、JOBLIB DD DISPでCATLGを指定しており、最初のステップでジョブステップでメンバーを追加する場合、
  VOLUME=REF=*.JOBLIBとすることで装置およびボリュームの情報を与える。
  最初のステップ実行完了までは実際にカタログ化されていないため、
  このパラメータを指定しないと、カタログ化されるライブラリーに装置とボリュームの情報を与えられない。

***** STEPCAT DD
***** STEPLIB DD
***** SYSABEND, SYSMDUMP, SYSUDUMP DD
***** SYSCHK DD
***** SYSCKEOV DD
***** SYSIN DD
**** 区切り
**** ENDCNTL
**** EXEC
- 
  ジョブステップの始まりを示し、実行するべきプログラムや呼び出すカタログプロシージャやストリーム内プロシージャを識別する。
  また、ジョブステップのステップ名を指定する。

***** 形式
- //[stepname] EXEC PGM=実行するPGM等

***** オペランド
****** 定位置パラメータ
- PGM, PROC, またはプロシージャ名のうち、1つを指定する必要がある。
  - PGM
  - PROC
  - procedure-name

**** IF/THEN/ELSE/ENDIF
**** INCLUDE
**** JCLLIB
**** JOB
***** 形式
- 
  //ジョブ名 JOB オペランド 注釈

***** ジョブ名
- 
  英数字または各国文字1～8字。最初の文字は数字不可。3行目から始まる。

***** オペランド
****** 定位置パラメータ
- 
  1. 会計情報
     業務識別名等の情報
  2. プログラマ名
     使用する場合は会計情報の直後に指定し、20文字以内。
  ex) //JCL001 JOB SIKIBETUMEI,'PROGRAMERNAME',…

****** キーワード・パラメタ
- 
  定位置パラメータの後ろに、任意の順序で記述。

******* MSGLEVEL=(JCL,割振)
- 
  JOB出力リストの一部としてどのようなメッセージ出力を書き出すか指示。
  - JCL
    - 0 : JOB文のみを出力
    - 1 : 全てのJCL文とカタログ式プロシージャを出力
    - 2 : 呼び出されたプロシージャを含まないJCL文のみを出力
  - 割振り
    - 0 : ジョブが以上終了しない限りメッセージは出力しない
    - 1 : すべての割り振りメッセージを出力する

******* MSGCLASS=class
- 
  JCLステートメント、割振りメッセージ、終了メッセージの出力クラスを指定する。
  A-Z, 0-9の一桁の文字で指定

******* CLASS=class
- 
  ジョブに実行ジョブクラスを割り当てる指定を行う。
  A-Z, 1-9の一桁の文字で指定

******* REGION=n[K or M]
- 
  ジョブに割り振られる記憶域の大きさを指定する。

******* TIME=(分,秒)
- 
  ジョブがCPUを使用できる最大の時間を指定する。
  ex) TIME=(10,10)  10分10秒
      TIME=5        5分
      TIME=(,10)    10秒
      TIME=1440     無制限

******* USER=userid
- 
  useridは1文字から8文字までの英数字または国別文字。
**** ヌル
**** OUTPUT JCL
**** PEND
**** PROC
**** SET
**** XMIT JCL

*** ステートメントの継続
- 継続できないステートメント
  - JCLコマンド・ステートメント
  - コメント・ステートメント
  - 区切りステートメント
  - ヌル・ステートメント

- 継続方法
  - 71桁以下の桁で、完全なパラメータまたはサブパラメータの区切りを選び、フィールドを中断する。
  - 後続ステートメントの1桁目と2桁目に//を入れる。
  - 後続の3桁目にブランク文字をコーディングする。
    3桁目にブランクまたはアスタリスク以外のものが入っていると、新しいステートメントと見なす。
  - 4桁目から16桁目までの任意の桁から継続する。
  - 注・継続されるステートメントの71桁目にアポストロフィを入れてはいけない。

*** 逆方向参照
- 
  すでに出てきたパラメータを参照すること。
- 種類
  - *.name または *.ddnam
    
  - *.stepname.name または *.stepname.ddname
    プロシージャを呼び出すものでなく、PGMパラメータが入っているEXECステートメントを呼び出す。

  - *.stepname.procstepname.name または *.stepname.procstepname.ddname
    ステップ名により呼び出されるプロシージャ中のPGMパラメータが入っているEXECステートメントを表す。
    

* Hercules

** コマンド
*** ESC
- 
  H/Wの状況表示モードに切り替える。

*** IPL
- 
  初期プログラムロードの実行。
  IPL装置のアドレスを指定する。
  ex) IPL 140

*** K S
- 
  スクロールモードを変更する。
  (PF11)

*** K A,NONE
- 
  ディスプレイの実行結果表示域をクリアーする。
  (PF11)

*** R 00,COLD,NOREQ
*** R 00,WARM,NOREQ
- 
  JES2の起動オプションを答える。
  (PF12)

*** S NET
- 
  VTAMの初期設定

*** S TSO
- 
  TSOの起動

** wc3270エミュレータ
*** キーバインド
- 
  |-----------+-------------|
  | PCキー    | 3270キー    |
  | Ctrl+R    | Reset       |
  | Ctrl+C    | Clear       |
  | Ctrl+A    | Attn        |
  | PageUp    | PA1         |
  | PageDown  | PA2         |
  | End       | EraseEOF    |
  | Tab       | タブ        |
  | Shift+Tab | 逆タブ      |
  | Enter     | 改行        |
  | 右Ctrl    | 実行(ENTER) |
  |-----------+-------------|

* memo
** IBM 3270
- 
  コンピュータターミナルの表示サブシステム。
  
** VTAM
- 
  
** IPL
- Initial Program Loader
  コンピュータに電源投入後、最初に実行される小さなプログラムのこと。
  
** NIP
- 
  Nucleus Initialization ProgramはMVSのOSとしての中核部分を初期設定するためのプログラム。

** JES
- Job Entry Subsystem(JES)
  MVS系が使用する、ジョブの受け取り、スケジューリング、処理結果の出力をおこなうサブシステム。

** TSO
- Time Sharing Option
  MVSシステムで対話型処理を行うための機能がTSO。
  Windowsにおけるcmd.exeと同等の働きをする。
