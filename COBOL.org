* COBOL

** 規定

*** 正書法
**** コーディングフォーマット
- 1行は80文字以内で、5つの領域に分かれてコーディングをする。
***** 一連番号領域(0-6)
- 
  プログラムの行番号を6桁の数字で記述する。
  行番号は「000010」か「000100」からスタートし、
  1行ごとに10もしくは100ずつ可算していくのが一般的。
  ただし、最近のコンパイラは一連番号領域を無視するので、
  昇順でなかったりスペースで埋めてあっても問題ない。

***** 標識領域(7)
- 
  8行目以降に何が書かれているかを空白または記号で示す。
  |------+--------------------------------------|
  | 記号 | 内容                                 |
  |------+--------------------------------------|
  | 空白 | プログラムコードであることを示す。   |
  | *    | コメント行であることを示す。         |
  | /    | 印刷時に改ページ行であることを示す。 |
  | -    | 前行からの継続であることを示す       |
  |------+--------------------------------------|

***** A領域(8-11)
- 
  各部の開始宣言、節や段落の宣言、データ項目のレベル番号をこの領域の先頭から書き始める。

***** B領域(12-72)
- 
  手続き部の命令文や作業領域のレベル番号などを記述する。

***** 見出し領域(73-80)
- 
  翻訳対称外の領域で、プログラムの修正日や修正者名等のコメント的な記述をする。

**** コーディングルール
- ピリオド
  部、節、段落の宣言部、1つの命令文、命令ブロックの終了をピリオドで示す。
  命令ブロック内ではピリオドは不要。

- 行継続
  標識領域にハイフンを各課、または命令文の区切りに改行することで、
  2行以上にまたがった記述が可能。


*** 基本要素
**** 分離符
***** 分離符の空白
***** 分離符のコンマ
***** 分離符のセミコロン
***** 分離符の終止符
***** 左括弧、右括弧
***** 引用符
***** 仮原文区切り記号
***** コロン
***** ポインタ修飾記号
***** 連結演算子

**** 語
- 語の制限
  長さ30文字以内
  空白以外の英数字及びハイフン(-)、アンダースコア(_)から成る。小文字と大文字は等価。
  最初と最後はハイフンおよびアンダースコアではならない。
  （先頭文字がアンダースコアで始まる文字は、COBOLが予約している。）
  
***** 利用者語
***** システム名
****** 機能名
****** 計算記名
****** 言語名
****** ファイル識別子

***** 予約語

****** 必須語
- 
  必ず書かなければならない語。

******* 必要語
******* 特殊文字語
****** 補助語
- 
  書いても書かなくてもよい語。

****** 特殊用途語
******* 特殊レジスタ
- 
  コンパイラが自動的に生成する記憶領域。
  特定の機能を使ったときに発生する情報が格納される。


******* 表意定数を識別する語

***** 関数名

**** 定数
***** 数字定数
****** 固定小数点定数
****** 浮動小数点定数
***** 文字定数
***** 16進文字定数
***** 日本語定数
****** 日本語文字定数
****** 日本語16進文字定数
***** ブール定数
**** 表意定数
- 
  特定の値を持つ定数または定数の繰り返しを書くときに使う。
  SPACEとSPACESなど、単複は同意語とみなす。

- ZERO
  文脈によって、数値ゼロ、文字0の繰り返し、ブール文字0の繰り返しのいずれか。
- SPACE
  部脈によって、英字の空白の繰り返し、日本語文字の空白の繰り返しのいずれか。
- HIGH-VALUE
  プログラムの文字の大小順序における最大の文字コードの繰り返し
- LOW-VALUE
  プログラムの文字の大小順序における最小の文字コードの繰り返し
- QUOTE
  引用符(")の繰り返し
- ALL 定数
  ALLの後に書いた定数の繰り返し
- 記号文字
  記号文字の繰り返し

**** 連結式
- 
  2つ以上の定数を連結演算子でつないで、1つの定数の値を表現する方法。
**** 特殊用途の定数
- プログラム名定数
- ファイル識別名定数
- 原文名定数
**** PICTURE句の文字列


*** 構成
**** 見出し部
- IDENTIFICATION DIVISION
  プログラム名やその作成者、作成日などのメンテナンス情報を記述する。
  なお、節(SECTION)は存在しない。

- 内容
  プログラム名
  作成者名
  作成日
  etc

***** 段落
- PROGRAM-ID     : プログラム名
- AUTHOR         : プログラム作成者
- DATE-WRITTEN   : プログラム作成日
- DATE-COMPILED  : コンパイル日
- INSTLLATION    : インストール先
- SECURITY       : 機密事項

**** 環境部
- ENVIRONMENT DIVISION
  作成しようとしているプログラムを翻訳(コンパイル)するコンピュータ名や実行するコンピュータ名、
  環境変数の受け渡し情報やプログラムから読み書きするファイルの名前や種類などを定義する。
  コンピュータ名等は影響がないため省略されがちだが、ファイル管理段落は影響があるため、きちんと記述する必要あり。

- 内容
  使用する環境変数
  使用するファイル
  etc

***** 節と段落
- CONFIGURATION SECTION : 構成節
  - SOURCE-COMPUTER       : 翻訳するコンピュータ名
  - OBJECT-COMPUTER       : 実行するコンピュータ名
    etc
- INPUT-OUTPUT SECTION  : 入出力節
  - FILE-CONTROL          : ファイル管理

**** データ部
- DATA DIVISION
  入出力ファイルのレイアウト、データ項目（変数）、外部プログラムとのインターフェースなど、
  プログラムで扱う全てのデータを定義する。

- 内容
  データ項目（変数）の定義
  ファイルのレイアウト
  etc

***** PICTURE句
****** データ型
- 数字形式
  9 : 数字1桁
  S : 符号付の値
  V : 小数点の位置

- 英数字形式
  X : 任意の文字

- 書式編集形式
  Z : ゼロサプレス。桁に満たない場合、その部分を空白に置き換える。
  , : カンマが挿入される文字位置
  . : 位置合わせ用の小数点
  \ : 通貨記号。ゼロサプレスと同様。

- ex) 9(5)V99 => 十進整数部5けた、小数部2けた
      S9(5)   => 十進5けたの符号あり整数
      ZZZ,ZZ9 => 整数部3桁+カンマ+整数部3桁


***** 節
- FILE SECTION             : ファイル
- WORKING-STORAGE SECTION  : 作業場所
  プログラム上で使用する全ての変数定義を行う。
- LINKAGE SECTION          : 連絡
  外部プログラムとのやりとりに関する情報を定義する。
  C言語でいうmain関数の引数にあたる。
- COMMUNICATION SECTION    : 通信
- REPORT SECTION           : レポート

**** 手続き部
- PROCEDURE DIVISION
  プログラムが行う処理内容を記述する。
  規定の節や段落は存在せず、作成者が作成する。
  節がC言語の関数、段落がさらに小さな処理のまとまり。

***** 文

****** ACCEPT
- 
  標準入力から値を取得する。

****** ADD

****** CALL

****** CLOSE

****** COMPUTE

****** COPY

****** DELETE

****** DISPLAY
- 
  表示する。

****** DIVIDE

****** EVALUATE
- 
  SWITCH文のようなもの。
  条件にあった処理をおこないたい場合に使う。

- 書式1
  EVALUATE 評価対称
    WHEN 値
      命令文
    ...
    WHEN 値1 THRU 値2
      命令文
    ...
    WHEN 値
    WHEN 値
      命令文
    ...
    WHEN OTHER
      命令文

****** GO TO

****** IF

****** INITIALIZE

****** INSPECT

****** MOVE

****** MULTIPLY

****** OPEN

****** PERFORM
- 
  繰り返し処理を行う。
  WHILEのようなもの。

****** READ

****** REDEFINES

****** REWITE

****** SEARCH

****** SET

****** START

****** SUBTRACT

****** STRING

****** SORT

****** STOP

****** UNSTRING

****** WRITE

****** 原始文操作
***** 関数
***** データベース


** OpenCOBOL
**** cobc
- 
  cobcでコンパイルが出来る。

***** ビルドターゲット

- -E
  前処理のみ。コメントが削除され、COPY句を展開したものが標準出力に出力される。

- -C
  翻訳のみ。COBOLソースファイルをCファイルに変換する。*.c。
  
- -S
  コンパイルのみ。ccによってコンパイルする。*.s。

- -c
  コンパイルとアセンブルをする。*.o。

- -m
  動的リンクモジュールを生成する。*.so。

- -x
  実行可能プログラムを生成する。

***** ソースフォーマット
- 
  固定形式と自由形式をサポートしている。
  デフォルトフォーマットは固定形式。

- -free
  書式を自由形式にする。
- -fixed
  書式を固定形式にする。

***** ワーニングオプション
- -Wall
  全てのワーニングを有効にする。

- -Wcolumn-overflow
  72桁を超えるテキストを警告する。

- -Wend-evaluate
  END-EVALUATEがなければ警告する。

- -Wend-if
  END-IFがなければ警告する。

- -Wparentheses
  ORとANDが括弧なしで並んでいれば警告する。


** Link
- [[http://www12.ocn.ne.jp/~peg/index.html][OpenCOBOL Documenation Library]]
  
