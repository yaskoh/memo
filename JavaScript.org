* JavaScript
** Specification
*** ECMAScript 2016
**** data Types and values
*** ES5.1
**** Lexical Conventions
**** Type
**** Type Conversion and Testing
**** Expressions
***** Primary Expressions
***** Left-Hand-Side Expressions
***** Postfix Expressions
***** Unary Operators
***** Multiplicative Operators
***** Additive Operators
***** Bitwise Shift Operators
***** Relational Operators
***** Equility Operators
***** Binary Bitwise Operators
***** Binary Logical Operators
***** Conditional Operator
***** Assignment Operators
***** Comma Operator
**** Statements
***** Block
***** Variable Statement
***** Empty Statement
***** Expression Statement
***** The if Statement
****** if
***** Iteration Statement
****** do-while
****** while
****** for
****** for-in
***** continue
***** break
***** return
***** with
***** switch
***** throw
***** try
***** debugger
**** Function
**** Objects
**** Link
- [[http://www.ecma-international.org/ecma-262/5.1/index.html][ECMAScript Language Specification (5.1 Edition)]]
- [[http://www.webzoit.net/hp/it/internet/homepage/script/ecmascript/ecma262_51/contents/][ECMAScript 5.1 邦訳 - webzoit.net]]
***** Global
***** Object
***** Function
***** Array
***** String
***** Boolean
***** Number
***** Math
***** Date
***** RegExp
***** Error
***** JSON
**** Error
*** JavaScript(MDN)
**** Global Objects グローバルオブジェクト
***** Value propeties
***** Function properties
***** Fundamental objects
****** Object
****** Function
****** Boolean
****** Symbol
****** Error
******* EvalError
******* InternalError
******* RangeError
******* ReferenceError
******* SyntaxError
******* TypeError
******* URIError
***** Numbers and dates
****** Number
****** Math
******* 
****** Date
***** Text processing
****** String
****** RegExp
***** Indexed collections
****** Array
***** Keyed collections
****** Map
****** Set
****** WeakMap
****** WeakSet
***** Vector collections
****** SIMD
***** Structured data
****** ArrayBuffer
****** DataView
****** JSON
***** Control abstraction objects
****** Promise
****** Generator
****** GeneratiorFunction
***** Reflection
****** Reflect
****** Proxy
***** Internationalization
****** Intl
***** Other
****** arguments
**** Statements 文
***** Control flow
***** Declarations
***** Functions and classes
***** Iterations
***** Others
**** Expressions and operators 式と演算子
**** Functions 関数
**** Classes クラス
**** Etc
**** Web APIs
- https://developer.mozilla.org/en-US/docs/Web/API
***** Console
****** Methods
******* Console.log()
- 
  Output a message to the Web Console.

***** History
- The History interface allows to manipulate the browser session history,
  that is the pages visited in the tab or frame that can current page is loaded in.

****** Methods

******* Properties
******** History.length
******** History.satte
******* Methods
******** History.back()
- 
  Goes to the previous page is session history.
  The same action as when the user clicks the browser's Back button.
  Equivalent to history.go(-1).

******** History.forward()
- 
  Goes to the next page in session history.
  Equivalent to history.go(1).

******** History.go()
- 
  Loads a page from session history, identified by its relative location to the current page.

*** Grammer 文法
**** Fundamentals
- 文の終了は;(Semicolomn)
- 文字列は"か'で囲む
- コメントは//から。
- 変数定義はvarをつける
- 演算の省略形として、+=, ++なども使用可能。
- 配列は、var names = [a, b, c, ...]; という形式。
- 連想配列は、var key = { };
- user["name"]と、user.nameは同じ。
- データ型 : 

**** Obsolete
***** Types Values, variables, literals
****** 値
******* 数値

******* 論理値

******* 文字列

******* null

******* undefined

****** Variables 変数
******* 名前
- 
  識別子はアルファベット、アンダースコア(_)、ドル記号($)から始まらなければいけない。
  続く文字は数字(0-9)も使用できる。
  大文字・小文字を区別する。

******* Scope スコープ
- グローバル（大域）変数
  関数の外側で宣言すると、どのコードからも使用できる。
- ローカル（局所）変数
  関数の内部で宣言すると、関数の中のみで使用できる。
- ブロック文
  ブロックを内包しているコードに局所化される。

****** 定数
- 
  constキーワードを用いて、読み取り専用の定数を作成できる。

****** Literals リテラル
******* 配列リテラル

******* 真偽値リテラル

******* 整数

******* 浮動小数点数リテラル

******* オブジェクトリテラル

******* 文字列リテラル

******* Unicode

****** Data structuer and types
***** Expressions and Operators 式と演算子
****** 式
- 算術式
- 文字列式
- 論理式
- オブジェクト式

****** 演算子

******* 代入演算子

******* 比較演算子

******* 算術演算子

******* ビット演算子

******* 論理演算子

******* 文字列演算子

******* 特殊演算子

***** 正規表現
***** Control flow 条件式
****** 条件文

******* if...else

******* switch

****** ループ文

******* for

******* do...while

******* while

******* label

******* break

******* continue

****** オブジェクト操作文

******* for...in

******* for each...in

****** コメント

****** 例外処理分

******* throw

******* try...catch

******** catchブロック

******** finallyブロック

**** W3C
***** Syntax
****** Loop
******* for(;;)
******* for( in )
******* while()
******* do...while()
******* break
******* continue
******* try, catch, throw

***** Function
****** Popup
******* alert
******* confirm
******* prompt

***** Event
****** onload
****** onunload
****** onfocus
****** onblur (when losing focus)
****** onchange
****** onsubmit
****** onmouseover
****** onmouseout

***** Object
****** Document
****** String
******* length
******* toUpperCase()
****** Date
****** Array
****** Boolean
****** Math
****** RegExp
****** Navigator

***** Developer Tool
****** Ctrl-Shift-J or F12

** Edition
*** 5
*** 5.1
*** 6, 2015
- 2015/6/17公開
  
*** 2016(7)
- 策定中
  基本的には、ES6(2015)のバグ修正。加えて、2016/1にStage4となっているProposalが入る。

** 外部Tool
*** 分類
**** MVC
- Backbone.js
**** MVVM
- AngularJS
- Vue.js

**** Virtual DOM
***** About
- 
  [[http://qiita.com/mizchi/items/4d25bc26def1719d52e6][なぜ仮想DOMという概念が俺達の魂を震えさせるのか - Qiita]]
***** React
***** Flux
**** DOM操作
- jQuery

**** テンプレートエンジン
- Underscore.js

**** Webグラフィックス
- three.js
- D3.js

**** altJS
***** CoffeeScript
***** TypeScript
***** Dart
***** Haxe
***** JSX
- 
  DeNAによって開発された。

***** Scala.js
***** Link
- [[http://pepabo.github.io/docs/frontend/standard/javascript-and-altjs.html][JavaScriptとaltJS - pepabo.github.io]]

**** ServerSide
- Node
- Rhino

**** Transpile
***** Babel
- 
  ECMAScript2015(ES6)やECMAScript7で書かれたコードを、
  一般的なブラウザがサポートしているEcmaScript5の形式に出力する。

- 
  [[https://html5experts.jp/kyo_ago/16979/][Babelで始める！モダンJavaScript開発 - HTML5 Experts.js]]

**** Test
- QUnit
- Jasmine

**** WebComponents
***** About
- [[https://www.w3.org/standards/techs/components#w3c_all][WEB COMPONENTS CURRENT STATUS - W3C]]
- [[http://postd.cc/the-state-of-web-components/][Web Componentsの現状 - POSTD]]
- [[http://www.h2.dion.ne.jp/~defghi/webc/webc.htm][Web Copmonetsの基本的な使い方・まとめ]]
- [[http://www.h2.dion.ne.jp/~defghi/webc/webc.htm][Web開発者に革命をもたらす!「Web Components」超入門 - LIG.inc]]
*** jQuery
- 
  容易に記述できるようにするためのJavaScriptライブラリ。

**** Fundamentals
- 使い方
  - 
    1. jQueryオブジェクトを作成（セレクタ）
    2. jQueryオブジェクトに対しメソッドを呼び出す（メソッド）
  
  - format
    $('セレクタ').メソッド(引数);

- 読み込み
  - jQueryの読み込み
    headタグにurlを埋め込むのが一般的。
    <script src="https://~jquery.min.js"></script>

  - jQuery Scriptの読み込み
    bodyタグの最後に書くことで、表示速度を速めることをよく行う。
    <script src="myjQueryScripts.js"></script>

- ファイルの書き方
  $(document).ready()の中に処理を書く。
  省略形として、$(function(){});と書いてもよい。
  
  - format
    $(document).ready(function(){
      // write jQuery here
    });
    
    $(function(){
      // write jQuery here
    });

***** Event
- 処理を行うタイミングを指定できる。

- format
  $('セレクタ').イベント名(function(){
    // 処理
  });
  
***** Variables
- 
  変数をvar宣言して使う。頭に$を用いて、jQueryで使うことを分かりやすくする。

- ex)
  var $div = $('div');

***** Method Chain
- 
  連続してオブジェクトにメソッドを適用する。

- ex)
  $('div').css('color', 'red').html('jQuery');

**** Selector セレクタ
- 基本的にはCSSと同じ方式。

- id
  #で指定する。

- class
  .で指定する。

- this
  イベントが起こった要素を取得できる。クォートでは囲まない。

**** Method メソッド
***** Ajax
***** CSS
****** .css()
- 
  Get the value of a computed style property for the first element in the set of matched elements
  or set one or more CSS properties for every matched element.

***** Effects
****** Basics
******* fadeIn()
- Display the matched elements by fading them to opaque.

******* fadeOut()
- Hide the matched elements by fading them to trasparent.

******* hide()
- Hide the matched elements.

******* show()
- Display the matched elements.
  表示する

******* slideDown()
- Display the matched elements with a sliding motion.
******* slideUp()
- Hide the matched elements with a sliding motion.

***** Events
****** Mouse Event
******* .click()
- Bind an event handler to the "click" JavaScript event, or trigger that event on an element.

******* .hover()
- 
  Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elemensts.
  2つの引数をとる。1つ目はマウスを乗せたとき、2つ目はマウスを除いた時の挙動。カンマで区切る。
  
- ex)
  $('div').hover(
    function(){
      // on mouse event
    },
    function(){
      // off mouse event
    }
  };

***** Manipulation
****** Class Attribute
******* .addClass()
- 
  Adds the specified class(es) to each element in the set of matched elements.

******* .hasClass()
- 
  Determine whether any of the matched elements are assigned the given class.

******* .removeClass()
- 
  Remove a single class, multiple classes, or all classess from each element in the set of matched elements.

****** DOM Insertion, Inside

******* .html()
- 
  Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element.

******* .text()
- 
  Get he combined text contents of each element in the set of matched elements, 
  including their descendants, or set the text contents of the matched elements.

***** Traversing
****** Tree Traversal
******* .children()
- 
  Get the children of each element in the set of matched elements, optionally filtered by a selector.
  自分の一つ下の子要素までを選択。

******* .find()
- 
  Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
  自分以下の子孫要素を全て選択。

- ex)
  $('Wrapper').find('a').css('color', 'red');

****** Filtering
******* .eq()
- 
  Reduce the set of matched elements to the one at the specified index.
  
**** Memo
***** 読み込む位置
- 
  最近は体感スピード向上のため、</body>直前で読み込むことが多い模様。

**** Link
- [[http://jquery.com/][jQuery]]

** Glossary
** Memo
*** 標準スクリプト言語の指定
- 
  HTML4.01までは、以下の記述によりonclickなどで使われる標準のスクリプト言語指定が推奨されていたが、
  HTML5ではデフォルトがjavascriptとなり、設定不要に。
  <meta http-equiv="Content-Script-Type" content="text/javascript">

*** 変換
- 
  int.toString(2)  // 2進数へ変換
  int.toString(16) // 16進数へ変換
  parseInt(bin,2)  // 2進⇒10進数へ変換
  parseInt(hex,16) // 16進⇒10進数へ変換

*** Math
- 
  Math.random  // 0以上1未満の乱数を取得。
  ex:
      Math.floor(Math.random * 10) // 0以上10未満の自然数を取得
      Math.ceil(Math.random * 10)  // 0以上10以下の自然数を取得、気持ち0含まない。

  Math.pow(x,y) // xのyべき乗

*** DOM
**** window

- setInterval
    一定の遅延間隔を置いて関数を繰り返し呼び出す。
    ex: intervalId = window.setInterval(animate, 500)

- clearInterval
    setIntervalを使用して設定された繰り返し動作をキャンセルする。
    ex: window.clearInterval(intervalID)

***** document

- readyState
    読み込み中の場合"loading",
    パースが完了したがサブリソースが読み込み中の場合"inactivate",
    サブリソースの読み込みも完了した時点で"complete"となる。

*** 条件付コメント
- 
  IEのバージョン5からバージョン9まででサポートされている構文。
  ex) <!--[if lt IE 9]>
  上記はIEのバージョンが9より小さい場合に、コメント内部を実行する条件。

*** 匿名関数の即時実行
- 
  (function(){
    //関数
  })();

*** トラッキングコード
- 
  [[http://web-tan.forum.impressrd.jp/l/6342][Googleアナリティクスとは／衣袋教授のGoogleアナリティクス入門講座 コーナーの記事一覧 - Web担当者Forum]]

*** Modal Window モーダル（用語）
- 
  何らかのウインドウの子ウィンドウとして生成され、
  ユーザーがそれに対して適切に応答しない限り、制御を親ウィンドウに戻さないユーザインターフェイス設計になっているもの。
  
*** ブラウザ上でのJavaScriptの簡単な実行方法
- 管理者ツールのconsoleを利用する
  管理者ツールを立ち上げて、consoleを利用する。
  
** Link
- [[http://www.ecma-international.org/publications/standards/Ecma-262.htm][Standard ECMA-262 - ecma INTERNATIONAL]]

- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide][JavaScript Guide - MDN]]
- [[https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide][JavaScriptガイド - MDN]]
− [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference][JavaScript reference - MDN]] 
- [[https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference][JavaScriptリファレンス - MDN]]

- [[http://speakingjs.com/][Speaking JavaScript: An In-Depth Guide for Programmers]]

- [[http://qiita.com/mizchi/items/3bbb3f466a3b5011b509][春からはじめるモダンJavaScript / ES2015 - Qiita]]
