* JavaScript
** Specification
*** ECMAScript 2016
**** data Types and values
*** ES5.1
**** Lexical Conventions
**** Type
**** Type Conversion and Testing
**** Expressions
***** Primary Expressions
***** Left-Hand-Side Expressions
***** Postfix Expressions
***** Unary Operators
***** Multiplicative Operators
***** Additive Operators
***** Bitwise Shift Operators
***** Relational Operators
***** Equility Operators
***** Binary Bitwise Operators
***** Binary Logical Operators
***** Conditional Operator
***** Assignment Operators
***** Comma Operator
**** Statements
***** Block
***** Variable Statement
****** 構文
- Variable Statement : 
    var Variable DeclarationList ;
- Variable Declaration List :
    Variable Declaration
    Variable DeclarationList, VariableDeclaration
- VariableDeclarationListNoIn :
    VariableDeclarationNoIn
    VariableDeclarationListNoIn, VariableDeclarationNoIn
- VariableDeclaration :
    Identifier Initialiseropt
- VariableDeclarationNoIn :
    Identifier VariableDeclarationNoInopt
- Initialiser :
    = AssignmnetExpression
- InitialiserNoIn :
    = AssignmnetExpressionNoIn

***** Empty Statement
****** 構文
- ;
***** Expression Statement
***** The if Statement
****** if
***** Iteration Statement
****** do-while
****** while
****** for
****** for-in
***** continue
***** break
***** return
***** with
***** switch
***** throw
***** try
***** debugger
**** Function
**** Objects
**** Link
- [[http://www.ecma-international.org/ecma-262/5.1/index.html][ECMAScript Language Specification (5.1 Edition)]]
- [[http://www.webzoit.net/hp/it/internet/homepage/script/ecmascript/ecma262_51/contents/][ECMAScript 5.1 邦訳 - webzoit.net]]
***** Global
***** Object
***** Function
***** Array
***** String
***** Boolean
***** Number
***** Math
***** Date
***** RegExp
***** Error
***** JSON
**** Error
*** DOM
- [[https://dom.spec.whatwg.org/#interface-document][DOM - Living Standard]]
*** XMLHttpRequest
- [[https://xhr.spec.whatwg.org/][XMLHttpRequest - Living Standard]]
** JavaScript(MDN)
*** Global Objects グローバルオブジェクト
**** Value propeties
***** Infinity
***** NaN
***** undefined
***** null literal
**** Function properties
***** eval()
***** isFinite()
***** isNaN()
***** parseFloat()
***** parseInt()
***** decodeURI()
***** decodeURIComponent()
***** encodeURI()
***** encodeURIComponent()
***** uneval() - nonstandard
***** escape() - deprecated
***** unescape() - deprecated
**** Fundamental objects
***** Object
***** Function
***** Boolean
***** Symbol
***** Error
****** EvalError
****** InternalError
****** RangeError
****** ReferenceError
****** SyntaxError
****** TypeError
****** URIError
**** Numbers and dates
***** Number
***** Math
****** 
***** Date
**** Text processing
***** String
***** RegExp
**** Indexed collections
***** Array
****** Int8Array
****** Uint8Array
****** Uint8ClampedArray
****** Int16Array
****** Int32Array
****** Uint32Array
****** Float32Array
****** Float64Array
**** Keyed collections
***** Map
***** Set
***** WeakMap
***** WeakSet
**** Vector collections
***** SIMD
****** SIMD.Float32x4
****** 
**** Structured data
***** ArrayBuffer
***** DataView
***** JSON
**** Control abstraction objects
***** Promise
***** Generator
***** GeneratiorFunction
**** Reflection
***** Reflect
***** Proxy
**** Internationalization
***** Intl
**** Other
***** arguments
*** Statements 文
**** Control flow 制御フロー
***** Block ブロック
- 0個以上の文をグループ化するのに使う。波括弧で囲む。
***** break
- 現在実行中のループ、switchによる分岐、あるいはラベル文を終了し、その終了した文に続く文へとプログラムの制御を移行する。
***** continue
- 現在実行中のループ、またはラベル付きループで現在反復している文の実行を終了し、そのループの実行を次の反復から継続する。
***** Empty 空文
- 文が必要ないがJavaScriptの文法上1つの文が必要な場合に用いる。
- 構文
  ;
***** if...else
- 与えられた条件が真の場合はある文を実行する。条件が偽の場合はまた別の文を実行できる。
***** switch
- ある式を評価し、式の値をケース節と照らし合わせ、ケース節に関連付けられた文を実行する。
- 構文
  switch (expression) {
    case value1:
      // statement
      [break;]
    case value2:
      // statement
      [break;]
    ...
    case valueN:
      // statement
      [break;]
    default:
      // statement
      [break;]
  }
***** throw
***** try...catch
**** Declarations
***** var
- 変数を宣言し、その変数を初期化することもできる。
***** let
- ブロックスコープを持つ局所変数を宣言し、その変数をある値に初期化することもできる。
  (ES6以降)
***** const
- 読み取り専用の名前付き定数を宣言する。
  (ES6以降)
**** Functions and classes
***** function
***** function*
***** return
***** class
**** Iterations
***** do...while
***** for
***** for...in
***** for...of
***** while
**** Others
***** debugger
***** export
***** import
***** label
*** Expressions and operators 式と演算子
**** Primary expressions
***** this
***** function
***** class
***** function*
***** yield
***** yield*
***** []
***** {}
***** /ab+c/i
***** ()
**** Left-hand-side expressions
***** Property accessors
***** new
***** new.target
***** super
***** ...obj
**** Increment and decrement
***** A++
***** A--
***** ++A
***** --A
**** Unary operators
***** delete
***** void
***** typeof
- 与えられたオブジェクトの型を判別する
***** +
***** -
***** -
***** !
**** Arithmetic operators
***** +
***** -
***** /
***** *
***** %
***** **
**** Relational operators
***** in
***** instanceof
***** <
***** >
***** <=
***** >=
**** Equality operators
***** ==
***** !=
***** ===
***** !==
**** Bitwise shift operators
***** <<
***** >>
***** >>>
**** Binary bitwise operators
***** &
***** |
***** ^
**** Binary logical operators
***** &&
***** ||
**** Conditional (ternary) operator
***** (condition ? ifTrue : ifFalse)
**** Assignment operators
***** =
***** *=
***** /=
***** %=
***** +=
***** -=
***** <<=
***** >>=
***** >>>=
***** &=
***** ^=
***** |=
***** [a, b] = [1, 2],  {a, b} = {a:1, b:2} 
- Destructurning assignment, 分割代入
  配列かオブジェクトからデータをおtり出して別個の変数に代入することを可能にする構文。

****** Syntax
- 前提: var a, b, rest
- [a, b] = [1, 2]
- [a, b, ...rest] = [1, 2, 3, 4, 5]
- ({a, b} = {a:1, b:2})
- ({a, b, ...rest} = {a:1, b:2, c:3, d:4})
  ※Firefox 47a01では未実装
  
**** Comma operator
***** ,
*** Functions 関数
**** arguments
**** Arrow functions アロー関数
- 
  匿名関数。function式と比べてより短い構文を持ち、thisの値を語彙的に束縛数r。
  
***** 構文
- (param1, param2, ..., paramN) => { statements }
- expression
  - (param1, param2, ..., paramN) => expressoin
    // => { return expression; } と等価
- 引数が一つの場合、()は任意
  - singleParam => { statements }
  - (singleParam) => { statements }
- 引数を取らない場合、()は必須
  - () => { statements }

- Objectリテラル式を返す場合、本体を()で囲む
  - params => ({foo: bar})
- restとデフォルト引数
  - (param1, param2, ...rest) => { statements }
  - (param1 = defaultValue1, param2, ..., paramN = defaultValueN) => { statements}
- 分割代入
  - var f = ([a, b] = [1, 2], {x: c} = {x: a + b}) => a + b + c;
**** Default parameters
**** Rest parameters 残余引数
- 
  不特定多数の引数を配列として表す。
  関数の最後の名前付き引数に"..."の前置辞を付けると、実際に関数に渡された残りの引数による要素の配列となる。
  
***** Syntax
- function(a, b, ...theArgs) {
    // ...
  }
*** Classes クラス
*** DOM
- [[https://developer.mozilla.org/ja/docs/DOM/DOM_Reference][DOMリファレンス - MDN]]
**** window
- [[https://developer.mozilla.org/ja/docs/Web/API/Window][window - MDN]]
***** Property
****** Window.console
****** Window.document
- 指定ウィンドウが含む文書への参照を返す
****** Window.history
- historyオブジェクトへの参照を返す
****** Window.location
- windowオブジェクトのロケーション、または現在のURLを取得/設定
****** Window.status
- ブラウザ下部のステータスバーのテキストを取得/設定
***** Method
****** Window.alert()
- 警告ダイアログを表示
****** Window.close()
- カレントウィンドウを閉じる
****** Window.find()
- ウィンドウ内で文字列を検索する
***** Event handler
****** WindowTimers.clearInterval()
- 
  setIntervalを使用して設定された繰り返し動作をキャンセルする。
  ex: window.clearInterval(intervalID)
****** WindowTimers.setInterval()
- 
  一定の遅延間隔を置いて関数を繰り返し呼び出す。
  ex: intervalId = window.setInterval(animate, 500)
****** WindowTimers.setTimeout()
***** Constractor
**** document
***** Properties
****** Extension for HTML document
******* Document.cookie
- 
  documentのcookieのセミコロンで区切られたリストを返すか、一つのcookieを設定する。

******* Document.location
- 
  現在のdocumentのURIを返す。

******* Document.readyState
- 
  読み込み中の場合"loading",
  パースが完了したがサブリソースが読み込み中の場合"inactivate",
  サブリソースの読み込みも完了した時点で"complete"となる。

***** Methods
****** Document.getElementsByClassName()
- 
  引数で与えられたclass名を持つエレメント群のリストを返す。
  
****** Document.getElementsByTagName()
- 
  引数で与えられたタグ名を持つエレメント群のリストを返す。

****** document.getElementById(String id)
- 
  特定のidを持つエレメントへのオブジェクト参照を返す。

****** document.querySelector(String selector)

****** document.querySelectorAll(String selector)
****** Extentions for HTML document
******* document.close()
- 書き込み用のドキュメントストリームを閉じる
******* document.open()
- 書き込み用のドキュメントストリームを開く
******* document.write(String text)
- ドキュメントにテキストを書き込む
******* document.writeln(String text)
- ドキュメントにテキスト行を書き込む
*** Web APIs
- https://developer.mozilla.org/en-US/docs/Web/API
**** Console
***** Methods
****** Console.log()
- 
  Output a message to the Web Console.

**** History
- The History interface allows to manipulate the browser session history,
  that is the pages visited in the tab or frame that can current page is loaded in.

***** Methods

****** Properties
******* History.length
******* History.satte
****** Methods
******* History.back()
- 
  Goes to the previous page is session history.
  The same action as when the user clicks the browser's Back button.
  Equivalent to history.go(-1).

******* History.forward()
- 
  Goes to the next page in session history.
  Equivalent to history.go(1).

******* History.go()
- 
  Loads a page from session history, identified by its relative location to the current page.

**** XMLHttpRequest
***** Methods
****** abort()
- リクエストが既に送信されている場合、リクエストを中止する。
****** open()
- def
  void open(
    DOMString method,
    DOMString url,
    optional boolean async,
    optional DOMString user,
    optional DOMString password
  );
- argment
  - method : 使用するHTTPメソッド。"GET", "POST", "PUT", "DELETE"など。
  - url : リクエストを送信するURL
  - async : 非同期で操作を実行するかを示す、オプションの真偽値。
  - user : 認証を目的として使用される、ユーザー名のオプション。
  - password : 認証を目的として使用される、パスワードのオプション。

- リクエストを初期化する。
****** send()
- 
  リクエストを送信する。非同期リクエストの場合、メソッドはリクエストを送信して間もなく返る。
  同期リクエストの場合はレスポンスが到着するまで返らない。

***** Properties
****** XMLHttpRequest.onreadystatechange
- readyState属性が変更する都度呼び出されるEventHandler。
****** XMLHttpRequest.readyState
- 
  リクエストの状態をunsigned short型の値で返す。
  
- 
  |-------+------------------+------------------------------------------------------------|
  | value | state            | expression                                                 |
  |-------+------------------+------------------------------------------------------------|
  |     0 | UNSENT           | open()がまだ呼び出されていない                             |
  |     1 | OPENED           | send()がまだ呼び出されていない                             |
  |     2 | HEADERS_RECEIVED | send()が呼び出され、ヘッダーとステータスが通った。         |
  |     3 | LOADING          | ダウンロード中。responseTextは断片的なデータを保持している |
  |     4 | DONE             | 一連の動作が完了した                             |
  |-------+------------------+------------------------------------------------------------|
  
****** XMLHttpRequest.responseText
- リクエストに対するテキスト形式でのレスポンスを含むDOMStringを返す。
  リクエストの失敗または未送信の場合はnullとなる。
****** XMLHttpRequest.state
***** Event
****** onreadystatechange
*** Etc
** Grammer 文法
*** Fundamentals Memo
- 文の終了は;(Semicolomn)
- 文字列は"か'で囲む
- コメントは、一文は//、複数行は/* */。
- 変数
  - 宣言はvar, let(ブロックスコープ), const(定数)。
    何も付与しないと常にグローバル変数として遷延される。
  - ES6以前にはブロック文のスコープがない。
    ブロックスコープを利用するにはletを利用する。
  - 変数の巻き上げ(hoisting)が行われる。
  - グローバル変数は、実際にはグローバルオブジェクト(Webページではwindow)のプロパティ。
    window.varでアクセス可能。
- データ型
  - 6つのプリミティブ型とオブジェクト型の7つの型が定義されている。
    - Boolean, null, undefined, Number, String, Symbol, およびObject。

- 演算の省略形として、+=, ++なども使用可能。
- 配列は、var names = [a, b, c, ...]; という形式。
- 連想配列は、var key = { };
- user["name"]と、user.nameは同じ。
- データ型 : 

*** Obsolete
**** Types Values, variables, literals
***** Variables 変数
****** 名前
- 
  識別子はアルファベット、アンダースコア(_)、ドル記号($)から始まらなければいけない。
  続く文字は数字(0-9)も使用できる。
  大文字・小文字を区別する。

****** Scope スコープ
- グローバル（大域）変数
  関数の外側で宣言すると、どのコードからも使用できる。
- ローカル（局所）変数
  関数の内部で宣言すると、関数の中のみで使用できる。
- ブロック文
  ブロックを内包しているコードに局所化される。

**** Control flow 条件式
***** 条件文

****** if...else

****** switch

***** ループ文

****** for

****** do...while

****** while

****** label

****** break

****** continue

***** オブジェクト操作文

****** for...in

****** for each...in

***** コメント

***** 例外処理分

****** throw

****** try...catch

******* catchブロック

******* finallyブロック

*** W3C
**** Syntax
***** Loop
****** for(;;)
****** for( in )
****** while()
****** do...while()
****** break
****** continue
****** try, catch, throw

**** Function
***** Popup
****** alert
****** confirm
****** prompt

**** Event
***** onload
***** onunload
***** onfocus
***** onblur (when losing focus)
***** onchange
***** onsubmit
***** onmouseover
***** onmouseout

**** Object
***** Document
***** String
****** length
****** toUpperCase()
***** Date
***** Array
***** Boolean
***** Math
***** RegExp
***** Navigator

**** Developer Tool
***** Ctrl-Shift-J or F12

** Edition
*** 5
*** 5.1
*** 6, 2015
- 2015/6/17公開
  
*** 2016(7)
- 策定中
  基本的には、ES6(2015)のバグ修正。加えて、2016/1にStage4となっているProposalが入る。

** Tools
*** 分類
**** MVC
- Backbone.js
**** MVVM
- AngularJS
- Vue.js

**** Virtual DOM
***** About
- 
  [[http://qiita.com/mizchi/items/4d25bc26def1719d52e6][なぜ仮想DOMという概念が俺達の魂を震えさせるのか - Qiita]]
***** React
***** Flux
**** DOM操作
- jQuery

**** テンプレートエンジン
- Underscore.js

**** Webグラフィックス
- three.js
- D3.js

**** altJS
***** CoffeeScript
***** TypeScript
***** Dart
***** Haxe
***** JSX
- 
  DeNAによって開発された。

***** Scala.js
***** Link
- [[http://pepabo.github.io/docs/frontend/standard/javascript-and-altjs.html][JavaScriptとaltJS - pepabo.github.io]]

**** ServerSide
- Node.js
- Rhino

**** Transpile
***** Babel
- 
  ECMAScript2015(ES6)やECMAScript7で書かれたコードを、
  一般的なブラウザがサポートしているEcmaScript5の形式に出力する。

- 
  [[https://html5experts.jp/kyo_ago/16979/][Babelで始める！モダンJavaScript開発 - HTML5 Experts.js]]

**** Package Management
- npm
- bower
  ブラウザ環境のためのパッケージ管理ツール。ブラウザ版npmのようなもの。
**** Module system
- Browserify
- RequireJS
- WebPack
  CommonJSとAMDの両方のスタイルを同時にサポートするのが特徴。
**** Test
- QUnit
- Jasmine

**** WebComponents
***** About
- [[https://www.w3.org/standards/techs/components#w3c_all][WEB COMPONENTS CURRENT STATUS - W3C]]
- [[http://postd.cc/the-state-of-web-components/][Web Componentsの現状 - POSTD]]
- [[http://www.h2.dion.ne.jp/~defghi/webc/webc.htm][Web Copmonetsの基本的な使い方・まとめ]]
- [[http://www.h2.dion.ne.jp/~defghi/webc/webc.htm][Web開発者に革命をもたらす!「Web Components」超入門 - LIG.inc]]
*** jQuery
- 
  容易に記述できるようにするためのJavaScriptライブラリ。

**** Fundamentals
- 使い方
  - 
    1. jQueryオブジェクトを作成（セレクタ）
    2. jQueryオブジェクトに対しメソッドを呼び出す（メソッド）
  
  - format
    $('セレクタ').メソッド(引数);

- 読み込み
  - jQueryの読み込み
    headタグにurlを埋め込むのが一般的。
    <script src="https://~jquery.min.js"></script>

  - jQuery Scriptの読み込み
    bodyタグの最後に書くことで、表示速度を速めることをよく行う。
    <script src="myjQueryScripts.js"></script>

- ファイルの書き方
  $(document).ready()の中に処理を書く。
  省略形として、$(function(){});と書いてもよい。
  
  - format
    $(document).ready(function(){
      // write jQuery here
    });
    
    $(function(){
      // write jQuery here
    });

***** Event
- 処理を行うタイミングを指定できる。

- format
  $('セレクタ').イベント名(function(){
    // 処理
  });
  
***** Variables
- 
  変数をvar宣言して使う。頭に$を用いて、jQueryで使うことを分かりやすくする。

- ex)
  var $div = $('div');

***** Method Chain
- 
  連続してオブジェクトにメソッドを適用する。

- ex)
  $('div').css('color', 'red').html('jQuery');

**** Selector セレクタ
- 基本的にはCSSと同じ方式。

- id
  #で指定する。

- class
  .で指定する。

- this
  イベントが起こった要素を取得できる。クォートでは囲まない。

**** API
***** Ajax
***** CSS
****** .css()
- 
  Get the value of a computed style property for the first element in the set of matched elements
  or set one or more CSS properties for every matched element.

***** Effects
****** Basics
******* fadeIn()
- Display the matched elements by fading them to opaque.

******* fadeOut()
- Hide the matched elements by fading them to trasparent.

******* hide()
- Hide the matched elements.

******* show()
- Display the matched elements.
  表示する

******* slideDown()
- Display the matched elements with a sliding motion.
******* slideUp()
- Hide the matched elements with a sliding motion.

***** Events
****** Mouse Event
******* .click()
- Bind an event handler to the "click" JavaScript event, or trigger that event on an element.

******* .hover()
- 
  Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elemensts.
  2つの引数をとる。1つ目はマウスを乗せたとき、2つ目はマウスを除いた時の挙動。カンマで区切る。
  
- ex)
  $('div').hover(
    function(){
      // on mouse event
    },
    function(){
      // off mouse event
    }
  };

***** Manipulation
****** Class Attribute
******* .addClass()
- 
  Adds the specified class(es) to each element in the set of matched elements.

******* .hasClass()
- 
  Determine whether any of the matched elements are assigned the given class.

******* .removeClass()
- 
  Remove a single class, multiple classes, or all classess from each element in the set of matched elements.

****** DOM Insertion, Inside

******* .html()
- 
  Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element.

******* .text()
- 
  Get he combined text contents of each element in the set of matched elements, 
  including their descendants, or set the text contents of the matched elements.

***** Traversing
****** Tree Traversal
******* .children()
- 
  Get the children of each element in the set of matched elements, optionally filtered by a selector.
  自分の一つ下の子要素までを選択。

******* .find()
- 
  Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.
  自分以下の子孫要素を全て選択。

- ex)
  $('Wrapper').find('a').css('color', 'red');

****** Filtering
******* .eq()
- 
  Reduce the set of matched elements to the one at the specified index.
  
**** Memo
***** 読み込む位置
- 
  最近は体感スピード向上のため、</body>直前で読み込むことが多い模様。

**** Link
- [[http://jquery.com/][jQuery]]

*** node.js
**** v4.5.0
***** Command
- node [options] [v8 options] [script.js | -e "script"] [arguments]
****** Options
******* -v, --version
- Print node's version
******* -h, --help
- Print node command line options.
******* -e, --eval "script"
- Evaluate the following argument as JavaScript.
******* -p, --print "script"
- Identical to -e but prints the result.
****** Environmental Variables
******* NODE_PATH=path[:...]
****** Link
- [[https://nodejs.org/dist/latest-v4.x/docs/api/cli.html][Command Line Options - Node.js]]
***** Global Objects
****** Class:Buffer
****** __dirname
****** __filename
****** clearImmediate(immediateObject)
****** clearInterval(intervalObject)
****** clearTimeout(timeoutObject)
****** console
- <Object>
  Used to print to stdout and stderr.
  
****** exports
- 
  A reference to the "module.exports".

****** global
- <Object> The global namespace object
  In browsers, the top-level scope is the global scope.
  In Node.js, the top-level scope is not the global scope, and variables inside an Node.js module will be local to that module.
****** module
- <Object>
  A reference to the current module.
  In particular "module.exports" is used for defining what module exports and makes available through "require()".
  "module" isn't actually a global but rather local to each module.

****** process
- <Object>
  The process object.
****** require()
- <Function>
  To reqire modules.
  "require" isn't actually a global but rather local to each module.
****** setImmediate(callback[,arg][, ...])
****** setInterval(callback, delay[, arg][, ...])
****** setTimeout(callback, delay[, arg][, ...])
****** Link
- [[https://nodejs.org/dist/latest-v4.x/docs/api/globals.html][Globals - Node.js]]
***** Core Modules
****** Assert
****** Console
******* Class:Console
******** new Console(stdout[, stderr])
******** consle.assert(value[, mesage][, ...])
******** console.dir(obj[, options])
******** console.error([data][, ...])
******** console.info([data][, ...])
******** console.log([data][, ...])
******** console.time(label)
******** console.timeEnd(label)
******** console.trace(mesage[, ...])
******** console.warn([data][, ...])
****** HTTP
******* Class:http.Agent
******* Class:http.ClientRequest
******* Class:http.Server
******* Class:http.ServerResponse
******* Class:http.IncomingMessage
******* http.METHODS
******* http.STATUS_CODES
******* http.createClient([port][,host])
******* http.createServer([requestListener])
- Returns a new instance of http.Server.
  The "requestListener" is a function which is automatically added to the 'request' event.
******* http.get(options[,callback])
******* http.globalAgent
******* http.request(options[, callback])
****** Net
******* Class:net.Server
- The class inherits from net.Srever and has some additional events
******** Event:'checkContinue'
******** Event:'clientError'
******** Event:'connect'
******** Event:'connection'
******** Event:'request'
******** Event:'upgrade'
******** server.close([callback])
******** server.listen(handle[,callback])
******** server.listen(path[,callback])
******** server.listen(port[,callback])
******** server.listen(handle[,callback])
******** server.listen(handle[,callback])
******* Class:net.Socket
**** Link
- [[https://nodejs.org/en/][node.js]]
***** v4.5.0
- [[https://nodejs.org/dist/latest-v4.x/docs/api/cli.html#cli_command_line_options][Command Line Options - Node.js v4.5.0 Documentation]]

***** Tutorial
- http://www.nodebeginner.org/index-jp.html
- http://rfs.jp/sb/javascript/node
- http://libro.tuyano.com/index2?id=1115003
- http://sakuratan.biz/archives/3101

*** npm
- node package manager
**** CLI Commands
-
***** npm
- Synopsis
  npm <command> [args]

***** access
***** install
- 
  Install a package

- Alias
  npm i

- Synopsis
  npm install (with no args, in package dir)

****** arguments
******* --dry-run
******* -f, --force
******* -g, --global
- 
  npm to install the package globally rather than locally.

**** Link
- [[https://www.npmjs.com/][npm]]
- [[https://docs.npmjs.com/][docs - npm]]

*** Modules
**** browserify
- browser-side require() the node way
**** EJS
- テンプレートエンジン
***** Docs
****** Options
****** Tags
- <%  : 'Scriptlet' tag, for control-flow, no output
- <%= : Outputs the value into the template (HTML escaped)
- <%- : Outputs the unescaped value into the template
- <%# : Comment tag, no execution, no output
- <%% : Outputs a literal '<%'
- %>  : Plain ending tag
- -%> : Trim-mode ('newline slurp') tag, trims following newline
****** Includes
***** Link
- [[http://ejs.co/][EJS]]
**** Express
- Fast, unopinionated, minimalist web framowork for Node.js
  軽量フレームワーク。
***** 4.x API
****** express()
- Creates an Express aplication.
  express() function is a top-level function exported by the express module.
- Usage
  var express = require('express');
  var app = express();
******* Methods
******** express.static(root, [options])
- only built-in midleware function in Express.
  It serves static files and is based on serve-static.
******** express.Router([options])
- Creates a new router object
- Usage
  var router = express.Router([options]);
****** Application
- The app object convertionally denotes the Express application.
  Create it by calling the top-level express() function exported by the Express module
******* Properties
******* Events
******* Methods
******** app.get(name)
******** app.get(path, callback [,callback ....])
- Routes HTTP GET requests to the specified path with specified callback functions.
******** app.listen(port, [hostname], [backlog], [callback])
- Binds and listens for connections on the specified host and port.
****** Request
******* Properties
******* Methods
****** Response
******* Properties
******* Methods
****** Router
******* Methods
***** License
- Apache License, version 2.0
***** Link
- [[http://expressjs.com/][Express]]
**** Socket.io
*** Babel
*** React
**** Link
- [[https://facebook.github.io/react/docs/getting-started-ja-JP.html][QUICK START(日本語)]]
*** AngularJS
**** Link
- [[https://angularjs.org/][AngularJS]]
- [[http://js.studio-kingdom.com/angularjs/guide/introduction][AngularJS入門 - js STUDIO]]
*** React
-
**** Link
- [[https://facebook.github.io/react/docs/getting-started-ja-JP.html][始めてみましょう - React]]

** Glossary
*** hoisting 巻き上げ
- 
  関数内で宣言されたローカル変数は、すべてその関数の先頭で宣言されたものとみなされる。
  したがって、関数で使用されるローカル変数は、関数の先頭で宣言を行うようにすることで、間違いを視覚的に減らす。

- ex
  var myname = "global";
  function func(){
    console.log(myname); // -> undefined
    myname = "local";
    console.log(myname); // -> "local"
  }
  ↓(以下と同じと解釈される)
  var myname = "global";
  function func(){
    var myname;
    console.log(myname); // -> undefined
    myname = "local";
    console.log(myname); // -> "local"
  }

*** Data typeデータ型
**** Primitive プリミティブ型
***** Boolean
***** null
***** undefine
***** Number
***** String
***** Symbol
**** Object
*** Literal
**** Arary literal
**** Boolean literal
**** Floating-point literals
**** Integers
**** Object literals
- 
  プロパティ名とそれに関連付けられたオブジェクトの値との0個以上の組が波括弧{}で囲まれたもの。

- ex)
  var car = { myCar: "Saturn", getCar: carTypes("Honda"), special: sales };

**** RegExp literals
**** String literals
*** API仕様
**** CommonJS
- サーバサイドを開発するために生まれた標準APIの仕様で、元はServerJSという名前だった。
  その後他の分野に適用可能と考えCommonJSに改めた。
  モジュール機能が定義されており、require関数を使い、exportsとmoduleオブジェクトを利用する。
**** AMD
- Asynchronous Module Definition
  モジュールの非同期定義に関するAPI仕様。
  モジュールとそのモジュールに依存する他のモジュールの両方を非同期に読み込めるようモジュール定義がされている。
  元々はCommonJSで策定が進められていたが、後に切り離された。
**** UMD
- Universal Module Definition
  CommonJSとAMDの両方を含めたモジュール定義で、このフォーマットによりクライアントとサーバの両方の環境で動作するモジュールを定義できる。
** Memo
*** 標準スクリプト言語の指定
- 
  HTML4.01までは、以下の記述によりonclickなどで使われる標準のスクリプト言語指定が推奨されていたが、
  HTML5ではデフォルトがjavascriptとなり、設定不要に。
  <meta http-equiv="Content-Script-Type" content="text/javascript">

*** 変換
- 
  int.toString(2)  // 2進数へ変換
  int.toString(16) // 16進数へ変換
  parseInt(bin,2)  // 2進⇒10進数へ変換
  parseInt(hex,16) // 16進⇒10進数へ変換

*** Math
- 
  Math.random  // 0以上1未満の乱数を取得。
  ex:
      Math.floor(Math.random * 10) // 0以上10未満の自然数を取得
      Math.ceil(Math.random * 10)  // 0以上10以下の自然数を取得、気持ち0含まない。

  Math.pow(x,y) // xのyべき乗

*** 条件付コメント
- 
  IEのバージョン5からバージョン9まででサポートされている構文。
  ex) <!--[if lt IE 9]>
  上記はIEのバージョンが9より小さい場合に、コメント内部を実行する条件。

*** 匿名関数の即時実行
- 
  (function(){
    //関数
  })();

*** トラッキングコード
- 
  [[http://web-tan.forum.impressrd.jp/l/6342][Googleアナリティクスとは／衣袋教授のGoogleアナリティクス入門講座 コーナーの記事一覧 - Web担当者Forum]]

*** Modal Window モーダル（用語）
- 
  何らかのウインドウの子ウィンドウとして生成され、
  ユーザーがそれに対して適切に応答しない限り、制御を親ウィンドウに戻さないユーザインターフェイス設計になっているもの。
  
*** ブラウザ上でのJavaScriptの簡単な実行方法
- 管理者ツールのconsoleを利用する
  管理者ツールを立ち上げて、consoleを利用する。
  
** Link
- [[http://www.ecma-international.org/publications/standards/Ecma-262.htm][Standard ECMA-262 - ecma INTERNATIONAL]]
- [[https://dom.spec.whatwg.org/#interface-document][DOM - Living Standard]]

- MDN
  - [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide][JavaScript Guide - MDN]]
  - [[https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide][JavaScriptガイド - MDN]]
  − [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference][JavaScript reference - MDN]] 
  - [[https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference][JavaScriptリファレンス - MDN]]
  - [[https://developer.mozilla.org/ja/docs/Web/JavaScript/JavaScript_technologies_overview][JavaScript技術概説 - MDN]]
  - [[https://developer.mozilla.org/ja/docs/Web/API][Web APIインターフェース - MDN]]

- [[http://speakingjs.com/][Speaking JavaScript: An In-Depth Guide for Programmers]]

- [[http://qiita.com/mizchi/items/3bbb3f466a3b5011b509][春からはじめるモダンJavaScript / ES2015 - Qiita]]

- [[http://www.slideshare.net/yuka2py/javascript-23768378][最強オブジェクト指向言語 JavaScript 再入門！ - SlideShare]]
