* Assembly
** Memo x86(?)
*** Register レジスタ
**** 汎用レジスタ(GBR)
***** 汎用レジスタ
- 
  |------+------+------+-----+------------------+----------------------------|
  | 31-0 | 15-0 | 15-8 | 7-0 | 名称             | 用途                       |
  |------+------+------+-----+------------------+----------------------------|
  | EAX  | AX   | AH   | AL  | アキュムレータ   | 何にでも使う               |
  | EBX  | BX   | BH   | BL  | ベースレジスタ   | 何にでも使う               |
  | ECX  | CX   | CH   | CL  | カウントレジスタ | 何にでも使うが主にカウンタ |
  | EDX  | DX   | DH   | DL  | データレジスタ   | 何でも使う                 |
  |------+------+------+-----+------------------+----------------------------|
- 
  EnXは32bit
  nH,nLが8bitで両者を合わせたものがnX（16bit）
  X, EはExtendから。

***** インデックスレジスタ
- 
  |------+------+--------------------------------+------------------------------------------------|
  | 31-0 | 15-0 | 名称                           | 用途                                           |
  |------+------+--------------------------------+------------------------------------------------|
  | ESI  | SI   | ソースインデックス             | ストリング命令に利用するが、何に利用してもよい |
  | EDI  | DI   | デスティネーションインデックス | 同上                                           |
  |------+------+--------------------------------+------------------------------------------------|

***** ポインタレジスタ
- 
  |------+------+------------------+----------------------------------------|
  | 31-0 | 15-0 | 名称             | 用途                                   |
  |------+------+------------------+----------------------------------------|
  | EBP  | BP   | ベースポインタ   | 特別な用途に利用し、めったに利用しない |
  | ESP  | SP   | スタックポインタ | スタックを格納するアドレスのオフセット |
  |------+------+------------------+----------------------------------------|

**** セグメントレジスタ
- 
  |------+----------------------+------------------------------------------------------|
  | 15-0 | 名称                 | 用途                                                 |
  |------+----------------------+------------------------------------------------------|
  | SS   | スタックセグメント   | スタックを格納するアドレスのセグメントを指す         |
  | CS   | コードセグメント     | 次に実行するアドレスのセグメントを指す               |
  | DS   | データセグメント     | データを読み書きするアドレスのセグメントを指す       |
  | ES   | エクストラセグメント | 追加のデータを読み書きするアドレスのセグメントを指す |
  |------+----------------------+------------------------------------------------------|

**** ステータス・制御レジスタ
- 
  |--------+-------+----------------------------+----------------------------------------|
  | 31-0   | 15-0  | 名称                       | 用途                                   |
  |--------+-------+----------------------------+----------------------------------------|
  | EIP    | IP    | インストラクションポインタ | 次に実行するアドレスのオフセットを指す |
  | EFLAGS | FLAGS | ステータスレジスタ         | CPUの状態や前の命令のエラー状態が入る  |
  |--------+-------+----------------------------+----------------------------------------|

- フラグ
  |-------+------+-------------------------|
  |   bit | 略記 | 名称                    |
  |-------+------+-------------------------|
  |     0 | CF   | キャリーフラグ          |
  |     2 | PF   | パリティーフラグ        |
  |     4 | AF   | 補助フラグ              |
  |     6 | ZF   | ゼロフラグ              |
  |     7 | SF   | サインフラグ            |
  |     8 | TF   | トラップフラグ          |
  |     9 | IF   | 割り込み許可フラグ      |
  |    10 | DF   | ディレクションフラグ    |
  |    11 | OF   | オーバーフローフラグ    |
  | 12-13 | IOPL | I/O特権レベルフィールド |
  |-------+------+-------------------------|

*** 命令
**** move
- move dest,src
  (.COMはセグメントレジストが全て同じ値)

**** int
- 
  ソフトウェア割り込み
  "int 21h"がファンクションコール
  AHの内容で実行値が変わる。
  AHに4Chが入っている時にint 21hを動かすと終了する。

**** mov 即値の転送
- 
  mov ah,10     10進数
  mov ah,10h    16進数
  mov ah,10o    8進数
  mov ah,10b    2進数
  mov ah,'A'    文字コード
  mov ax,offset DATA    DATAという変数のアドレス


***** 直接アドレス法
- 
  mov DATA,al        変数に書き込む
  mov [1000h],al    アドレスに書き込む

  メモリ  レジストリと違い大きさが分からないため大きさを書く
  mov byte ptr DATA, 0 (byte ptr)
  mov word ptr DATA, 0 (word ptr)
  or
  mov DATA, byte ptr 0
  mov DATA, word ptr 0
  (コンパイラによって書き方が違う)

****** 間接アドレス法(メモリのアドレスをレジスタを使って指定)
- 
  mov bx,offset DATA
  mov byte ptr [bx], 0
  or
  mov [bx], byte ptr 0
  mov [byte ptr bx], 0

  ワード以上だと逆順に格納
  mov [1000h],word ptr 1234h ⇒ 34h(1000h), 12h(1001h)
  mov [1000h],dword ptr 12345678h ⇒ 78h(1000h), 56h(1001h), 34h(1000h), 12h(1000h)

**** 疑似命令
- 
  CPUでなくアセンブラに伝える命令を「疑似命令」という。
  DB    byte
  DW    word
  DD    dword

**** ADD 足し算
- 
  ADD DEST,SRC (DEST←DEST+SRC)
  ADC DEST,SRC

  AAA
    桁超えをしたものを補正してくれる

**** SUB 引き算
- 
  SUB DEST,SRC
  SBB DEST,SRC    (キャリーフラグつき)

**** MUL, IMUL かける
- MUL SRC        符号なし
- IMUL SRC    符号付き
  AX        AL×SRC
  DX:AX    AX×SRC
  EDX:EAX    EAX×SRC

**** DIV, IDIV わる
- DIV SRC
- IDIV SRC
  AX÷SRC→余AH, 商AL
  DX:AX÷SRC→余DX, 商AX
  EDX:EAX÷SRC→余EDX, 商EAX

**** INC, DEC
- 
  1足す（引く）

**** JMP DEST
- DESTに移行する
  short, near, farがある。

**** CMP SRC1,SRC2
- 
  比較
  SRC1 - SRC2のフラグのみ残る

**** JMP系
JCXZ DEST
JECXZ DEST
    条件分岐。CX(ECX)が0のときジャンプ。

LOOP SRC
    (E)CX=(E)CX-1,not equal 0ならSRCにショートジャンプ

LOOPZ, LOOPE SRC
    ZF=1ならジャンプ
LOOPNZ, LOOPNE SRC
    ZF=0ならジャンプ

**** サブルーチン
- 
    CALL
    RET
        SS:SPを2増やしてcall, 2減らしてret

    先：public サブルーチン名
    元：extern サブルーチン名:near

    PUSH
    POP

    PUSHA,POPA        AX,CX,DX,BX,SP,BP,SI,DI(POPはA逆順）
    PUSHAD,POPAD    EAX,ECX...

    PUSHF,POPF        FLAGS
    PUSHFD,POPFD    EFLAGS

**** 論理
- 
    AND DEST,SRC
    OR DEST,SRC
    XOR DEST,SRC
    NOT DEST
    NEG DEST
        2の補数
    TEST SRC1,SRC2
        論理積(ANDと同じ)、結果が保持されずフラグのみ持つ

**** シフト
- 
    SHR DEST,COUNT
    SHL DEST,COUNT
    SAR DEST,COUNT
    SAL DEST,COUNT
        算術（最上位ビットが保存）

**** ローテート
- 
    RCL, RCR キャリーフラグ込み
    ROL, ROR キャリーフラグは溢れ分

**** ストリング命令
- 
    読み出しは[DS:SI]
    書き出しは[ES:DI]
    レジスタはEAX,AX,ALのみ


    MOVSB, MOVSW, MOVSD
    REP MOVS?
        CX回繰り返す
    REP,REPE(REPZ),REPNE(REPNZ)

    CLD        DF=0
    STD        DF=1


    LODS?
        メモリをレジストリAL,AX.EAXに読み込む
    STOS?
        レジストリをメモリに
    SCAS?
        レジスタとメモリを比較
    CMPS?
        [DS:SI]と[ES:DI]の比較

**** 入出力
- 
    Memory Mapped I/O
        メモリ空間の一部を制御用の空間に
    I/O Mapped I/O
        メモリと制御は別
        IN,OUTなど専用命令がある

    IN DEST,SRC
        SRCのポートに接続されているデバイスの状態を読みだす
    OUT DEST,SRC
        DESTに接続されているデバイスにコマンドを送る

    INS?
    OUTS?
        ストリング命令用

**** 他
- 
    LEA DEST,SRC
        SRCの実行アドレスを計算し、DESTに代入
    XCHG DEST1,DEST2
        DEST1とDEST2を交換する
    NOP
        何もしない。あとで書くための場所の確保とか。

**** 割り込み
- 
    トラップ
        INT
    フォルト
        メモリー制限
    アボート
        例外。0除算などで発生。

** Assembler アセンブラ
*** MASM Microsoft Macro Assembler
- 
  インテルのx86 CPU用にマイクロソフトが開発したアセンブラ
  「命令 書き込み先 読み込み先」の順で書かれる。GASと逆。

*** nas Netwide Assembler
- 
  MASMと互換性の高いx86 CPU用アセンブラ

*** TASM Turbo Assembler
- 
  ボーランドが開発していたMASMと互換性の高いx86 CPU用アセンブラ

*** gas GNUアセンブラ
- 
  x86, 680x0, SPARC, VAXなど各種CPU用のアセンブラ
  
*** COMET II
*** CASL
- 
  情報処理技術者試験用に作られたアセンブリ言語。

*** as
- 
  UNIX用のアセンブラ

*** HLASM / IBM High Level Assembler
- 
  IBM系メインフレーム用のアセンブラ。
  MainFrame。
  
- 
  1-8 ラベル
  10- 命令
  16- オペランド
  
  命令が6文字以上の場合オペランドを合わせてずらすが、
  行が継続する場合は16文字目から。

- コメント
  行全体をコメントとする場合、1桁目に*をおく。
  オペランドが終わった後空白を1文字以上置けばコメントとなる。
  
- 開始
  CSECT命令を使う。
  一般に最初のセクション開始がSTRAT、2番目以降のセクション開始がCSECTとされるが、
  特別な理由がない限りSTARTを使う必要はない。

  CSECTは制御セクションのこと。

- 終了
  END命令を使う。
  END命令はプログラムの実行開始位置を指定することもできる。
  
**** アセンブラ命令
***** CSECT, END
- 
  CSECTが制御セクション（プログラム）の開始、ENDが終了を示す。
  1つのソースプログラム内に複数のCSECTを持つこともできるが、
  CSECT単位にプログラムメンバーを分けて作成し、リンケージエディタでまとめるほうがわかりやすい。

***** EQU
- 
  式や数値に名前をつけるために使う。
  レジスター番号の表記によく使われる。

***** USING, DROP
- 
  ベースレジスタの設定・解除を行う。
  ベースレジスタは、プログラム内で分岐先やデータフィールドを名前で指し示す際に、
  基本となるアドレスがどのレジスタに入っているかをアセンブラに知らせるために用いられる。

  通常はプログラムの先頭アドレスが格納されるレジスタ番号を指定する。
  1つのベースレジスタでアドレスできる範囲は4096バイト。4KB以上の大きさを持つ場合、
  4KB毎に異なるレジスタを用いることとなる。
  
  USINGが設定、DROPが解除。

  USING LABELA,8とすると、LABELAがベースアドレスでベースレジスタは8番。
  USING *,12とすると、USING命令を書いたところがベースアドレスでベースレジスタは12。

***** DC, DS, ORG
- 
  定数又は変数の定義を行う。
  一般にDC命令は定数、DS命令は変数を定義するものと理解されるが、CPUは定数と変数を区別しない。
  定数で定義しても命令で書込みすれば内容は変更できる。
  単にデータ領域、データフィールドをプログラム内に定義する命令と考えればよい。
  
  定義したデータ域に初期値を設定するのがDC命令。

- 定数・変数型
  |--------+-------+------------------------------------------+------|
  | タイプ | 長さ  | 説明                                     | 備考 |
  |--------+-------+------------------------------------------+------|
  | C      | 1byte | 文字領域（バイト域）を設定する           |      |
  | X      | 1byte | 16進数を定義する                         |      |
  | F      | 4byte | フルワードの整数を定義する               |      |
  | H      | 2byte | ハーフワードの定数を定義する             |      |
  | Y      | 2byte | ハーフワード定数をラベルで定義する       |      |
  | D      | 8byte | ダブルワードの浮動小数点を定義する       |      |
  | P      | nbyte | パック10進数を定義する                   |      |
  | A      | 4byte | 命令ラベルや定数のアドレスを定義する     |      |
  | V      | 4byte | 外部モジュールの入口点アドレスを定義する |      |
  |--------+-------+------------------------------------------+------|

***** TITLE, PRINT, SPACE, EJECT
- 
  アセンブルリストの制御に使われる命令。

- TITLE
  リストの各ページの先頭につける見出しを設定する。
  "で囲まれた任意の文字列を見出しとして指定できる。

- PRINT
  ON|OFF（PRINT命令以降のリストを印刷する/しない）、
  GEN|NOGEN（マクロ命令内の各CPU命令などを印刷する/しない）、
  DATA|NODATA（8バイトを超える定数データの内容を全部印刷する/しない）がある。

  NO, NOGEN指定のアセンブルリストはデバッグの役に立たないので指定するべきでない。

- SPACE
  アセンブルリスト中に1行以上の空白行を挿入する。
  SPACE 2とすると2行の空白行が入る。
  パラメータを省略すると1行。

- EJECT
  改ページを行う。
  SPACEおよびEJECT命令自体は印刷されない。

***** SAVE, RETURN
- 
  SAVEマクロ命令は、制御が上位モジュールから渡されたとき
  そのときのレジスターを上位モジュールの保管域に保管する。

  RETURNマクロ命令は、制御を上位モジュールに返す。
  そのときに、保管されたレジスタの復元や戻りコードを設定する。

***** BASR, BAS, BALR, BAL
- 
  BASはBranch And Save。
  第2オペランドで指定されたアドレスへ分岐する。
  一般的には外部サブルーチン呼び出しをBASR、内部呼び出しにBAS命令を使う。
  第1オペランドのレジスタに格納される内容は、呼び出されたサブルーチンから見ると呼び出し下への復帰アドレスとなる。
  
  BAL/BALR(Branch And Link)は昔の命令。

**** Link
- [[http://www.arteceed.net/?cat=12]['S/370アセンブラー講座' Category - 「メインフレーム・コンピュータ」で遊ぼう]]
- [[http://homepage1.nifty.com/ttakao/370asm/index.html][OS/390アセンブラハンドブック]]
*** OpenWatcom
- 手動ビルド
  - C:\WATCOM\owsetenv.bat
  - wasm file.asm
  - wcl -ecc -D__MSC__ test.c test.obj
** Link
- [[http://qiita.com/usk83/items/c97066c3c663c5007658][(スクリプト言語しか書けないあなたへ)FreeDOSとdebugコマンドで8086アセンブラ入門 - Qiita]]
