* Java
** Language Specification
- [[file:Java_LangSpec.org][Java_LangSpec.org]]
** Java Platform
*** Edition
**** Java SE
- 
  Java Platform, Standard Edition。
  汎用的な用途に使われる。

***** Package
****** General
******* java.lang
******** java.lang.ref
******** java.lang.reflect
******* java.io
******* java.nio
******* java.math
******* java.net
******* java.text
******* java.util
****** Special
******* java.applet
******* java.beans
**** Java EE
- [[file:Java_EE.org][Java_EE.org]]
**** Java ME
- 
  Java Platform, Micro Edition。
  組み込みシステムなどを用途として想定したエディション。
  機器の種類に応じ、ライブラリのいくつかの異なるセット（プロファイル）を規定している。

*** 配布形態
**** Java Runtime Environment(JRE)
- 
  Javaを実行するために必要なソフトウェア。
  Java仮想マシン(JVM)とAPIから成る。
  仮想マシンとAPIは互いに互換性がなければならず、共にバンドルされている。
  プログラムを実行するだけであれば、JDKは必要なくJREのみでよい。

***** Java Virtual Machine(JVM)
- 
  Javaバイトコードとして定義された命令セットを実行するスタック型の仮想マシン。

***** Application Programming Interface(API)
- 
  関数群。クラスライブラリ。

**** Java Development Kit(JDK)
- 
  ソフトウェア開発キット。
  Javaプログラムの開発を支援する基本的なソフトウェア。
  各プラットフォームの全ての実装。
  Javaコンパイラ、javadoc、デバッガなどを含む多くの開発ツールを含む。
  Private Runtimeと呼ばれる完全なJREも含む。

***** 内容
- appletviewer
- apt
- extcheck
- idlj
- java
- javac
- javadoc
- jar
- javah
- javap
- javaws
- JConsole
- jdb
- jhat
- jinfo
- jmap
- jps
- jrunscript
- jstack
- jstat
- jstand
- keytool
- pack200
- policytool
- VisualVM
- wsimport
- xjc

([[http://ja.wikipedia.org/wiki/Java_Development_Kit][Java DevelopmentKit]])

*** Command
- [[http://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref18][Java Platform, Standard Edition Tools Reference]]
**** Create and Build Applications
***** java
- 
  Starts a java application.
  クラスファイルからクラスを読み込んで実行する。

- -classpath classpath
- -cp classpath
  
- 
  https://docs.oracle.com/javase/jp/6/technotes/tools/windows/java.html

***** javac
- javac [options] [sourcefiles] [classes] [@argfiles]
  Reads Java class and interface definitions and compiles them into bytecode and class files.
  .javaファイルから.classファイルを作成する。

- -cp path / -classpath path
  ユーザーのクラスファイルおよび注釈プロセッサやソースファイルの検索場所を指定する。
  クラスパスは、Java実行環境がクラスおよび他のソースファイルを検索するパス。

- 
  https://docs.oracle.com/javase/jp/6/technotes/tools/windows/javac.html

***** jar
- 
  Combines multiple files into a sinple JAR file.

***** javadoc
- 
  Generates HTML pages of API documentation from Java source file.

**** Monitor the Java Virtual Machine
***** jps
- 
  (Experimental) Lists the instrumented Java Virtual Machines (JVMs) on the target system.

** API
*** Java SE 8
**** java
***** java.io
****** Interface
******* Closable
******* DataInput
******* DataOutput
******* Serializable
******** About
- 
******** Def
- public interface Serializable
******** 
****** Class
******* BufferedInputStream
******* BufferedOutputStream
******* BufferedReader
******* BufferedWriter
******* ByteArrayInputStream
******* ByteArrayOutputStream
******* Console
******* File
******* FileDescripter
******* FileInputStream
******* FileOutputStream
******* FileReader
******* FileWriter
****** Exception
******* IOException
****** Error
******* IOError
***** java.lang
****** Interface
****** Class
****** Enum
****** Exception
****** Error
****** Annotation
***** java.lang.annotation
****** Interface
****** Enum
****** Exception
****** Error
****** Annotation
***** java.lang.invoke
****** Interface
****** Class
****** Exception
***** java.lang.ref
****** Class
***** java.lang.reflect
****** Interface
****** Class
****** Exception
****** Error
***** java.math
***** java.net
***** java.nio
***** java.nio.charset
***** java.nio.charset.spi
***** java.nio.file
***** java.nio.file.spi
***** java.nio.channels
***** java.nio.channels.spi
***** java.security
***** java.security.acl
***** java.security.cert
***** java.security.interfaces
***** java.security.spec
***** java.security.zip
***** java.text
***** java.text.spi
***** java.time
***** java.time.format
***** java.time.chrono
***** java.time.temporal
***** java.time.zone
***** java.util
****** Interfaces
******* Collection<E>
******* List<E>
******* Map<K,V>
- キーを値にマッピングするオブジェクト
******** Methods
********* computeIfAbsent(K key, Function<? super K,? super V,? extends V> remappingFunction)
- 指定されたキーがまだ値に関連付けられていない場合、指定されたマッピング関数を使用してその値の計算を試行し、null出ない場合はそれをこのマップに入力する。
********** Def
- default V computeIfAbsent(K key, Function<? super K,? super V,? extends V> remappingFunction)
********* get(Object key)
- 指定されたキーがマップされている値を返す。そのキーにマッピングが含まれていない場合はnullを返す。
********* put(K key, V value)
- 指定された値と指定されたキーをこのマップで関連付ける。
****** Class
******* AbstractCollection<E>
- Collectionインターフェースのスケルトン実装を提供する。
******* AbstractMap<K,V>
- Mapインターフェースのスケルトン実装を提供する。
******* HashMap<K,V>
- Mapインターフェースのハッシュ表に基づく実装
******** Def
- public class HashMap<K,V>
  extends AbstractMap<K,V>
  implements Map<K,V>, Cloneable, Serializable
******** Constractor
******** Methods
******* Objects
- オブジェクトで操作するためのstaticユーティリティ・メソッドで構成されている
******** Methods
********* requireNonNull(T obj)
- 指定されたオブジェクト参照がnullでないことを確認する。
********* requireNonNull(T obj, String message)
- 指定されたオブジェクト参照がnullでないことを確認し、nullの場合はカスタマイズされたNullPointerExceptionをスローする。
********* requireNonNull(T obj, Supplier<String> messageSupplier)
- 指定されたオブジェクト参照がnullでないことを確認し、nullの場合はカスタマイズされたNullPointerExceptionをスローする。
***** java.util.function
***** java.util.regex
***** java.util.stream
***** java.util.concurrent
***** java.util.concurrent.atomic
***** java.util.concurrent.locks
***** java.util.logging
***** java.util.spi
**** javax
***** javax.annotation
***** javax.imageio
***** javax.imageio.event
***** javax.imageio.metadata
***** javax.imageio.pulgins.bmp
***** javax.imageio.pulgins.jpeg
***** javax.imageio.imagio.spi
***** javax.imageio.imagio.stream
***** javax.crypto
**** org
***** org.w3c.dom
***** org.w3c.dom.bootstrap
***** org.w3c.dom.events
***** org.w3c.dom.ls
***** org.w3c.dom.views
***** org.xml.sax
***** org.xml.sax.ext
***** org.xml.sax.helpers
** Tools
*** Web Application Framework
**** Spring
**** Play
**** JSF
- JavaServer Faces
**** Apache Wicket
**** Apache Struts
*** Web container
- 
  Java EEアーキテクチャのコンポーネント規約を実装するソフトウェア。
  
**** Tomcat
***** 概要
- 
  ServletやJSPを実行するためのWebコンテナ。
  Apache License 2.0を採用。
  現在はApache Software FoundationのApache Tomcat Projectで開発されている。
  以前はJakartaプロジェクト内で開発されていた。
  
  静的コンテンツのHTTPサーバとしても使えるので単体で用いることもできる。
  また、別のHTTPサーバがHTTPリクエストを受け、必要に応じてサーブレットコンテナにリクエストを渡す、という構成でHTTPサーバと連携させて用いることもできる。
  ただし、別HTTPサーバと連携させるとAdvanced IOなど一部機能が使えなくなる。
  Apacheととモジュール連携を行う場合mod_jkを配布している。mod_proxy_ajpモジュールを用いる方法もある。

  EJBはサポートしていないらしい（2010年情報、最新未確認だがおそらく同様）。

***** 機能
****** Servlet
****** JSP
****** JDBC接続プール
***** Folder
****** %CATALINA_HOME%
******* bin
******* conf
******** web.xml
- 
- servlet/init-param
  param-name:listingsのparam-value:trueとすると、フォルダにアクセスした際に配下のファイルが一覧として見えるようになる。
  セキュリティ上、Tomcat 6.0以降この値がTrueとなりデフォルトで表示されなくなった。

******* lib
******* webapps
- 
  ユーザが作成したアプリケーションを格納するためのデフォルトのアプリケーションフォルダ。
  .warファイルを配下に置いておくと、アプリケーションが自動的に展開する。

***** Environmental Variables
- CATALINA_HOME
  Tomcatフォルダを配置した場所を設定する。
 
***** Tools
****** Tomcat Manager
- 
  現在のアプリケーションの状態を確認し、アプリケーションの配置や起動・終了などをブラウザ画面から確認できる。
  インストール時に設定したユーザ名/パスワードが必要。
  http://localhost:8080/manager/html
  
**** JBoss
- 
  Java EEアプリケーションサーバ。
  オープンソース版についてはWildFlyという名称となっている。
  
  ライセンスはLGPLである。
  JBoss Inc.をRed Hatが買収したため、現在はRed Hatが運営を行っている。

***** 概要
- 
  Javaのオープンソース・フレームワーク群。
  EJBを動かすもの、というのが基本。

****** TomcatでなくJbossを選ぶ理由
- [[http://nekop.hatenablog.com/entry/20110421/1303372984][TomcatでなくJBossを選ぶ○○の理由 - nekop's blog]]

***** 機能
****** JavaEE
******* JTAトランザクションマネージャ
******* EJB
******* MDB
******* JPA
******* JMS
******* JCA
******* JAX-WS
****** JBoss固有
******* JMX
******* log4jを用いたログ基盤
******* 分散キャッシュなどの各種クラスタリングサービス
***** Projects
****** Wildfly
****** JBoss Web
****** JBoss ESB
****** JBoss Messaging
****** JBoss Tools
****** Hibernate
**** GlassFish
- 
  サン（オラクル）を中心のコミュニティで開発された、Java EE準拠のアプリケーションサーバの名称。
  以前は商用サポートも行っていたが、v4.0で廃止され、以降は参照実装としての位置づけになっている。

- 
  [[http://www.coppermine.jp/docs/programming/2014/01/the-end-of-glassfish.html][GlassFishの落日 - Programming Studio]]
  [[https://blogs.oracle.com/yosshi/entry/glassfish_%E3%81%A8_tomcat_%E3%81%AE%E9%81%95%E3%81%84_part][GlassFishとTomcatの違い Part3 - 寺田 佳央 (Yoshio Terada)]]
  
***** 機能
****** Servlet
****** JSP
****** EJB
****** JMS(Java Message Service)
****** JNDI(JavaNaming and Directory Interface)
****** JBI(Java Business Integration)
****** ORB(Object Request Brocker)
**** WebSphere Application Server
**** JBoss
*** Application Server
**** Oracle WebLogic Server
*** IDE
**** Eclipse
***** Memo
****** Java6をインストールしろ、と言われた時
- [[http://stackoverflow.com/questions/19563766/eclipse-kepler-for-os-x-mavericks-request-java-se-6/19594116#19594116][Eclipse Kepler for OS X Mavericks request Java SE 6 - stackoverflow]]

**** IntelliJ Idea
**** NetBeans
*** Framework
**** Seasar2
*** Apache ActiveMQ
- Java Message Serviceを実装したメッセージ関連のオープンソースのミドルウェア。
  http://activemq.apache.org/getting-started.html

*** Editor
*** GUI
**** JavaFX
- 
  Java仮想マシンで動作する立地インターネットアプリケーション(RIA)のGUIライブラリ。
  JavaSE7 Update2以降に標準搭載されている。
  Swingと異なり、FXMLと呼ばれるXMLとCSSを併用してデザインを記述する。

***** History
- JavaFX 1
  2008/12/4リリース。JavaFX Scriptというプログラム言語を用いて開発する仕組みだった。
- JavaFX 2
  2011/10/10リリース。
  JavaFX Scriptを廃止し、普通のJava APIに置き換えることで、JRuby, Groovyなどでも利用可能となる。
- JavaFX 8
  - Java8からバージョン番号を揃え、JavaFX 8となった。
  
**** Swing
- 
  JavaのGUIツールキット。AWTを拡張したもの。
  AWTはOSのウィンドウシステムに準じたデザインになるのに対し、SwingはJavaプログラム上で描画されるので、より柔軟な設計が可能となる。
  
- 
  [JFrame]に部品(コンポーネント)を張り付けていく。

**** Abstract Window Toolkit, AWT
- 
  Java独自のプラットフォーム非依存ウィンドウシステム、UI、ウィジェットツールキット。
  現在はJava Foundation Classes(JFC)に含まれ、GUIを提供する標準APIの一部となっている。

*** Build
**** Gradle
- [[file:Gradle.org][Gradle.org]]
**** Apache Maven
- [[file:Maven.org][Maven.org]]
**** Apache Ant
- ビルドツール
*** JDBC(temp)
- 
  Java Database Connectivityの略と言われているが、実際には名称であり略称でないとのこと。
  RDBMSへ接続する機能を標準化・抽象化している。
  JavaSDKに同梱されているが、規格はJavaSDKとは独立して行われている。

  java.sqlインターフェースを介して実装されている。

**** JDBC Driver

***** Type1 : JDBC-ODBCブリッジ・ドライバ
- 
  JDBCからのクエリー要求をODBCを経由して受け渡し、データベースとアクセスするもの。
  ODBCドライバが必須であり、ハードウェアとOSに依存する。
  Java7では非推奨となり、Java8では標準から削除された。

***** Type2 : ネイティブ・ブリッジ・ドライバ
- 
  JDBCからのクエリ要求をOS上のDDLや専門ライブラリに受け渡し、そこからデータベースにアクセスするもの。
  Type1に比べて階層が薄く高速化が期待できTCP/IPに依存しない利点があるが、ハードウェアとOSに依存する。
- 
  Oracleの場合、Oracle Call Interface(OCI)ドライバ。
  
***** Type3 : ネット・プロトコル・ドライバ
- 
  JDBCからのクエリー要求をJavaで記述されたドライブ内で独自のプロトコルに変換し

***** Type4 : ネイティブ・プロトコル・ドライバ
- 
  Oracleの場合、Thinドライバ。
***** サーバー側Thinドライバ
***** サーバー側内部ドライバ
** Settings
*** Environmental Variables
**** CLASSPATH
- 
  クラス検索パスの設定を行う。
  実行時に"-classpath"オプションを指定しない場合、はCLASSPATH環境変数を用いることになる。
** Glossary
*** Java applet
- 
  Webページの一部として埋め込まれてWebブラウザ上で実行されるもの。

*** Java console
- 
  http://www.java.com/en/download/help/javaconsole.xml
  https://www.java.com/en/download/help/disable_java_icon.xml

*** JAR/WAR/EAR
- いずれもJava仕様に準拠して定義されたZIP形式の圧縮ファイル。
**** JAR
- Java ARchive
  クラスファイルや設定ファイル(XML形式のものなど)がまとめられている。
  多くのクラスライブラリがこの形式で配布される。
  MVCモデルでいうところのModelにあたる。

**** WAR
- Web Application Resources, Web Application Archive
  J2EE仕様によってフォルダ構造が決められている。
  MVCにおける"VC"の部分。
  クラスファイル、設定ファイルのほか、JSPやHTMLも含まれる。
  またweb.xmlが含まれ、Tomcatなどのアプリケーションサーバに配布すると、これを元にデプロイされる。

**** EAR
- Enterprise ARchive
  J2EE仕様によってフォルダ構造が決められている。
  複数のWARファイル、(EJB)JARファイルを含む。
  application.xmlが含まれ、J2EEコンテナ（JBoss, WebSphereなど）に配布すると、これを元にデプロイされる。

*** POJO
- Plain Old Java Object、普通のJava。
*** コンテナ
- 
  JSP&サーブレットコンテナ。
  JSP&サーブレットを実行する環境という意味で、アプリケーションサーバとも呼ばれる。
  WebLogicやJRun、Tomcatなどが該当する。

**** Tomcat
- バージョン関係
  |--------+-----+--------------|
  | Tomcat | JSP | サーブレット |
  |--------+-----+--------------|
  |    7.x | 2.2 |          3.0 |
  |    6.x | 2.1 |          2.5 |
  |    5.x | 2.0 |          2.4 |
  |    4.x | 1.2 |          2.3 |
  |    3.x | 1.1 |          2.2 |
  |--------+-----+--------------|

*** 関数型インターフェース
- 大雑把に言って、定義されている抽象メソッドが1つだけあるインターフェース。
  staticメソッドや絵フォルトメソッドは含まれていても構わない。
** Link
- [[http://docs.oracle.com/javase/specs/][Java Language and Virtual Machine Specification - ORACLE]]
- [[http://docs.oracle.com/javase/8/docs/api/][Java™ Platform, Standard Edition 8 API Specification]]
- [[http://docs.oracle.com/javase/jp/8/docs/api/][Java(tm) Platform, Standard Edition 8 API仕様]]
- [[http://docs.oracle.com/javase/tutorial/java/index.html][The Java Tutorials]]
** Memo
*** リソース付きtry
- 
  try(AutoCloseable Class; ...){
  }
  括弧の中身のリソースについて、自動でclose()が呼ばれる。

*** インスタンス初期化子
- 
  {実装}
  何も修飾せず実装を書くと、コンストラクタが呼び出される前にメソッドとして呼び出される。
  匿名クラスなどで使い道がある。

*** 匿名クラス
- 
  new スーパークラス名(コンストラクタ引数) { サブクラス実装 }
  スーパークラスのサブクラスとして、名前のないクラスを作成できる。
  作成時にインスタンス化もして、そのまま使い捨てる。

*** apt-getでインストール
- Installing Java 8 on Ubuntu
  $ sudo add-apt-repository ppa:webupd8team/java
  $ sudo apt-get update
  $ sudo apt-get install oracle-java8-installer
  [[http://tecadmin.net/install-oracle-java-8-jdk-8-ubuntu-via-ppa/][How to Install JAVA 8 (JDK 8u51) on Ubuntu & Linux Mint Via PPA]]

- add-apt-repostioryが使えない場合
  $ sudo apt-get install python-software-properties

- 1.7
  $ sudo apt-get install openjdk-7-jdk

- (古かった。1.6)
  JRE : "sudo apt-get install default-jre"
  JDK : "sudo apt-get install default-jdk"
  [[https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get][How To Install Java on Ubuntu with Apt-Get]]

*** セキュリティ・プロンプトの復元
- 
  セキュリティ・プロンプトの復元により、非表示にしたプロンプトが再表示される。

*** 実行
- 実行時は、packageと同階層のフォルダの下に置いた実行ファイルを、.(dot)で区切った形でパス指定して実行。
- ex)
  package abc.def, file abc/def/main.classの場合、
  その上のフォルダで"java abc.def.main"と実行する。
*** temp
**** 文字列の連結
- 
  +を使う

**** 改行
- 
  \n

**** 演算子とオペランド
- 
  演算を行う+や-などの記号を演算子(operator)、演算の対象となる式はオペランド(operand)という。
  x + yのx, yオペランド。

**** 修飾子
***** アクセス修飾子
- 
  メンバ変数とメソッド、クラスに指定できる修飾子で、
  その変数やメソッドを参照できる範囲を指定する。

  |-----------+----------------------------------------------------|
  | 修飾子    | 説明                                               |
  |-----------+----------------------------------------------------|
  | private   | 同じクラス内からのみアクセス可能                   |
  | 指定無し  | 同一クラス、パッケージのみアクセス可能             |
  | protected | 同一クラス、パッケージ、サブクラスのみアクセス可能 |
  | public    | どこからでもアクセス可能                           |
  |-----------+----------------------------------------------------|

***** abstract修飾子
- 
  メソッド、クラスに指定できる。
  付加すると抽象クラス、抽象メソッドとなる。

***** final修飾子
- 
  変数、メソッド、クラスに指定できる。
  どれに付けたかによって意味合いが変わる。
  
  |----------+------------------------------------------------------------|
  | 対象     | 説明                                                       |
  |----------+------------------------------------------------------------|
  | 変数     | 定数となる。変数宣言時に代入が必要となり、その後変更不可。 |
  |          | メンバー変数、ローカル変数どちらにも指定可能。             |
  | メソッド | オーバーライド不可                                         |
  | クラス   | クラスに付けた場合は、そのクラスは継承不可。               |
  |----------+------------------------------------------------------------|

***** static修飾子
- 
  メンバー変数・メソッドに指定することができる修飾子。
  staticを指定するとインスタンスを生成しなくても使用できるようになる。

  ex) public static String aa = "ABC";
      public static void method() { }

***** native修飾子
- 
  ネイティブ修飾子
  対象はメソッド。
  メソッドがネイティブメソッドであることを示す。

***** synchronized修飾子
- 
  同期修飾子
  対象はメソッド、ブロック。
  メソッドがマルチスレッド環境で実行される場合、排他制御が行われる。
  ひとつのインスタンスが複数のスレッドを持つ場合は排他制御が行われるが、
  複数のインスタンスで実行される場合ははいた制御されない。

***** transient修飾子
- 
  一時的修飾子
  対象は変数。
  変数を一時的な状態とし、シリアライズの対象から除外する。

***** volatile修飾子
- 
  揮発性修飾子
  対象は変数。
  複数のスレッドから参照される可能性のある変数に付けることで、
  参照・変更した値がメモリに書き戻されないことを防ぐ。

***** strictfp修飾子
- 
  厳密浮動小数修飾子
  対象はクラス、インターフェース、メソッド。
  指定したクラスでは、浮動小数点演算が、プラットフォームに依存しない厳密な動作をするようになる。

***** const修飾子
- 
  定数修飾子
  キーワードとして定義されているが、実際に使われるケースはない。
**** アノテーション annotation
- 
  JavaSE 5から追加された。

***** 分類
- マーカーアノテーション
- 単一値アノテーション
  1つのデータを持つアノテーション
- フルアノテーション
  少なくとも2つ以上のデータを持つアノテーション
- メタアノテーション
  
***** 種類
****** 標準
******* @Override
- 
  スーパークラスのメソッドをオーバーライドする、という注釈をつけたいときに使用する。

******* @Deprecated
- 
  クラスやメソッドが非推奨であるという注釈を付けたいときに使用する。

******* @SuppressWaring
- 
  コンパイル時の警告を抑制する。

******* @Target
- 
  アノテーションが利用可能なプログラム要素を定義する

******* @Retention
- 
  アノテーションの保持ルールを決める

****** javadoc
******* @author
******* @param
******* @return
******* @exception
******* @version
******* @see
******* @deprecated
****** jUnit
******* @Test
******* @Before
******* @AFter
******* @BeforeClass
******* @AfterClass
***** 定義
- @interface命令
