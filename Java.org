* Java
** Language Specification
- [[file:Java_LangSpec.org][Java_LangSpec.org]]
** History
*** Java 8
**** ラムダ式（クロージャ）
**** ForEachメソッド、メソッド参照
**** Stream API
**** Optionalクラス
**** インターフェースのデフォルトメソッド
**** 新Time API
**** Link
- [[http://www.oracle.com/technetwork/jp/java/javase/overview/8-compatibility-guide-2156366-ja.html][JDK 8の互換性ガイド - ORACLE]]
- [[http://qiita.com/Usek/items/8f689d9ad59c0c441626][今更人に聞けないJava5からの新機能(Java SE 8) - Qiita]]
*** Java 7
**** NIO2
**** Fork/Join Framework
**** try-with-resources
**** ダイヤモンド記法
- Example
  List<String> l = new ArrayList<>()
**** 例外のマルチキャッチ
- Example
  try {
      ...
  } catch(IOException | ClassNotFoundException e) {
      //IOException or ClassNotFoundException
  }
**** switchの文字列使用
- Example
  switch (test) {
  case "a": case "b":
      System.out.println("a or b");
      break;
  case "test":
      ...
  default:
      ...
  }
**** Link
- [[http://www.oracle.com/technetwork/java/javase/compatibility-417013.html][Java SE 7 and JDK 7 Compatibility - ORACLE]]
- [[http://qiita.com/Usek/items/3b0ae76a08d2f1678884][今更人に聞けないJava5からの新機能(Java SE 7) - Qiita]]
*** Java 6
**** Link
- [[http://www.oracle.com/technetwork/java/javase/compatibility-137541.html][Compatibility - ORACLE]]
*** Java 5.0
**** Genericsの追加
**** ワイルドカード
**** Autoboxingの追加
**** enumの追加
**** 拡張For文の追加
- 配列もしくはIterableインターフェースを実装したクラスのオブジェクトに適用可能。
**** Annotation
**** Concurrency Utilities
**** 可変長引数
**** static import
**** Link
- [[http://qiita.com/Usek/items/3ff30e7a1a87ba64cb58][今更人に聞けないJava5からの新機能(J2SE 5.0) - Qiita]]
*** Java 1.4
*** Java 1.3
*** Java 1.2
*** Java 1.1
*** Java 1.0
*** Link
- [[https://risaiku.net/archives/1764/][昔のソースコードのリファクタリングでJava 15年間の歴史(Java 1.3～Java 8)を一気に把握！ - risaiku リサイク]]
** Java Platform
*** Edition
**** Java SE
- 
  Java Platform, Standard Edition。
  汎用的な用途に使われる。

***** Package
****** General
******* java.lang
******** java.lang.ref
******** java.lang.reflect
******* java.io
******* java.nio
******* java.math
******* java.net
******* java.text
******* java.util
****** Special
******* java.applet
******* java.beans
**** Java EE
- [[file:Java_EE.org][Java_EE.org]]
**** Java ME
- 
  Java Platform, Micro Edition。
  組み込みシステムなどを用途として想定したエディション。
  機器の種類に応じ、ライブラリのいくつかの異なるセット（プロファイル）を規定している。

*** 配布形態
**** Java Runtime Environment(JRE)
- 
  Javaを実行するために必要なソフトウェア。
  Java仮想マシン(JVM)とAPIから成る。
  仮想マシンとAPIは互いに互換性がなければならず、共にバンドルされている。
  プログラムを実行するだけであれば、JDKは必要なくJREのみでよい。

***** Java Virtual Machine(JVM)
- 
  Javaバイトコードとして定義された命令セットを実行するスタック型の仮想マシン。

***** Application Programming Interface(API)
- 
  関数群。クラスライブラリ。

**** Java Development Kit(JDK)
- 
  ソフトウェア開発キット。
  Javaプログラムの開発を支援する基本的なソフトウェア。
  各プラットフォームの全ての実装。
  Javaコンパイラ、javadoc、デバッガなどを含む多くの開発ツールを含む。
  Private Runtimeと呼ばれる完全なJREも含む。

***** 内容
- appletviewer
- apt
- extcheck
- idlj
- java
- javac
- javadoc
- jar
- javah
- javap
- javaws
- JConsole
- jdb
- jhat
- jinfo
- jmap
- jps
- jrunscript
- jstack
- jstat
- jstand
- keytool
- pack200
- policytool
- VisualVM
- wsimport
- xjc

([[http://ja.wikipedia.org/wiki/Java_Development_Kit][Java DevelopmentKit]])

*** Command
- [[http://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref18][Java Platform, Standard Edition Tools Reference]]
**** Create and Build Applications
***** java
- 
  Starts a java application.
  クラスファイルからクラスを読み込んで実行する。

- -classpath classpath
- -cp classpath
  
- 
  https://docs.oracle.com/javase/jp/6/technotes/tools/windows/java.html

***** javac
- javac [options] [sourcefiles] [classes] [@argfiles]
  Reads Java class and interface definitions and compiles them into bytecode and class files.
  .javaファイルから.classファイルを作成する。

- -cp path / -classpath path
  ユーザーのクラスファイルおよび注釈プロセッサやソースファイルの検索場所を指定する。
  クラスパスは、Java実行環境がクラスおよび他のソースファイルを検索するパス。

- 
  https://docs.oracle.com/javase/jp/6/technotes/tools/windows/javac.html

***** jar
- 
  Combines multiple files into a sinple JAR file.

***** javadoc
- 
  Generates HTML pages of API documentation from Java source file.

**** Monitor the Java Virtual Machine
***** jps
- 
  (Experimental) Lists the instrumented Java Virtual Machines (JVMs) on the target system.

** API
*** Java SE 8
**** java
***** java.lang
- Provides classes that are fundamental to the design of the Java programming language.
****** Interface
****** Class
******* Boolean
******* Byte
******* Character
******* Character.Subset
******* Character.UnicodeBlock
******* Class<T>
******* ClassLoader
******* ClassValue<T>
******* Compiler
- Compiler class is provided to support Java-tonative-code compilers and related services.
******* Double
******* Enum<E extends Enum<E>>
******* Float
******* InheritableThreadLocal<T>
******* Integer
******* Long
******* Math
******* Number
******* Object
******* Package
******* Process
******* ProcessBuilder
******* ProcessBuilder.Redirect
******* Runtime
******* RuntimePermission
******* SecurityManager
******* Short
******* StackTraceElement
******** Constructors
******** Methods
******* StrictMath
******* String
******* StringBuffer
******* StringBuilder
******* System
- The System class contains several useful class fields and methods.
******** Field
********* err
- static PrintStream err
  The "standard" error output stream.
********* in
- static InputStream in
  The "standard" input stream.
********* out
- static PrintStream out
  The "standard" output stream.
******** Method
********* console
- static Console console()
********* getProperties()
- static Properties
********** Keys
- 
  |-------------------------------+------------------------------------|
  | Key                           | Description                        |
  |-------------------------------+------------------------------------|
  | java.version                  | Java Runtime Environmental version |
  | java.vendor                   |                                    |
  | java.vendor.url               |                                    |
  | java.home                     |                                    |
  | java.vm.specification.version |                                    |
  | java.vm.specification.vendor  |                                    |
  | java.vm.specification.name    |                                    |
  | java.vm.version               |                                    |
  | java.vm.vendor                |                                    |
  | java.vm.name                  |                                    |
  | java.specification.version    |                                    |
  | java.specification.vendor     |                                    |
  | java.specification.name       |                                    |
  | java.class.version            |                                    |
  | java.class.path               |                                    |
  | java.library.path             |                                    |
  | java.io.tmpdir                |                                    |
  | java.compiler                 |                                    |
  | java.ext.dirs                 |                                    |
  | os.name                       | Operating system name              |
  | os.arch                       |                                    |
  | os.version                    |                                    |
  | file.separator                |                                    |
  | path.separator                |                                    |
  | line.separator                |                                    |
  | user.name                     | User's account name                |
  | user.home                     | User's home directory              |
  | user.dir                      | User's current working directory   |
  |-------------------------------+------------------------------------|
  
********* getProperty(String key)
- static String
- Gets the system property indicated by the specified key.
********* getProperty(String key, String def)
- static String
- Gets the system property indicated by the specified key.
******* Therad
******* ThreadGroup
******* ThreadLocal<T>
******* Throwable
- public class Throwable extends Object implements Serializable
- The Throwable class is the superclass of all errors and exceptions in the Java language.
******** Constructors
******** Methods
********* getStackTrace
- public StackTraceElement[] getStackTrace()
- 
  Provides programmatic access to the stack trace information printed by printStackTrace().
  Returns an array of stack trace elements, each representing one stack frame.
******* Void
****** Enum
****** Exception
******* Exception
- The class Exception and its subclasses are a form of Throwable that indicates conditions that a reasonable application want to catch.
****** Error
******* Error
- An Error is a subclass of Throwable that indicates serious problems that a reasonable application should not try to catch.
****** Annotation
***** java.io
****** Interface
******* Closable
******* DataInput
******* DataOutput
******* Serializable
******** About
- 
******** Def
- public interface Serializable
******** 
****** Class
******* BufferedInputStream
******* BufferedOutputStream
******* BufferedReader
******* BufferedWriter
******* ByteArrayInputStream
******* ByteArrayOutputStream
******* Console
******* File
******* FileDescripter
******* FileInputStream
- public class FileInputStream extends InputStream
- FileInputStreamは、ファイルシステム内のァイルから入力バイトを取得する。
  どのファイルが有効であるかはホスト環境に依存する。
  イメージデータなどのrawバイトのストリームを読み込む時に使用する。
******** Constracotrs
********* FileInputStream(File file)
- ファイルシステム内のfileで指定される実際のファイルへの接続を開くことにより、FileInputStreamを作成する。
********* FileInputStream(FileDescriptor fdObj)
- 実際のファイルへの既存の接続を表すファイル記述子fdObjを使用してFileImputStreamを作成する
********* FileInputStream(String name)
- パス名nameで指定される実際のファイルへの接続を開くことにより、FileInputStreamを作成する。
******** Methods
********* available()
********* close()
********* finalize()
********* read()
- public int read() throws IOException
- Reads a byte of data from this input stream. This method blocks if no input is yet available.
- Returns
  the next byte of data, or -1 if end of the file is reached.
******* FileOutputStream
******** Constractors
********* FileOutputStream(File file)
********* FileOutputStream(File file, boolean append)
********* FileOutputStream(FileDescriptor fdObj)
********* FileOUtputStream(String name)
- Creats a file output stream to write to the file with the specified name.
********* FileOUtputStream(String name, boolean append)
******** Methods
********* 
******* FileReader
******* FileWriter
******* InputStream
- public abstract class InputStream extends Object implements Closeable
- This abstract class is the superclass of all classes representing an input stream of bytes.
******** Constructors
********* InputStream()
******** Methods
********* write(byte[] b)
- Writes b.length bytes from the specified byte array to this output stream.
********* write(byte[] b, int off, int len)
********* write(int b)
******* OutputStream
- public abstract class OutputStream extends Object implements Closeable, Flushable
******** Constructors
********* OutputStream()
******** Methdos
********* read()
- abstract int read()
********* read(byte[] b)
- reads some number of bytes from the input stream and stores them into the buffer array b.
********* read(byte[] b, int off, int len)
******* PrintStream
******** Def
- java.lang.Object > java.io.OutputStream > java.io.FilterOutputStream > java.io.PrintStream
- Implemented Interfaces:
  Closeable, Flushable, Appendable, AutoCloseable
- 
******** Constructors
********* PrintStream(File file)
********* PrintStream(File file, String csn)
********* PrintStream(OutputStream out)
********* PrintStream(OutputStream out, boolean autoFlush)
********* PrintStream(OutputStream out, boolean autoFlush, String encoding)
********* PrintStream(String fileName)
- Creates a new print stream, without automatic line flushing, with the specified line name.
********* PrintStream(String fileName, String csn)
- Creates a new print stream, without automatic line flushing, with the specified line name and charset.
******** Methods
********* println(char x)
********* println(char[] x)
********* println(String x)
- Prints a String and then terminate the line.
****** Exception
******* IOException
****** Error
******* IOError
***** java.lang.annotation
****** Interface
****** Enum
****** Exception
****** Error
****** Annotation
***** java.lang.invoke
****** Interface
****** Class
****** Exception
***** java.lang.ref
****** Class
***** java.lang.reflect
****** Interface
****** Class
****** Exception
****** Error
***** java.math
***** java.net
****** About
- ネットワークアプリケーションを実装するためのクラスを提供する。
  大きく分けて低レベルAPIと高レベルAPIの2つの部分に分けられる。
- 低レベルAPI:次の抽象概念を扱う
  - アドレス:IPアドレスのような、ネットワーク上の識別子
  - ソケット:基本的な双方向データ通信メカニズム
  - インターフェース:ネットワーク・インターフェースを記述する
- 高レベルAPI:次の抽象概念を扱う
  - URI:Universal Resource Identifier
  - URL:Universal Resource Locator
  - 接続:URLによって参照されるリソースへの接続を表す
****** Interfaces
****** Class
******* ClientHandler
******* DatagramSocket
- データグラム・パケットを送受信するためのソケット
******* ServerSocket
- サーバー・ソケットを実装する。
  ネットワーク経由で要求が送られてくるのを待ち、要求に基づいていくつかの操作を実行する。
  実際の処理はSocketImplクラスのインスタンスによって実行される。
  アプリケーションは、ソケット実装を作成するソケット・ファクトリを変更することでローカル・ファイアウォールに適したソケットを作成するようにアプリケーション自体を構成することができる。
- 
  - extends Object
  - implements Closeable
  
******** Constractors
********* ServerSocket()
- アンバウンドのサーバーソケットを作成する
********* ServerSocket(int port)
- 指定されたポートにバインドされたサーバー・ソケットを作成する
********* ServerSocket(int port, int backlog)
- サーバー・ソケットを作成し、指定された
********* ServerSocket(int port, int backlog, InetAddress bindAddr)
******** Methods
********* accept()
- public Socket accept() throws IOException
  Listens for a connection to be made to this socket and accepts it.
- Returns:
  the new Socket
- Throws:
  - IOException
  - SecurityExceptoin
  - SocketTimeoutException
  - IllegalBlockingModeException

******* Socket
******** Def
- public class Socket extends Object implements Closeable
- java.langObject
- Implemented Interfaces:
  Closeable, AutoCloseable
- クライアント・ソケットを実装する。
******** Constructors
******** Methods
********* getInputStream()
- InputStream getInputStream()
  Returns an input stream for this socket.
********* getOutputStream()
- OutputStream getOutputStream()
  Returns an output stream for this socket.
******* SocketAddress
- プロトコルに関連付けられていないソケット・アドレスを表す
******* SocketImpl
- 実際にソケットを実装するすべてのクラスに共通のスーパークラス。
******** Fields
******** Constrator
********* SocektImpl()
******** Methods
******* URI
******* URL
****** Enum
****** Exception
***** java.nio
***** java.nio.charset
***** java.nio.charset.spi
***** java.nio.file
***** java.nio.file.spi
***** java.nio.channels
***** java.nio.channels.spi
***** java.security
***** java.security.acl
***** java.security.cert
***** java.security.interfaces
***** java.security.spec
***** java.security.zip
***** java.text
***** java.text.spi
***** java.time
***** java.time.format
***** java.time.chrono
***** java.time.temporal
***** java.time.zone
***** java.util
****** Interfaces
******* Collection<E>
******* List<E>
******* Map<K,V>
- キーを値にマッピングするオブジェクト
******** Methods
********* computeIfAbsent(K key, Function<? super K,? super V,? extends V> remappingFunction)
- 指定されたキーがまだ値に関連付けられていない場合、指定されたマッピング関数を使用してその値の計算を試行し、null出ない場合はそれをこのマップに入力する。
********** Def
- default V computeIfAbsent(K key, Function<? super K,? super V,? extends V> remappingFunction)
********* get(Object key)
- 指定されたキーがマップされている値を返す。そのキーにマッピングが含まれていない場合はnullを返す。
********* put(K key, V value)
- 指定された値と指定されたキーをこのマップで関連付ける。
****** Class
******* AbstractCollection<E>
- Collectionインターフェースのスケルトン実装を提供する。
******* AbstractMap<K,V>
- Mapインターフェースのスケルトン実装を提供する。
******* HashMap<K,V>
- Mapインターフェースのハッシュ表に基づく実装
******** Def
- public class HashMap<K,V>
  extends AbstractMap<K,V>
  implements Map<K,V>, Cloneable, Serializable
******** Constractor
******** Methods
******* Objects
- オブジェクトで操作するためのstaticユーティリティ・メソッドで構成されている
******** Methods
********* requireNonNull(T obj)
- 指定されたオブジェクト参照がnullでないことを確認する。
********* requireNonNull(T obj, String message)
- 指定されたオブジェクト参照がnullでないことを確認し、nullの場合はカスタマイズされたNullPointerExceptionをスローする。
********* requireNonNull(T obj, Supplier<String> messageSupplier)
- 指定されたオブジェクト参照がnullでないことを確認し、nullの場合はカスタマイズされたNullPointerExceptionをスローする。
***** java.util.function
***** java.util.regex
***** java.util.stream
***** java.util.concurrent
***** java.util.concurrent.atomic
***** java.util.concurrent.locks
***** java.util.logging
***** java.util.spi
**** javax
***** javax.annotation
***** javax.imageio
***** javax.imageio.event
***** javax.imageio.metadata
***** javax.imageio.pulgins.bmp
***** javax.imageio.pulgins.jpeg
***** javax.imageio.imagio.spi
***** javax.imageio.imagio.stream
***** javax.crypto
**** org
***** org.w3c.dom
***** org.w3c.dom.bootstrap
***** org.w3c.dom.events
***** org.w3c.dom.ls
***** org.w3c.dom.views
***** org.xml.sax
***** org.xml.sax.ext
***** org.xml.sax.helpers
** Tools
*** Web Application Framework
**** Spring
**** Play
**** JSF
- JavaServer Faces
**** Apache Wicket
**** Apache Struts
*** Web container
- 
  Java EEアーキテクチャのコンポーネント規約を実装するソフトウェア。

**** Oracle WebLogic Server
***** Installation
- UNIX
  java -jar fmw_12.2.1.~_wls_generic.jar
- Window
  java -jar fmw_12.2.1.~_wls_generic.jar
- [[http://docs.oracle.com/middleware/12211/lcm/WLSIG/toc.htm][Fusion Middleware Installing and Configuring Oracle WebLogic Server and Coherence - ORACLE]]
***** Domain Structure
- ドメインディレクトリ（ディレクトリ名=ドメイン名）
****** autodeploy
- 自動デプロイメントディレクトリ（開発モード用）
****** bin
- 起動・停止スクリプトetc
******* stratWebLogic.sh(cmd)
- 管理サーバ起動スクリプト
******* startManageWebLogic.sh(cmd)
- 管理対象サーバ起動スクリプト
****** common
****** config
- コンフィグレーションディレクトリ
******* config.xml
****** console-ext
****** init-info
- ドメインの初期化情報
****** lib
****** nodmanager
- ノートマネージャ・ホームディレクトリ
****** resources
****** security
- セキュリティファイル
****** servers
- サーバローカルディレクトリ
***** Server Status
****** SHUTDOWN
- 構成されているが、非アクティブになっている。
****** STARTING
- 起動コマンドの結果としてSHUTDOWN状態からSTANDBY状態に遷移する。
  クライアント・リクエストも管理リクエストも受け付けることができない。
****** STANDBY
- 通常のリスニング・ポートがクローズされているためリクエストを処理しない。
  管理ポートはオープンされており、RUNNNING状態またはSHUTDOWN状態に遷移させるライフサイクル・コマンドを受け付ける。
  ホット・バックアップとして待機させておくことができる。
****** ADMIN
- 起動して実行状態にあるが、受け付けるのは管理操作のみとなり、ユーザーはサーバーおよびアプリケーション・レベルの管理タスクを実行できる。
  - 管理コンソールが使用できる
  - サーバー・インスタンスはadminロールのユーザーからのリクエストを受け付ける
  - アプリケーションはADMIN状態でアクティブ化される。
  - JDBC, JMS, JTAの各サブシステムの管理操作が実行可能。
  - デプロイメント・再デプロイメントは許可される。
  - ClusterServiceはアクティブで、他のクラスタ・メンバーからのハートビートおよび通知をリスニングする。
****** RESUMING
- STANDBY状態またはADMIN状態からRUNNING状態への移動に必要な処理を実行している。遷移状態。
****** RUNNING
- 完全に機能しており、クライアントにサービスを提供し、クラスタの正規メンバーとして機能できる。
****** SUSPENDING
- ADMIN状態への移動に必要な処理を実行する。
  サブシステムおよびサービスを順に中断し、進行中のアプリケーション作業の事前に定義済みの部分を完了する。
****** FORCE_SUSPENDING
- ADMIN状態への移動に必要な処理を実行する。
  処理中の作業を正常に中断しない。
****** SHUTTING_DOWN
- サブシステムおよびサービスの中断を完了し、アプリケーション・リクエストも管理リクエストも受け付けない。
****** FAILED
- メモリー不足例外やアプリケーション・スレッドのスタック状態の結果として、あるいはいくつかの重要なサービスが機能しなくなった場合に、サーバー・インスタンスで障害が発生することがある。
****** FAILED_NOT_RESTARTABLE
***** Management Console 管理コンソール
- 管理サーバだけにデプロイされる管理用Webアプリケーション
- Access
  http://hostname:port/console
  https://hostname:port/console
  デフォルトポートは7001
***** Glossary
****** WLST
- WebLogic Scripting Tool
***** Link
****** 12.2.1.1.0
- [[http://docs.oracle.com/middleware/12211/wls/index.html][Oracle WebLogic Server 12.2.1.1.0]]

- [[http://docs.oracle.com/middleware/12211/cross/referencedocs.htm][Reference and APIs 12.2.1.1.0]]
- [[http://docs.oracle.com/middleware/12211/wls/WLAPI/toc.htm][Java API Reference for Oracle WebLogic Server]]
- [[http://docs.oracle.com/middleware/12211/wls/WLTAG/toc.htm][JSP Tags Reference for ORacle Weblogic Server]]
- [[https://docs.oracle.com/middleware/1221/wls/ADMRF/index.html][Command Reference for Oracle WebLogic Server]]

****** 12.2.1
- [[http://docs.oracle.com/cd/E72987_01/wls/index.html][Oracle WebLogic Server 12.2.1 - ORACLE Help Center]]
- [[http://docs.oracle.com/cd/E72987_01/wls/INTRO/toc.htm][Oracle® Fusion Middleware Oracle WebLogic Serverの理解 12c(12.2.1)]]
- [[http://docs.oracle.com/cd/E72987_01/wls/START/toc.htm][Oracle® Fusion Middleware Oracle WebLogic Serverサーバーの起動と停止の管理 12c (12.2.1)]]
- [[http://docs.oracle.com/cd/E72987_01/wls/ADMRF/toc.htm][Oracle® Fusion Middleware Oracle WebLogic Serverコマンド・リファレンス 12c (12.2.1)]]

****** Tmp
******* Slide
- [[http://www.slideshare.net/OracleMiddleJP/20140527-wlstudy-startjee1handsout][Java EE & WebLogic Server入門: はじめてのJava EEアプリケーション開発シリーズ： 第1回 - SlideShare]]
- [[http://www.slideshare.net/OracleMiddleJP/20141218-wlstudy-wlsbasichandsout][Oracle WebLogic Server 12.1.3入門 - SlideShare]]
- [[http://www.slideshare.net/OracleMiddleJP/20130821-wlstudy-jeeapphandsout][Java EE アプリケーションをWebLogic Serverで動かしてみよう - SlideShare]]

******* Deploy
- [[http://alctail.sakura.ne.jp/tip/linux_kannrenn/weblogic/][Weblogic10.3を使ってみる - この世果てのしっぽの方]]
- [[https://blogs.oracle.com/wlc/entry/weblogic_c122][【後編】インストールからアプリケーションの配備まで - WebLogic Channel]]
- [[http://www.oracle.com/technetwork/jp/ondemand/application-grid/wls11g-handson-1034-354365-ja.pdf][意外と簡単!? WebLogic Serverのインストールと運用 - ORACLE]]

**** JBoss, Wildfly
- 
  Java EEアプリケーションサーバ。
  オープンソース版についてはWildFlyという名称となっている。
  
  ライセンスはLGPLである。
  JBoss Inc.をRed Hatが買収したため、現在はRed Hatが運営を行っている。

***** 概要
- 
  Javaのオープンソース・フレームワーク群。
  EJBを動かすもの、というのが基本。
  もとはEJBoss(Enterprise JavaBeans Open Source Software)という名前あったが、商標の関係によりJBossとなった。

****** TomcatでなくJbossを選ぶ理由
- [[http://nekop.hatenablog.com/entry/20110421/1303372984][TomcatでなくJBossを選ぶ○○の理由 - nekop's blog]]

***** 機能
****** JavaEE
******* JTAトランザクションマネージャ
******* EJB
******* MDB
******* JPA
******* JMS
******* JCA
******* JAX-WS
****** JBoss固有
******* JMX
******* log4jを用いたログ基盤
******* 分散キャッシュなどの各種クラスタリングサービス
***** Projects
****** Wildfly
****** JBoss Web
****** JBoss ESB
****** JBoss Messaging
****** JBoss Tools
****** Hibernate
**** GlassFish
- 
  サン（オラクル）を中心のコミュニティで開発された、Java EE準拠のアプリケーションサーバの名称。
  以前は商用サポートも行っていたが、v4.0で廃止され、以降は参照実装としての位置づけになっている。

- 
  [[http://www.coppermine.jp/docs/programming/2014/01/the-end-of-glassfish.html][GlassFishの落日 - Programming Studio]]
  [[https://blogs.oracle.com/yosshi/entry/glassfish_%E3%81%A8_tomcat_%E3%81%AE%E9%81%95%E3%81%84_part][GlassFishとTomcatの違い Part3 - 寺田 佳央 (Yoshio Terada)]]
  
***** 機能
****** Servlet
****** JSP
****** EJB
****** JMS(Java Message Service)
****** JNDI(JavaNaming and Directory Interface)
****** JBI(Java Business Integration)
****** ORB(Object Request Brocker)
**** Tomcat
***** 概要
- 
  ServletやJSPを実行するためのWebコンテナ。
  Apache License 2.0を採用。
  現在はApache Software FoundationのApache Tomcat Projectで開発されている。
  以前はJakartaプロジェクト内で開発されていた。
  
  静的コンテンツのHTTPサーバとしても使えるので単体で用いることもできる。
  また、別のHTTPサーバがHTTPリクエストを受け、必要に応じてサーブレットコンテナにリクエストを渡す、という構成でHTTPサーバと連携させて用いることもできる。
  ただし、別HTTPサーバと連携させるとAdvanced IOなど一部機能が使えなくなる。
  Apacheととモジュール連携を行う場合mod_jkを配布している。mod_proxy_ajpモジュールを用いる方法もある。

  EJBはサポートしていないらしい（2010年情報、最新未確認だがおそらく同様）。

***** 機能
****** Servlet
****** JSP
****** JDBC接続プール
***** Folder
****** %CATALINA_HOME%
******* bin
******* conf
******** web.xml
- 
- servlet/init-param
  param-name:listingsのparam-value:trueとすると、フォルダにアクセスした際に配下のファイルが一覧として見えるようになる。
  セキュリティ上、Tomcat 6.0以降この値がTrueとなりデフォルトで表示されなくなった。

******* lib
******* webapps
- 
  ユーザが作成したアプリケーションを格納するためのデフォルトのアプリケーションフォルダ。
  .warファイルを配下に置いておくと、アプリケーションが自動的に展開する。

***** Environmental Variables
- CATALINA_HOME
  Tomcatフォルダを配置した場所を設定する。
 
***** Tools
****** Tomcat Manager
- 
  現在のアプリケーションの状態を確認し、アプリケーションの配置や起動・終了などをブラウザ画面から確認できる。
  インストール時に設定したユーザ名/パスワードが必要。
  http://localhost:8080/manager/html
**** WebSphere Application Server

*** IDE
**** Eclipse
***** Memo
****** Java6をインストールしろ、と言われた時
- [[http://stackoverflow.com/questions/19563766/eclipse-kepler-for-os-x-mavericks-request-java-se-6/19594116#19594116][Eclipse Kepler for OS X Mavericks request Java SE 6 - stackoverflow]]

**** IntelliJ Idea
**** NetBeans
*** Framework
**** Seasar2
*** Apache ActiveMQ
- Java Message Serviceを実装したメッセージ関連のオープンソースのミドルウェア。
  http://activemq.apache.org/getting-started.html

*** Editor
*** GUI
**** JavaFX
- 
  Java仮想マシンで動作する立地インターネットアプリケーション(RIA)のGUIライブラリ。
  JavaSE7 Update2以降に標準搭載されている。
  Swingと異なり、FXMLと呼ばれるXMLとCSSを併用してデザインを記述する。

***** History
- JavaFX 1
  2008/12/4リリース。JavaFX Scriptというプログラム言語を用いて開発する仕組みだった。
- JavaFX 2
  2011/10/10リリース。
  JavaFX Scriptを廃止し、普通のJava APIに置き換えることで、JRuby, Groovyなどでも利用可能となる。
- JavaFX 8
  - Java8からバージョン番号を揃え、JavaFX 8となった。
  
**** Swing
- 
  JavaのGUIツールキット。AWTを拡張したもの。
  AWTはOSのウィンドウシステムに準じたデザインになるのに対し、SwingはJavaプログラム上で描画されるので、より柔軟な設計が可能となる。
  
- 
  [JFrame]に部品(コンポーネント)を張り付けていく。

**** Abstract Window Toolkit, AWT
- 
  Java独自のプラットフォーム非依存ウィンドウシステム、UI、ウィジェットツールキット。
  現在はJava Foundation Classes(JFC)に含まれ、GUIを提供する標準APIの一部となっている。

*** Build
**** Gradle
- [[file:Gradle.org][Gradle.org]]
**** Apache Maven
- [[file:Maven.org][Maven.org]]
**** Apache Ant
- ビルドツール
*** JDBC(temp)
- 
  Java Database Connectivityの略と言われているが、実際には名称であり略称でないとのこと。
  RDBMSへ接続する機能を標準化・抽象化している。
  JavaSDKに同梱されているが、規格はJavaSDKとは独立して行われている。

  java.sqlインターフェースを介して実装されている。

**** JDBC Driver

***** Type1 : JDBC-ODBCブリッジ・ドライバ
- 
  JDBCからのクエリー要求をODBCを経由して受け渡し、データベースとアクセスするもの。
  ODBCドライバが必須であり、ハードウェアとOSに依存する。
  Java7では非推奨となり、Java8では標準から削除された。

***** Type2 : ネイティブ・ブリッジ・ドライバ
- 
  JDBCからのクエリ要求をOS上のDDLや専門ライブラリに受け渡し、そこからデータベースにアクセスするもの。
  Type1に比べて階層が薄く高速化が期待できTCP/IPに依存しない利点があるが、ハードウェアとOSに依存する。
- 
  Oracleの場合、Oracle Call Interface(OCI)ドライバ。
  
***** Type3 : ネット・プロトコル・ドライバ
- 
  JDBCからのクエリー要求をJavaで記述されたドライブ内で独自のプロトコルに変換し

***** Type4 : ネイティブ・プロトコル・ドライバ
- 
  Oracleの場合、Thinドライバ。
***** サーバー側Thinドライバ
***** サーバー側内部ドライバ
** Settings
*** Environmental Variables
**** CLASSPATH
- 
  クラス検索パスの設定を行う。
  実行時に"-classpath"オプションを指定しない場合、はCLASSPATH環境変数を用いることになる。
** Glossary
*** Java applet
- 
  Webページの一部として埋め込まれてWebブラウザ上で実行されるもの。

*** Java console
- 
  http://www.java.com/en/download/help/javaconsole.xml
  https://www.java.com/en/download/help/disable_java_icon.xml

*** JAR/WAR/EAR
- いずれもJava仕様に準拠して定義されたZIP形式の圧縮ファイル。
**** JAR
- Java ARchive
  クラスファイルや設定ファイル(XML形式のものなど)がまとめられている。
  多くのクラスライブラリがこの形式で配布される。
  MVCモデルでいうところのModelにあたる。

**** WAR
- Web Application Resources, Web Application Archive
  J2EE仕様によってフォルダ構造が決められている。
  MVCにおける"VC"の部分。
  クラスファイル、設定ファイルのほか、JSPやHTMLも含まれる。
  またweb.xmlが含まれ、Tomcatなどのアプリケーションサーバに配布すると、これを元にデプロイされる。

**** EAR
- Enterprise ARchive
  J2EE仕様によってフォルダ構造が決められている。
  複数のWARファイル、(EJB)JARファイルを含む。
  application.xmlが含まれ、J2EEコンテナ（JBoss, WebSphereなど）に配布すると、これを元にデプロイされる。

*** POJO
- Plain Old Java Object、普通のJava。
*** コンテナ
- 
  JSP&サーブレットコンテナ。
  JSP&サーブレットを実行する環境という意味で、アプリケーションサーバとも呼ばれる。
  WebLogicやJRun、Tomcatなどが該当する。

**** Tomcat
- バージョン関係
  |--------+-----+--------------|
  | Tomcat | JSP | サーブレット |
  |--------+-----+--------------|
  |    7.x | 2.2 |          3.0 |
  |    6.x | 2.1 |          2.5 |
  |    5.x | 2.0 |          2.4 |
  |    4.x | 1.2 |          2.3 |
  |    3.x | 1.1 |          2.2 |
  |--------+-----+--------------|

*** 関数型インターフェース
- 大雑把に言って、定義されている抽象メソッドが1つだけあるインターフェース。
  staticメソッドや絵フォルトメソッドは含まれていても構わない。
*** OUI, Oracle Universal Installer
*** JavaBeans
- コンポーネントを進めるため、いくつかのルールに従って作られているJavaのクラス。
  現実的には、「JSPで使用する、プロパティを持つクラス」が一般的な受け入れられ方。
- 特徴
  - クラス名末尾がBean : 慣例。
  - プロパティ : 
  - 永続化 : java.io.Serializableインターフェースを実装
  - 引数なしのコンストラクタ
- [[http://www.wakhok.ac.jp/~tomoharu/web2004/text/index_c4.html][JavaBeansとJSP - JavaによるWebアプリケーション入門]]
** Link
- [[http://docs.oracle.com/javase/specs/][Java Language and Virtual Machine Specification - ORACLE]]
- [[http://docs.oracle.com/javase/8/docs/api/][Java™ Platform, Standard Edition 8 API Specification]]
- [[http://docs.oracle.com/javase/jp/8/docs/api/][Java(tm) Platform, Standard Edition 8 API仕様]]
- [[http://docs.oracle.com/javase/tutorial/java/index.html][The Java Tutorials]]

- [[http://www.jpcert.or.jp/java-rules/][Java セキュアコーディングスタンダード CERT/Oracle 版 - JPCERT]]
** Memo
*** リソース付きtry
- 
  try(AutoCloseable Class; ...){
  }
  括弧の中身のリソースについて、自動でclose()が呼ばれる。

*** インスタンス初期化子
- 
  {実装}
  何も修飾せず実装を書くと、コンストラクタが呼び出される前にメソッドとして呼び出される。
  匿名クラスなどで使い道がある。

*** 匿名クラス
- 
  new スーパークラス名(コンストラクタ引数) { サブクラス実装 }
  スーパークラスのサブクラスとして、名前のないクラスを作成できる。
  作成時にインスタンス化もして、そのまま使い捨てる。

*** apt-getでインストール
- Installing Java 8 on Ubuntu
  $ sudo add-apt-repository ppa:webupd8team/java
  $ sudo apt-get update
  $ sudo apt-get install oracle-java8-installer
  [[http://tecadmin.net/install-oracle-java-8-jdk-8-ubuntu-via-ppa/][How to Install JAVA 8 (JDK 8u51) on Ubuntu & Linux Mint Via PPA]]

- add-apt-repostioryが使えない場合
  $ sudo apt-get install python-software-properties

- 1.7
  $ sudo apt-get install openjdk-7-jdk

- (古かった。1.6)
  JRE : "sudo apt-get install default-jre"
  JDK : "sudo apt-get install default-jdk"
  [[https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get][How To Install Java on Ubuntu with Apt-Get]]

*** セキュリティ・プロンプトの復元
- 
  セキュリティ・プロンプトの復元により、非表示にしたプロンプトが再表示される。

*** 実行
- 実行時は、packageと同階層のフォルダの下に置いた実行ファイルを、.(dot)で区切った形でパス指定して実行。
- ex)
  package abc.def, file abc/def/main.classの場合、
  その上のフォルダで"java abc.def.main"と実行する。
*** 例外
- チェック例外・非チェック例外
  - チェック例外(Exception) : 例外が発生した場合にcatch節で補足し処理するか、throws句を記述しないとコンパイルエラーが発生するため、例外発生時の対処をプログラムで矯正される例外。
  - 非チェック例外(RuntimeException) : 通常、例外が発生した灰にcatch節やthrow区で対応しない/してはならない例外。
- 発生状況別
  - 論理例外 : アプリケーションで論理的に発生しうる例外。補足して処理する。
  - システム例外 : システムが正常に動作する条件が整っていない場合や、連携する外部アプリケーションのエラーに起因する例外。アプリケーションで処理しない/処理しても意味がない。
  - プログラムエラー : コーデイングの間違い、連携するAPIの使用方法の間違いなど。本来的に発生しない者なので、対処しても意味がないエラー。
*** temp
**** 文字列の連結
- 
  +を使う

**** 改行
- 
  \n

**** 演算子とオペランド
- 
  演算を行う+や-などの記号を演算子(operator)、演算の対象となる式はオペランド(operand)という。
  x + yのx, yオペランド。

**** 修飾子
***** アクセス修飾子
- 
  メンバ変数とメソッド、クラスに指定できる修飾子で、
  その変数やメソッドを参照できる範囲を指定する。

  |-----------+----------------------------------------------------|
  | 修飾子    | 説明                                               |
  |-----------+----------------------------------------------------|
  | private   | 同じクラス内からのみアクセス可能                   |
  | 指定無し  | 同一クラス、パッケージのみアクセス可能             |
  | protected | 同一クラス、パッケージ、サブクラスのみアクセス可能 |
  | public    | どこからでもアクセス可能                           |
  |-----------+----------------------------------------------------|

***** abstract修飾子
- 
  メソッド、クラスに指定できる。
  付加すると抽象クラス、抽象メソッドとなる。

***** final修飾子
- 
  変数、メソッド、クラスに指定できる。
  どれに付けたかによって意味合いが変わる。
  
  |----------+------------------------------------------------------------|
  | 対象     | 説明                                                       |
  |----------+------------------------------------------------------------|
  | 変数     | 定数となる。変数宣言時に代入が必要となり、その後変更不可。 |
  |          | メンバー変数、ローカル変数どちらにも指定可能。             |
  | メソッド | オーバーライド不可                                         |
  | クラス   | クラスに付けた場合は、そのクラスは継承不可。               |
  |----------+------------------------------------------------------------|

***** static修飾子
- 
  メンバー変数・メソッドに指定することができる修飾子。
  staticを指定するとインスタンスを生成しなくても使用できるようになる。

  ex) public static String aa = "ABC";
      public static void method() { }

***** native修飾子
- 
  ネイティブ修飾子
  対象はメソッド。
  メソッドがネイティブメソッドであることを示す。

***** synchronized修飾子
- 
  同期修飾子
  対象はメソッド、ブロック。
  メソッドがマルチスレッド環境で実行される場合、排他制御が行われる。
  ひとつのインスタンスが複数のスレッドを持つ場合は排他制御が行われるが、
  複数のインスタンスで実行される場合ははいた制御されない。

***** transient修飾子
- 
  一時的修飾子
  対象は変数。
  変数を一時的な状態とし、シリアライズの対象から除外する。

***** volatile修飾子
- 
  揮発性修飾子
  対象は変数。
  複数のスレッドから参照される可能性のある変数に付けることで、
  参照・変更した値がメモリに書き戻されないことを防ぐ。

***** strictfp修飾子
- 
  厳密浮動小数修飾子
  対象はクラス、インターフェース、メソッド。
  指定したクラスでは、浮動小数点演算が、プラットフォームに依存しない厳密な動作をするようになる。

***** const修飾子
- 
  定数修飾子
  キーワードとして定義されているが、実際に使われるケースはない。
**** アノテーション annotation
- 
  JavaSE 5から追加された。

***** 分類
- マーカーアノテーション
- 単一値アノテーション
  1つのデータを持つアノテーション
- フルアノテーション
  少なくとも2つ以上のデータを持つアノテーション
- メタアノテーション
  
***** 種類
****** 標準
******* @Override
- 
  スーパークラスのメソッドをオーバーライドする、という注釈をつけたいときに使用する。

******* @Deprecated
- 
  クラスやメソッドが非推奨であるという注釈を付けたいときに使用する。

******* @SuppressWaring
- 
  コンパイル時の警告を抑制する。

******* @Target
- 
  アノテーションが利用可能なプログラム要素を定義する

******* @Retention
- 
  アノテーションの保持ルールを決める

****** javadoc
******* @author
******* @param
******* @return
******* @exception
******* @version
******* @see
******* @deprecated
****** jUnit
******* @Test
******* @Before
******* @AFter
******* @BeforeClass
******* @AfterClass
***** 定義
- @interface命令
