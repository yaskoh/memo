* Java
** Language
*** 字句構造
**** コメント
- 
  3種類のコメントがある。

- /* comment */
  伝統的コメント(traditional comment)。
  複数行にわたるコメントの記述に効果的。

- // line-comment
  行末コメント(end of line comment)
  行末までがコメントとなる。

- /** documentation */
  自動生成文書を作成する。
  複数行にわたることができる。

**** 識別子
- 
  識別子(identifier)は、変数、ラベル、メソッド、クラスなどに与えられる名前のこと。

**** キーワード
- 
  abstract boolean break byte case catch char class const continue
  default do double else extends final finally float for goto
  if implements import instanceof int interface long native new package
  private protected public return short static super switch synchronized this
  throw throws transient try void volatile while

**** リテラル
***** 整数リテラル
- 
  整数型の定数を表す。
  
- 種類
  - 10進数リテラル (int / long)
  - 8進数リテラル (int / long)
    先頭に0をつけて2桁以上で表記する。
    ex) 013 (10進数で11)
  - 16進数リテラル (int / long)
    先頭に0xまたは0Xを付けて表記する。
    ex) 0xA (10進数で10), 0x13(10進数で19)

***** 浮動小数点リテラル
- 
  浮動小数点接尾語(float type suffix)を使って表す。
  double型の指定はd, D, 若しくは指定しない場合、
  float型の指定はf, F。
  ex) 80.0  // double
      80.0D // double
      80.0F // float
  
  整数部や小数部を省略可能。
  ex) .5   // 0.5
      10.  // 10.0
      .5f  // 0.5
      1D   // 1.0

***** 論理値リテラル
***** 文字リテラル
- 
  単一の文字を表す。
  シングルクォート(')で囲む。

***** 文字列リテラル
- 
  文字の並びを表す。
  ダブルクォート(")で囲む。

****** 拡張表記
- 拡張表記(escape sequentce)
  |----------------+-------------------------+--------------------------------------------+-------------|
  | 拡張表記       | 意味                    | 内容                                       | Unicode拡張 |
  |----------------+-------------------------+--------------------------------------------+-------------|
  | \b             | 後退(backspace)         | 表示位置を直前の位置へ移動する。           | \u0008      |
  | \f             | 書式送り(form feed)     | 改ページして、次のページの先頭へ移動する。 | \u000c      |
  | \n             | 改行(new line)          | 改行して、次の行の先頭へ移動する。         | \u000a      |
  | \r             | 復帰(carriage return)   | 現在の行の先頭位置へ移動する。             | \u000d      |
  | \t             | 水平タブ(horiontal tab) | 次の水平タブ位置へ移動する。               | \u0009      |
  | \"             | 文字"                   | 二重引用符                                 | \u0022      |
  | \'             | 文字'                   | 単一引用符                                 | \u0027      |
  | \\             | 文字\                   | バックスラッシュ                           | \u005c      |
  | \ooo(oは8進数) |                         | 8進数でoooの値を持つ文字。                 |             |
  |----------------+-------------------------+--------------------------------------------+-------------|

- Unicode拡張
  \uhhhh(hは16進数)で、16進数でhhhhの値を持つ文字を表す。

***** 空リテラル
- 
  null

**** 分離子
- 
  以下の9個のASCII文字をJava分離子(separators)とする。
  ( ) { } [ ] ; ,

**** 演算子
- 
  以下の37個のトークンをJava演算子(operators)とする。
  = > < ! ~ ? : == <= >= != && || ++ --
  + - * / & | ^ % << >> >>>
  += -= *= /= &= |= ^= %= <<= >>= >>>=

*** 型、値
**** Primitive Type
- 
  プリミティブ型、値型、基本型

***** Numeric Type
- 
  数値型

****** Integral Type
- 
  整数型

- byte
  -128 ~ 127
  1バイトデータ
- short
  -32768 ~ 32767
- int
  -2147483648 ~ 2147483647
- long
  -9223372036854775808 ~ 9223372036854775807
- char
  '\u0000' ~ '\uffff' (0 ~ 65535)

******* 整数演算
******** 比較演算子
- 数値比較
  < <= > >=

- 数値等価演算子
  == !=

******** 数値演算子
- 単項符号演算子
  + -

- 乗除演算子
  * / %

- 加法演算子
  + -

- 増分演算子
  ++（接頭語及び接尾語）

- 減分演算子
  --（接頭語及び接尾語）

- 符号付き、符号無しシフト演算子
  << >> >>>

- ビット単位補数演算子
  ~

- 整数ビット単位演算子
  & | ^

******** 条件演算子
- 条件演算子
  ?:

******** キャスト演算子

******** 文字列連結演算子
- 文字列連結演算子
  +

****** Floating Point Type
- 
  浮動小数点型

- float
  s * m * 2e
  s : +1 or -1
  m : m < 2^24
  e : -149 <= e <= 104

- double
  s * m * 2e
  s : +1 or -1
  m : m < 2^52
  e : -1075 <= e <= 970

- 正及び負のゼロ、正及び負の無限大、並びにNot-a-Number(NaN)を含む。

******* 順序
- 
  負の無限大 < 負の有限非ゼロ < 負のゼロ < 正のゼロ < 正の有限非ゼロ < 正の無限大
  正のゼロと負のゼロの比較結果は等しい。(-0.0=0.0)
  NaNは順序付けしない。

******* 浮動小数点演算
******** 比較演算子
- 数値比較
  < <= > >=

- 数値等価演算子
  == !=

******** 数値演算子
- 単項符号演算子
  + -

- 乗除演算子
  * / %

- 加法演算子
  + -

- 増分演算子
  ++（接頭語及び接尾語）

- 減分演算子
  --（接頭語及び接尾語）

******** 条件演算子
- 条件演算子
  ?:

******** キャスト演算子

******** 文字列連結演算子
- 文字列連結演算子
  +

***** Boolean
- 
  論理型

- true
- false

****** 演算
- 関係演算子
  == !=
- 論理補数演算子
  !
- 論理演算子
  & ^ |
- 条件付きAND及びOR演算子
  && ||
- 条件演算子
  ?:
- 文字列連結演算子
  +

**** Reference Type
- 
  参照型。
  クラス型、インターフェース型、配列型が存在する。
  参照値はオブジェクトのポインタ、もしくはいかなるオブジェクトも参照しない特別な空参照となる。

***** Class Or Interface Type

****** Class Type

******* クラス
- 
  メソッドと処理対象となるデータを組み合わせた構造。

- 宣言
  new Class()

- 等価演算子
  ==でインスタンス同士を比較した場合、インスタンスの参照先が同じか否かで比較を行う。
  例えば内部フィールド値が全て等しくても、違うメモリ空間を指していた場合はfalseが返る。

******* メンバ

******** フィールド
- 
  メソッドの外で宣言された変数。

- アクセス
  メンバアクセス演算子(meber access operator)を使う。ドット演算子(.)。

******** メソッド
- void
  値を返さないメソッドは戻り値の型をvoidとする。

- return
  return文で値を呼び出し元に返却する。

- 仮引数
  formal parameter
  メソッドの頭に記載する変数名。呼び出し時に初期化される。
  finalをつけると仮引数を変更できなくなる。

- 実引数
  actual argument
  メソッド呼び出し時に受け渡すことを指定する値。
  左から順に評価される。

- this参照
  自分を起動したインスタンスへの参照をthisとして持っている。

********* overload
- 
  多重定義。同じシグネチャのメソッドは多重定義できない。
  シグネチャは、メソッド名と、仮引数の個数と型の組合せのこと。戻り値型は含まれない。

******** コンストラクタ
- 
  構成子
  クラス名と同名の戻り値を持たないメソッドと同様の形式で記述する。
  ちなみにクラス名と同名のメソッドも定義できるが、推奨されない。

  厳密にはコンストラクタはメンバに含めないらしい。
  

******* その他

******** Object Class
- 
  Objectはすべての他のクラスのスーパークラスとなる。
  すべてのクラス及び配列型はObjectを継承する。

****** Interface Type

***** Array Type
- 
  配列型

- 宣言
  以下のどちらでも可（ただし、一般に1の方が好まれる）。
  1. int[] a;
  2. int a[];
  
- 生成
  newによって生成する。
  ex) a = new int[5];

- 規定値
  |---------+-------------------|
  | 型      | 規定値            |
  |---------+-------------------|
  | byte    | ゼロ / (byte)0    |
  | short   | ゼロ / (short)0   |
  | int     | ゼロ / 0          |
  | long    | ゼロ / 0L         |
  | float   | ゼロ / 0.0f       |
  | double  | ゼロ / 0.0d       |
  | char    | 空文字 / '\u0000' |
  | boolean | 偽 / false        |
  | 参照型  | 空参照 / null     |
  |---------+-------------------|

- 初期化
  { }の中にカンマ区切りで値を書くと、その値で初期化される。
  ex) int[] a = {1, 2, 3, 4, 5}
  
  以下のように初期化子を代入することはできない。
  a = {1, 2, 3, 4, 5}
  以下なら可能。
  a = new int[]{1, 2, 3, 4, 5}

****** メソッド
(どこにどのように書くべきか迷っているところ)
- length
  
*** 変数、変換
**** 種類
- クラス変数 class variable
  staticをつけて宣言されたフィールド。
- インスタンス変数 instance variable
- 配列構成要素 Array components
- メソッド仮引数 Method parameters
- コンストラクタ仮引数 Constructor parameters
- 例外ハンドラ仮引数 exception-handler parameter
- 局所変数 Local variables

**** 変換

***** 種別
****** 恒等変換

****** プリミティブ型の拡大変換

****** プリミティブ型の縮小変換

****** 参照型の拡大変換

****** 参照型の縮小変換

****** 文字列の変換

***** 文脈

****** 代入変換
****** メソッド呼び出し変換
****** キャスト変換
- 
  

****** 文字列変換
****** 数値昇格
******* 単項数値昇格
******* 二項数値昇格
- 
  binary numerical promotion
  特定の演算子のオペランドに対して、より大きい型に変換された上で実行される。
  以下のような規則に従う。
  - 一方のオペランドがdoubleであればdoubleに、
    そうでなくfloatであればfloatに、
    そうでなくlongであればlongに、
    そうでなければintに変換する。

*** 名前
- 
  宣言した実態を参照するために使用する。
  有効範囲を持つ。

**** 宣言 declaration
- 
  実態を導入し、参照するために名前として使用できる識別子を取り入れる。

- 宣言される実態
  - package宣言で宣言したパッケージ
  - 型インポート宣言で宣言した型
  - クラス型宣言で宣言したクラス
  - 参照型のメンバ
    - フィールド
      - クラス型で宣言したフィールド
      - インタフェース型で宣言したメソッド(abstract)
  - 仮引数
    - クラスのメソッド又はコンストラクタの仮引数
    - インターフェースのabstractなメソッドの仮引数
    - try文のcatch節で宣言した例外ハンドラの仮引数
  - 局所変数
    - ブロックにおける局所変数宣言
    - for文における局所変数宣言

**** 決定
- 
  名前の決定には三段階が必要。
  1. 名前を5つの分類のどれかに分類する。
     PackageName, TypeName, ExpressionName, MethodName, AmbiguousName 
  2. AmbiguousNameに分類された名前は、有効範囲の規則によってPackage, Type Expressionのどれかに分類する。
  3. 名前の意味を最終的に決定する。意味をもたなければコンパイルエラーとする。

**** 名前付け規則
***** パッケージ名
- 
  広く利用可能にするには、最初の構成要素をすべて大文字で書く。
  Sun.COMのようなドメインを逆順にし(COM.Sun)、以降は組織内の規約(部、課、プロジェクト等)を利用する。
  ex) COM.Sun.sunsoft.DOE
      EDU.cmu.cs.bovik.cheese
  局所使用だけを意図したパッケージ名は、小文字で始まる識別子をもつことが望ましい。
  識別子javaで始まるパッケージ名は標準javaパッケージを名前付けするために予約されている。

***** クラス及びインターフェース型名
- 
  各単語の先頭文字を大文字とし、大文字小文字を混在させた、記述的なー名詞または名詞句が望ましい。
  ex) ClassLoader
      SecurityManager
  インターフェースは、名詞又は名詞句でもよい。抽象スーパークラスでは特に適している。
  また、java.lang.Runnableやjava.lang.Cloneableのように、振る舞いを記述する形容詞としてもよい。

***** メソッド名
- 
  先頭文字を小文字とし、それに続く各単語の先頭文字を大文字とする、大文字と小文字を混在させた動詞またh動詞句が望ましい。

***** フィールド名
- 
  finalでないフィールドの名前は、先頭文字は小文字で始まり、それに続く単語の先頭文字を大文字とした、
  大文字小文字を混在させたものとすることが望ましい。
  名詞、名詞句または名詞の省略形の名前を持つことが望ましい。

***** 定数名
- 
  全て大文字で、下線"_"で区切られた構成要素を持つ、一つ以上の単語、頭文字又は略語の並びとすることが望ましい。
  クラス型のfinal変数も、慣例として、同じ並びとしてよい。

***** 局所変数および仮引数名
- 
  短いが意味のあるものとするのが望ましい。普通、単語ではない短い小文字の列とする。
  ex) in, out, off, len, bufなど

*** パッケージ
*** 例外
*** ブロック及び文
**** ブロック
- 
  文の並びを{ }で囲んだ物をブロック(block)という。
  構文上単一の文と見なされる。

**** 文
- 
  文(statement)は、基本的にセミコロン(;)で終える。

***** if
****** if-then
****** if-then-else
***** switch
- ex)
  switch (a) {
    case 1  : c = 10; break;
    case 2  : c = 20; break;
    case 3  : c = 50; break;
    default : if ( b == 4 ) c = 80; break;
  }

***** while
- 
  while ( codition ) {
    ...
  }

***** do
- 
  do {
    ...
  } while ( condition )

***** for
- 
  for (初期化部; 制御部; 更新部) {
    ...
  }

- 拡張for文
  for-each文やfor-in文とも呼ばれる。

  for (<型> <変数名> : <配列やList型>) {
    ...
  }


***** break
- 
  breakにラベルを付けると、任意のループから抜けられる。
  ラベル付きbreakは、ループの中でなくても使える。

***** continue
- 
  continueにラベルを付けて、

***** return
***** throw
***** synchronized
***** try
****** try-catch
****** try-catch-finally

*** 式
- 
  式(expression)とは以下の総称。
  - 変数
  - リテラル
  - 変数やリテラルを演算子で結合したもの

**** クラスインスタンス生成式
**** 配列生成式
**** フィールドアクセス式
**** メソッド呼出し式
**** 配列アクセス式
**** 後置式
***** ++ 後置インクリメント演算子
***** -- 後置デクリメント演算子
**** 単項演算子
***** ++ 前置インクリメント演算子
***** -- 後置デクリメント演算子
***** + 単項演算子
***** - 単項マイナス演算子
***** ~ ビット毎の補数演算子
***** ! 論理的な補数演算子
**** キャスト式
- 
  キャスト演算子で指定した型に変換する。
  括弧内に指定した名前の型に変換する。

- 形式
  (型)式

- 縮小変換
  より小さい型への代入時(double -> intなど)はキャストが必要。
  ex) a = (int)10.0;

  代入時に右辺の式や初期化子の定数式が変数の型(byte, short, charのみ)で表現できる場合は、
  縮小変換が自動で行われる。
  定数式に限られるため、変数の代入はエラーとなる。
  ex) short a = 53;  // OK
      byte b = a;    // NG

  浮動小数点については自動で変換が行われないため、floatにdouble型の値は代入不可能。
  ex) float a = 3.14;        // NG。3.14はdouble
      float b = 3.14f;       // OK
      float c = (float)3.14; // OK

- 拡大変換
  拡大変換時はキャスト不要。
  ex) int a = '5';       // OK
      long b = a;        // OK
      double c = 3.14f;  // OK

**** 乗除演算子
***** * 乗算演算子
***** / 除算演算子
***** % 剰余演算子
**** 加減演算子
***** + 文字列連結演算子
***** +, - 数値加減演算子
**** シフト演算子
- << 左シフト
  x << n : xをnビット左にシフトして、空いたビットに0を詰めた値を生成する。

- >> 右シフト（算術シフト)
  x >> n : xをnビット右にシフトして、空いたビットをシフト前の符号ビットで埋め尽くした値を生成する。

- >>> 右シフト（論理シフト）
  x >>> n : xをnビット右にシフトして、空いたビットに0を詰めた値を生成する。

**** 関係演算子
***** <, <=, >, >= 数値比較演算子
***** instanceof 型比較演算子
**** 等価演算子
***** ==, != 数値等価演算子
***** ==, != 論理型等価演算子
***** ==, != 参照型等価演算子
**** ビット単位の論理演算子
***** &, ^, | 整数値ビット単位演算子
***** &, ^, | 論理型論理演算子
**** 条件AND演算子 &&
- 
  &と異なり、短絡評価(short circuit evaluation)が行われる。
  
**** 条件OR演算子 ||
- 
  短絡評価が行われる。|では両辺が必ず評価される。

**** 条件演算子 ?:
**** 代入演算子
***** = 単純代入演算子
- 
  代入式を評価すると、左オペランドの型と値が得られる。
  代入演算子は右結合。
  ex) a = b = 1 => a = (b = 1)
  
  初期化時は、上記の構文はエラーとなる。
  ex) int a = b = 0;   // コンパイルエラー

***** 複合代入演算子
- 
  演算と代入という二つの働きをもつため、複合代入演算子と呼ばれる。

- 一覧
  *= /= %= += -= <<= >>= >>>= &= ^= |=

*** API
**** java.io
**** java.lang
***** java.lang.System
****** System.out
- 
  System.outはコンソール画面と結びつくストリームで、
  標準出力ストリーム(standard output stream)と呼ばれる。

******* println
- 
  改行付きの表示。lnはline。

******* printf
- 
  ex) System.out.printf("x = %3d\n", x);

  %は書式指定の先頭文字なので、文字%を出力したい場合は%%と表記する。

- 変換文字
  |----------+------------------|
  | 変換文字 | 解説             |
  |----------+------------------|
  | %d       | 10進数で出力     |
  | %o       | 8進数で出力      |
  | %x       | 16進数で出力     |
  | %f       | 小数点形式で出力 |
  | %s       | 文字列で出力     |
  |----------+------------------|
  
******* print
- 
  表示後に改行はされない。


****** system.in
- 
  System.inは標準入力ストリーム(standard input stream)

**** java.math
**** java.net
**** java.util
***** java.util.Scanner
- 
  nextInt()やnextDouble()等のメソッドで入力値を取り出す。
  文字列の読込みにはnext()を使う。空白やタブ文字が区切りと見なされる。
  一行読込む場合はnextLine()。

***** java.util.Random
- 
  乱数の生成

- インスタンスの生成
  1. Random rand = new Random();
  2. Random rand = new Random(5);

- メソッド
  |---------------+---------+--------------------------|
  | メソッド      | 型      | 生成される値の範囲       |
  |---------------+---------+--------------------------|
  | nextBoolean() | boolean | true / false             |
  | nexnInt()     | int     | -2147483648 ~ 2147483647 |
  | nextInt(n)    | int     | 0 ~ n-1                  |
  | nextLong()    | long    |                          |
  | nextDouble()  | double  | 0.0以上1.0未満           |
  | nextFloat()   | float   | 0.0以上1.0未満           |
  |---------------+---------+--------------------------|



***** java.util.GregorianCalendar
- 
  日付・時刻を扱うためのクラス。

**** Link
- [[http://xfs.jp/3sx0wC][Java Platform, Standard Edition 8: API Specification]]

** Java Platform
*** エディション
**** Java SE
- 
  Java Platform, Standard Edition。
  汎用的な用途に使われる。

**** Java EE
- 
  Java Platform, Enterprise Edition。
  Java SEに加え、多層クライアントサーバの大規模システムを開発するための、
  さまざまなAPIが追加されている。

**** Java ME
- 
  Java Platform, Micro Edition。
  組み込みシステムなどを用途として想定したエディション。
  機器の種類に応じ、ライブラリのいくつかの異なるセット（プロファイル）を規定している。

*** 配布形態

**** Java Runtime Environment(JRE)
- 
  Javaを実行するために必要なソフトウェア。
  Java仮想マシン(JVM)とAPIから成る。
  仮想マシンとAPIは互いに互換性がなければならず、共にバンドルされている。
  プログラムを実行するだけであれば、JDKは必要なくJREのみでよい。

***** Java Virtual Machine(JVM)
- 
  Javaバイトコードとして定義された命令セットを実行するスタック型の仮想マシン。

***** Application Programming Interface(API)
- 
  関数群。クラスライブラリ。

**** Java Development Kit(JDK)
- 
  ソフトウェア開発キット。
  Javaプログラムの開発を支援する基本的なソフトウェア。
  各プラットフォームの全ての実装。
  Javaコンパイラ、javadoc、デバッガなどを含む多くの開発ツールを含む。
  Private Runtimeと呼ばれる完全なJREも含む。

***** 内容
- appletviewer
- apt
- extcheck
- idlj
- java
- javac
- javadoc
- jar
- javah
- javap
- javaws
- JConsole
- jdb
- jhat
- jinfo
- jmap
- jps
- jrunscript
- jstack
- jstat
- jstand
- keytool
- pack200
- policytool
- VisualVM
- wsimport
- xjc

([[http://ja.wikipedia.org/wiki/Java_Development_Kit][Java DevelopmentKit]])

*** Command
- [[http://docs.oracle.com/javase/8/docs/technotes/tools/unix/intro.html#sthref18][Java Platform, Standard Edition Tools Reference]]
**** Create and Build Applications
***** java
- 
  Starts a java application.
  クラスファイルからクラスを読み込んで実行する。

***** javac
- 
  Reads Java class and interface definitions and compiles them into bytecode and class files.
  .javaファイルから.classファイルを作成する。

***** jar
- 
  Combines multiple files into a sinple JAR file.

***** javadoc
- 
  Generates HTML pages of API documentation from Java source file.

**** Monitor the Java Virtual Machine
***** jps
- 
  (Experimental) Lists the instrumented Java Virtual Machines (JVMs) on the target system.

** Tools
*** Web Application Framework
**** Spring
**** Play
**** JSF
- JavaServer Faces
**** Apache Wicket
**** Apache Struts
*** JBoss
**** 概要
- 
  Javaのオープンソース・フレームワーク群。
  EJBを動かすもの、というのが基本。

***** TomcatでなくJbossを選ぶ理由
- [[http://nekop.hatenablog.com/entry/20110421/1303372984][TomcatでなくJBossを選ぶ○○の理由 - nekop's blog]]

**** 機能
***** JavaEE
****** JTAトランザクションマネージャ
****** EJB
****** MDB
****** JPA
****** JMS
****** JCA
****** JAX-WS
***** JBoss固有
****** JMX
****** log4jを用いたログ基盤
****** 分散キャッシュなどの各種クラスタリングサービス
**** Projects
***** Wildfly
***** JBoss Web
***** JBoss ESB
***** JBoss Messaging
***** JBoss Tools
***** Hibernate
*** Tomcat
**** 機能
***** Servlet
***** JSP
***** JDBC接続プール
*** EJB
*** Seasar2
*** Apache ActiveMQ
- Java Message Serviceを実装したメッセージ関連のオープンソースのミドルウェア。
  http://activemq.apache.org/getting-started.html

** Memo
*** リソース付きtry
- 
  try(AutoCloseable Class; ...){
  }
  括弧の中身のリソースについて、自動でclose()が呼ばれる。

*** インスタンス初期化子
- 
  {実装}
  何も修飾せず実装を書くと、コンストラクタが呼び出される前にメソッドとして呼び出される。
  匿名クラスなどで使い道がある。

*** 匿名クラス
- 
  new スーパークラス名(コンストラクタ引数) { サブクラス実装 }
  スーパークラスのサブクラスとして、名前のないクラスを作成できる。
  作成時にインスタンス化もして、そのまま使い捨てる。

*** apt-getでインストール
- Installing Java 8 on Ubuntu
  $ sudo add-apt-repository ppa:webupd8team/java
  $ sudo apt-get update
  $ sudo apt-get install oracle-java8-installer
  [[http://tecadmin.net/install-oracle-java-8-jdk-8-ubuntu-via-ppa/][How to Install JAVA 8 (JDK 8u51) on Ubuntu & Linux Mint Via PPA]]

- add-apt-repostioryが使えない場合
  $ sudo apt-get install python-software-properties

- 1.7
  $ sudo apt-get install openjdk-7-jdk

- (古かった。1.6)
  JRE : "sudo apt-get install default-jre"
  JDK : "sudo apt-get install default-jdk"
  [[https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get][How To Install Java on Ubuntu with Apt-Get]]

*** セキュリティ・プロンプトの復元
- 
  セキュリティ・プロンプトの復元により、非表示にしたプロンプトが再表示される。

*** Glossary
**** Java applet
- 
  Webページの一部として埋め込まれてWebブラウザ上で実行されるもの。

**** Java console
- 
  http://www.java.com/en/download/help/javaconsole.xml
  https://www.java.com/en/download/help/disable_java_icon.xml

*** JAR/WAR/EAR
- いずれもJava仕様に準拠して定義されたZIP形式の圧縮ファイル。
**** JAR
- Java ARchive
  クラスファイルや設定ファイル(XML形式のものなど)がまとめられている。
  多くのクラスライブラリがこの形式で配布される。
  MVCモデルでいうところのModelにあたる。

**** WAR
- Web Application Resources, Web Application Archive
  J2EE仕様によってフォルダ構造が決められている。
  MVCにおける"VC"の部分。
  クラスファイル、設定ファイルのほか、JSPやHTMLも含まれる。
  またweb.xmlが含まれ、Tomcatなどのアプリケーションサーバに配布すると、これを元にデプロイされる。

**** EAR
- Enterprise ARchive
  J2EE仕様によってフォルダ構造が決められている。
  複数のWARファイル、(EJB)JARファイルを含む。
  application.xmlが含まれ、J2EEコンテナ（JBoss, WebSphereなど）に配布すると、これを元にデプロイされる。

*** temp
**** 文字列の連結
- 
  +を使う

**** 改行
- 
  \n

**** 演算子とオペランド
- 
  演算を行う+や-などの記号を演算子(operator)、演算の対象となる式はオペランド(operand)という。
  x + yのx, yオペランド。

**** 修飾子
***** アクセス修飾子
- 
  メンバ変数とメソッド、クラスに指定できる修飾子で、
  その変数やメソッドを参照できる範囲を指定する。

  |-----------+----------------------------------------------------|
  | 修飾子    | 説明                                               |
  |-----------+----------------------------------------------------|
  | private   | 同じクラス内からのみアクセス可能                   |
  | 指定無し  | 同一クラス、パッケージのみアクセス可能             |
  | protected | 同一クラス、パッケージ、サブクラスのみアクセス可能 |
  | public    | どこからでもアクセス可能                           |
  |-----------+----------------------------------------------------|

***** abstract修飾子
- 
  メソッド、クラスに指定できる。
  付加すると抽象クラス、抽象メソッドとなる。

***** final修飾子
- 
  変数、メソッド、クラスに指定できる。
  どれに付けたかによって意味合いが変わる。
  
  |----------+------------------------------------------------------------|
  | 対象     | 説明                                                       |
  |----------+------------------------------------------------------------|
  | 変数     | 定数となる。変数宣言時に代入が必要となり、その後変更不可。 |
  |          | メンバー変数、ローカル変数どちらにも指定可能。             |
  | メソッド | オーバーライド不可                                         |
  | クラス   | クラスに付けた場合は、そのクラスは継承不可。               |
  |----------+------------------------------------------------------------|

***** static修飾子
- 
  メンバー変数・メソッドに指定することができる修飾子。
  staticを指定するとインスタンスを生成しなくても使用できるようになる。

  ex) public static String aa = "ABC";
      public static void method() { }

***** native修飾子
- 
  ネイティブ修飾子
  対象はメソッド。
  メソッドがネイティブメソッドであることを示す。

***** synchronized修飾子
- 
  同期修飾子
  対象はメソッド、ブロック。
  メソッドがマルチスレッド環境で実行される場合、排他制御が行われる。
  ひとつのインスタンスが複数のスレッドを持つ場合は排他制御が行われるが、
  複数のインスタンスで実行される場合ははいた制御されない。

***** transient修飾子
- 
  一時的修飾子
  対象は変数。
  変数を一時的な状態とし、シリアライズの対象から除外する。

***** volatile修飾子
- 
  揮発性修飾子
  対象は変数。
  複数のスレッドから参照される可能性のある変数に付けることで、
  参照・変更した値がメモリに書き戻されないことを防ぐ。

***** strictfp修飾子
- 
  厳密浮動小数修飾子
  対象はクラス、インターフェース、メソッド。
  指定したクラスでは、浮動小数点演算が、プラットフォームに依存しない厳密な動作をするようになる。

***** const修飾子
- 
  定数修飾子
  キーワードとして定義されているが、実際に使われるケースはない。
