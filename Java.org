* Java

** Language
*** 字句構造
**** コメント
- 
  3種類のコメントがある。

- /* comment */
  伝統的コメント(traditional comment)。
  複数行にわたるコメントの記述に効果的。

- // line-comment
  行末コメント(end of line comment)
  行末までがコメントとなる。

- /** documentation */
  自動生成文書を作成する。
  複数行にわたることができる。

**** 識別子
**** キーワード
- 
  abstract boolean break byte case catch char class const continue
  default do double else extends final finally float for goto
  if implements import instanceof int interface long native new package
  private protected public return short static super switch synchronized this
  throw throws transient try void volatile while

**** リテラル
***** 整数リテラル
***** 浮動小数点リテラル
***** 論理値リテラル
***** 文字リテラル
***** 文字列リテラル
***** 空リテラル
- 

**** 分離子
- 
  以下の9個のASCII文字をJava分離子(separators)とする。
  ( ) { } [ ] ; ,

**** 演算子
- 
  以下の37個のトークンをJava演算子(operators)とする。
  = > < ! ~ ? : == <= >= != && || ++ --
  + - * / & | ^ % << >> >>>
  += -= *= /= &= |= ^= %= <<= >>= >>>=

*** 型、値
**** Primitive Type
- 
  プリミティブ型、値型
***** Numeric Type
****** Integral Type
- byte
  -128 ~ 127
- short
  -32768 ~ 32767
- int
  -2147483648 ~ 2147483647
- long
  -9223372036854775808 ~ 9223372036854775807
- char
  '\u0000' ~ '\uffff' (0 ~ 65535)

******* 整数演算
******** 比較演算子
- 数値比較
  < <= > >=

- 数値等価演算子
  == !=

******** 数値演算子
- 単項符号演算子
  + -

- 乗除演算子
  * / %

- 加法演算子
  + -

- 増分演算子
  ++（接頭語及び接尾語）

- 減分演算子
  --（接頭語及び接尾語）

- 符号付き、符号無しシフト演算子
  << >> >>>

- ビット単位補数演算子
  ~

- 整数ビット単位演算子
  & | ^

******** 条件演算子
- 条件演算子
  ?:

******** キャスト演算子

******** 文字列連結演算子
- 文字列連結演算子
  +

****** Floating Point Type
- float
  s * m * 2e
  s : +1 or -1
  m : m < 2^24
  e : -149 <= e <= 104
- double
  s * m * 2e
  s : +1 or -1
  m : m < 2^52
  e : -1075 <= e <= 970
- 正及び負のゼロ、正及び負の無限大、並びにNot-a-Number(NaN)を含む。

******* 順序
- 
  負の無限大 < 負の有限非ゼロ < 負のゼロ < 正のゼロ < 正の有限非ゼロ < 正の無限大
  正のゼロと負のゼロの比較結果は等しい。(-0.0=0.0)
  NaNは順序付けしない。

******* 浮動小数点演算
******** 比較演算子
- 数値比較
  < <= > >=

- 数値等価演算子
  == !=

******** 数値演算子
- 単項符号演算子
  + -

- 乗除演算子
  * / %

- 加法演算子
  + -

- 増分演算子
  ++（接頭語及び接尾語）

- 減分演算子
  --（接頭語及び接尾語）

******** 条件演算子
- 条件演算子
  ?:

******** キャスト演算子

******** 文字列連結演算子
- 文字列連結演算子
  +



***** boolean
- true
- false

****** 演算
- 関係演算子
  == !=
- 論理補数演算子
  !
- 論理演算子
  & ^ |
- 条件付きAND及びOR演算子
  && ||
- 条件演算子
  ?:
- 文字列連結演算子
  +

**** Reference Type
- 
  参照型。
  クラス型、インターフェース型、配列型が存在する。
  参照値はオブジェクトのポインタ、もしくはいかなるオブジェクトも参照しない特別な空参照となる。

***** Class Or Interface Type

****** Class Type
******* Object Class
- 
  Objectはすべての他のクラスのスーパークラスとなる。
  すべてのクラス及び配列型はObjectを継承する。

****** Interface Type

***** Array Type

*** 変数

**** 種類
- クラス変数 class variable
- インスタンス変数 instance variable
- 配列構成要素 Array components
- メソッド仮引数 Method parameters
- コンストラクタ仮引数 Constructor parameters
- 例外ハンドラ仮引数 exception-handler parameter
- 局所変数 Local variables

**** 変換

***** 種類
****** 恒等変換

****** プリミティブ型の拡大変換

****** プリミティブ型の縮小変換

****** 参照型の拡大変換

****** 参照型の縮小変換

****** 文字列の変換

***** 文脈

****** 代入変換
****** メソッド呼び出し変換
****** キャスト変換
****** 文字列変換
****** 数値昇格


*** 名前
- 
  宣言した実態を参照するために使用する。
  有効範囲を持つ。

**** 宣言 declaration
- 
  実態を導入し、参照するために名前として使用できる識別子を取り入れる。

- 宣言される実態
  - package宣言で宣言したパッケージ
  - 型インポート宣言で宣言した型
  - クラス型宣言で宣言したクラス
  - 参照型のメンバ
    - フィールド
      - クラス型で宣言したフィールド
      - インタフェース型で宣言したメソッド(abstract)
  - 仮引数
    - クラスのメソッド又はコンストラクタの仮引数
    - インターフェースのabstractなメソッドの仮引数
    - try文のcatch節で宣言した例外ハンドラの仮引数
  - 局所変数
    - ブロックにおける局所変数宣言
    - for文における局所変数宣言

**** 決定
- 
  名前の決定には三段階が必要。
  1. 名前を5つの分類のどれかに分類する。
     PackageName, TypeName, ExpressionName, MethodName, AmbiguousName 
  2. AmbiguousNameに分類された名前は、有効範囲の規則によってPackage, Type Expressionのどれかに分類する。
  3. 名前の意味を最終的に決定する。意味をもたなければコンパイルエラーとする。

**** 名前付け規則
***** パッケージ名
- 
  広く利用可能にするには、最初の構成要素をすべて大文字で書く。
  Sun.COMのようなドメインを逆順にし(COM.Sun)、以降は組織内の規約(部、課、プロジェクト等)を利用する。
  ex) COM.Sun.sunsoft.DOE
      EDU.cmu.cs.bovik.cheese
  局所使用だけを意図したパッケージ名は、小文字で始まる識別子をもつことが望ましい。
  識別子javaで始まるパッケージ名は標準javaパッケージを名前付けするために予約されている。

***** クラス及びインターフェース型名
- 
  各単語の先頭文字を大文字とし、大文字小文字を混在させた、記述的なー名詞または名詞句が望ましい。
  ex) ClassLoader
      SecurityManager
  インターフェースは、名詞又は名詞句でもよい。抽象スーパークラスでは特に適している。
  また、java.lang.Runnableやjava.lang.Cloneableのように、振る舞いを記述する形容詞としてもよい。

***** メソッド名
- 
  先頭文字を小文字とし、それに続く各単語の先頭文字を大文字とする、大文字と小文字を混在させた動詞またh動詞句が望ましい。

***** フィールド名
- 
  finalでないフィールドの名前は、先頭文字は小文字で始まり、それに続く単語の先頭文字を大文字とした、
  大文字小文字を混在させたものとすることが望ましい。
  名詞、名詞句または名詞の省略形の名前を持つことが望ましい。

***** 定数名
- 
  全て大文字で、下線"_"で区切られた構成要素を持つ、一つ以上の単語、頭文字又は略語の並びとすることが望ましい。
  クラス型のfinal変数も、慣例として、同じ並びとしてよい。

***** 局所変数および仮引数名
- 
  短いが意味のあるものとするのが望ましい。普通、単語ではない短い小文字の列とする。
  ex) in, out, off, len, bufなど

*** パッケージ

*** 例外

*** 実行

*** ブロック及び文

*** 式


** Java Platform
*** エディション
**** Java SE
- 
  Java Platform, Standard Edition。
  汎用的な用途に使われる。

**** Java EE
- 
  Java Platform, Enterprise Edition。
  Java SEに加え、多層クライアントサーバの大規模システムを開発するための、
  さまざまなAPIが追加されている。

**** Java ME
- 
  Java Platform, Micro Edition。
  組み込みシステムなどを用途として想定したエディション。
  機器の種類に応じ、ライブラリのいくつかの異なるセット（プロファイル）を規定している。

*** 配布形態

**** Java Runtime Environment(JRE)
- 
  Javaを実行するために必要なソフトウェア。
  Java仮想マシン(JVM)とAPIから成る。
  仮想マシンとAPIは互いに互換性がなければならず、共にバンドルされている。
  プログラムを実行するだけであれば、JDKは必要なくJREのみでよい。

***** Java Virtual Machine(JVM)
- 
  Javaバイトコードとして定義された命令セットを実行するスタック型の仮想マシン。

***** Application Programming Interface(API)
- 
  関数群。クラスライブラリ。

**** Java Development Kit(JDK)
- 
  ソフトウェア開発キット。
  Javaプログラムの開発を支援する基本的なソフトウェア。
  各プラットフォームの全ての実装。
  Javaコンパイラ、javadoc、デバッガなどを含む多くの開発ツールを含む。
  Private Runtimeと呼ばれる完全なJREも含む。

***** 内容
- appletviewer
- apt
- extcheck
- idlj
- java
- javac
- javadoc
- jar
- javah
- javap
- javaws
- JConsole
- jdb
- jhat
- jinfo
- jmap
- jps
- jrunscript
- jstack
- jstat
- jstand
- keytool
- pack200
- policytool
- VisualVM
- wsimport
- xjc

([[http://ja.wikipedia.org/wiki/Java_Development_Kit][Java DevelopmentKit]])

*** command
**** java
- 
  クラスファイルからクラスを読み込んで実行する。

**** javac
- 
  .javaファイルから.classファイルを作成する。

** memo

*** リソース付きtry
- 
  try(AutoCloseable Class; ...){
  }
  括弧の中身のリソースについて、自動でclose()が呼ばれる。

*** 拡張for分
- 
  for (データ型 変数名: コレクション){
  }
  foreach。コレクションを順に取り出す。

*** インスタンス初期化子
- 
  {実装}
  何も修飾せず実装を書くと、コンストラクタが呼び出される前にメソッドとして呼び出される。
  匿名クラスなどで使い道がある。

*** 匿名クラス
- 
  new スーパークラス名(コンストラクタ引数) { サブクラス実装 }
  スーパークラスのサブクラスとして、名前のないクラスを作成できる。
  作成時にインスタンス化もして、そのまま使い捨てる。




*** temp

**** system.out
- 
  System.outはコンソール画面と結びつくストリームで、
  標準出力ストリーム(standard output stream)と呼ばれる。

***** println
- 
  改行付きの表示。lnはline。

***** print
- 
  表示後に改行はされない。

**** 文字列の連結
- 
  +を使う

**** 改行
- 
  \n

**** 標準入力
- 
  System.inは標準入力ストリーム(standard input stream)

**** 演算子とオペランド
- 
  演算を行う+や-などの記号を演算子(operator)、演算の対象となる式はオペランド(operand)という。
  x + yのx, yオペランド。

**** java.util.Scanner
- 
  nextInt()やnextDouble()等のメソッドで入力値を取り出す。
**** 修飾子
***** アクセス修飾子
- 
  メンバ変数とメソッド、クラスに指定できる修飾子で、
  その変数やメソッドを参照できる範囲を指定する。

  |-----------+----------------------------------------------------|
  | 修飾子    | 説明                                               |
  |-----------+----------------------------------------------------|
  | private   | 同じクラス内からのみアクセス可能                   |
  | 指定無し  | 同一クラス、パッケージのみアクセス可能             |
  | protected | 同一クラス、パッケージ、サブクラスのみアクセス可能 |
  | public    | どこからでもアクセス可能                           |
  |-----------+----------------------------------------------------|

***** abstract修飾子
- 
  メソッド、クラスに指定できる。
  付加すると抽象クラス、抽象メソッドとなる。

***** final修飾子
- 
  変数、メソッド、クラスに指定できる。
  どれに付けたかによって意味合いが変わる。
  
  |----------+------------------------------------------------------------|
  | 対象     | 説明                                                       |
  |----------+------------------------------------------------------------|
  | 変数     | 定数となる。変数宣言時に代入が必要となり、その後変更不可。 |
  |          | メンバー変数、ローカル変数どちらにも指定可能。             |
  | メソッド | オーバーライド不可                                         |
  | クラス   | クラスに付けた場合は、そのクラスは継承不可。               |
  |----------+------------------------------------------------------------|

