* Linux

** Linux OS

- shell
  bash, ash, csh, tsch, zsh, pdksh, ...
- util-linux
  init, getty, login, reset, fdisk, ...
- procps
  ps, pstree, top, ...
- GNU coreutils
  ls, cat, mkdir, rmdir, cut, chmod, ...
- GNU grep, find, diff
- GNU libc
- libraries 
  ncurses, GDMB, zlib, ...
- development enviroment
  gcc, binutils, make, bison, flex, headerfiles, ...
- X Window System
- GNOME, KDE
(「ふつうのLinux」p.27)

** File
- memo
  以下は広義ではすべてファイル。

- regular file
- directory
- symbolic link
- device file
  - character device file
    プリンタやモデムなど
  - block device file
    ハードディスクなど
- named pipe
  プロセス間通信に使うファイル。FIFO。
- UNIX domain socket

** directory

- / (FHS)
    + 第一階層、ルートディレクトリ
    - bin
      + シングルユーザモードで必要となる一般ユーザ向け基本コマンドの実行ファイル。
      + 必須: cat, chgrp, chmod, chown, cp, date, dd, df, dmesg, echo, false, hostname,
              kill, ln, login, ls, mkdir, mknod, more, mount, mv, ps, pwd, rm, rmdir,
              sed, sh, stty, su, sync, true, unmount, uname
      + オプション: csh, ed, tar, cpio, gzip, gunzip, zcat, netstat, ping
    - boot
        +ブートローダ関連のファイル群。カーネルやinitrd。通常別パーティション。
    - dev
        + 基本デバイス。/dev/null, /dev/consoleなど。
    - etc
        + システム全体の固有設定ファイル群。バイナリファイルを置かない。
        + fstab, gateway, group, hosts, password, profile, servicesなど。
        - opt
            + /opt/のための設定ファイル群。
        - X11
            + X Window System用の設定ファイル群。
        - sgml
            + sgml設定ファイル群。
        - xml
            + xml設定ファイル群。
    - home
        + ユーザのホームディレクトリ。オプション。
    - lib
        + /bin や /sbin にある実行ファイルの基本となるライブラリ群。
    - lost+found (FHSの規定にはなし)
        + fsckでディスクチェックした際に作られる、破損ファイルの断片を収めるディレクトリ。
    - media
        + CD-ROMなどのリムーバブル媒体マウントポイント。
    - mnt
        + ファイルシステムの一時マウントポイント。
    - opt
        + オプションのアプリケーションソフトウェアのインストール用
    - proc
        + カーネルやプロセスの情報をテキストで示す仮想ファイルシステム。
          procfsのマウントポイント。
    - root
        + rootユーザのホームディレクトリ。オプション。
    - sbin
        + システム管理系コマンドの実行ファイル群。
        + 必須: shutdown
        + オプション: fastboot, fasthalt, fdisk, fsck, fsck.*, getty, halt, ifconfig, init,
                      mkfs, mkfs.*, mkswap, reboot, route, swapon, swapoff, update
    - srv
        + システムによって提供された(served)固有のデータ
    - tmp
        + 一時ファイル置場。リブート時には内容が削除される。
    - usr
        + ユーザユーティリティとアプリケーションを格納。
        - bin
            + 一般ユーザ向けだが基本的でないコマンド。
              シングルユーザモードには不要なバイナリで、パッケージの追加削除でファイルは増減する。
        -include
            + 標準includeファイル群。C言語で使う標準ヘッダファイル。
        - lib
            + /usr/bin や /usr/sbin にある実行ファイルの基本ライブラリ。
        - sbin
            + 基本的でない実行ファイル群。ネットワーク用デーモンなど。
        - share
            + アーキテクチャに依存しない共有データ
        - src
            + ソースコード。
        - X11R6
            + X Windows System Version 11 Release 6
        - local
            + ホスト固有のローカルデータを格納する。システム管理者が自分でアプリケーションをインストールする場所。
            - bin
            - games
            - include
            - lib
            - man
                + /local/bin用マニュアル
            - sbin
                + /sbinと比べて重要でないシステムバイナリを配置する。
                  /sbinは緊急時に必要なもの、/usr/sbinは通常運用時。
            - share
                + アーキテクチャに依存しないデータを収める。
                - man
                    - man1
                        + ユーザプログラム
                    - man2
                        + システムコール
                    - man3
                        + Cライブラリ関数
                    - man4
                        + スペシャル(デバイス)ファイル
                    - man5
                        + ファイルフォーマット
                    - man6
                        + ゲーム
                    - man7
                        + その他
                    - man8
                        + システム管理
            - misc
            - src
    - var
        + 可変なファイル群。内容が常に変化するようなファイル群を格納する。
          ログ、スプール、一時的な電子メール等。
        - cache
            + アプリケーションのキャッシュデータ。
              普通は要領に上限を設けて、古い順に捨てていく。
        - lib
            + 状態情報。データベース、パッケージングシステムのメタデータなど。
            - misc
        - local
        - lock
            + ロックファイル群。使用中リソースを保持するファイル。排他制御を行いたい場合に使用する。
        - log
            + 各種ログ
        - opt
        - mail
            + メール
        - run
            + 走行中システムに関する情報。現在ログイン中のユーザ、走行中デーモン等。
              "`kill -HUP `cat /var/run/sendmail.pid`"などするとプロセス番号をタイポせずよい。
        - spool
            + 処理待ちスプール。プリントキュー、未読メールなど。
            - mail
                + 互換のためのかつてのメールボックス。
        - tmp
            + 一時ファイル置場。/tmpとは異なり、リブートしても内容が失われない。

    + ディレクトリの分類
      |----------+----------------------------+---------------------|
      |          | 共有可能                   | 共有不可            |
      |----------+----------------------------+---------------------|
      | 変化せず | /usr, /opt                 | /etc, /boot         |
      |----------+----------------------------+---------------------|
      | 変化する | /var/mail, /var/spool/news | /var/run, /var/lock |
      |----------+----------------------------+---------------------|


- / (何を参照したかは忘れた。)
    - vmlinuz
        Linux Kernel
    - boot
        - System.map
        - config
        - grub
        - initrd.img
          init ram disk
    - etc
        Setting Files
    - bin
        commands using by system admin and user
    - sbin
        admin tools using by system admin
    - usr
        directory which has data shared by users using the system
        - bin
        - include
        - lib
        - local
            - bin
            - etc
            - games
            - include
            - lib
            - man
            - sbin
            - share
            - src
        - sbin
        - share
    - home
    - var
        variable data
        - tmp
            directory with sticky bit, that makes the files in the directory not able to delete without the owner
        - log,spool
        - mail
        - run
            having PID in text files
        - lock
    - proc
        procfs(Process File System)
        pseudo file system giving system information
        /proc/PID/oom_score, oom_adj <-concerning with OOM Killer(Out Of Memory Killer)
    - sys
        sysfs: devise info, procfs: process and kernel info
    - dev
        deployed device files
    - tmp
        temporary
        deleted when unmounting or rebooting
   
** system calls
*** read(2)
- def
  #include <unistd.h>
  ssize_t read(int fd, void *buf, size_t bufsize);

- argument
  fd:ファイルディスクリプタの番号
  buf:格納先
  bufsize:最大読込バイト数

- return
  正常終了した場合は読込んだバイト数を返す。
  ファイル終端に達したときは0を、エラーが起きたときは-1を返す。

*** write(2)
- def
  #include <unistd.h>
  ssize_t write(int fd, const void *buf, size_t bufsize)

- argument
  fd:ファイルディスクリプタの番号
  buf:書込元
  bufsize:最大書込サイズ数

- return
  正常終了時は書き込んだバイト数を返す。
  エラー時は-1を返す。

*** open(2)
- def
  #include <sys/types.h>
  #include <sys/stat.h>
  #include <fcntl.h>
  int open(const char *path, int flags);
  int open(const char *path, int flags, mode_t mode);

- argument
  path:openするファイルのパス
  flags:ストリームの性質を表すフラグ
  mode:O_CREATを指定した場合に、新規ファイルのパーミッションを指定する

  - flags 1
    常にどれか一つを指定する
    |----------+--------------|
    | O_RDONLY | 読み取り専用 |
    | O_WRONLY | 書込み専用   |
    | O_RDWR   | 読み書き両用 |
    |----------+--------------|

  - flag 2
    指定しなくても良いし、複数指定しても良い。
    下のもの以外にも色々ある。
    |----------+-----------------------------------------------------------------------------------|
    | O_CREAT  | ファイルが存在しなければ新しいファイルを作る                                      |
    | O_EXCL   | O_CREATとともに指定すると、すでにファイルが存在するときはエラーとなる             |
    | O_TRUNC  | O_CREATとともに指定すると、ファイルが存在するときはまずファイルの長さをゼロにする |
    | O_APPEND | write()が常にファイル末尾に書込まれるよう指定する                                 |
    |----------+-----------------------------------------------------------------------------------|

- return
  ファイルディスクリプタの値を返す

  - ex
    open(file, O_RDWR|O_CREAT|O_TRUNC, 0666)

*** close(2)
- def
  #include <unistd.h>
  int close(int fd);

- argument
  fd:ファイルディスクリプタ

- return
  問題なく閉じられた場合は0, エラーがあった場合は-1を返す。

- ex
  if (close(fd) < 0){
      /* エラー処理 */
  }

*** lseek(2)
- 
  ファイルディスクリプタfd内部のファイルオフセットを指定した位置offsetへ移動する。
  移動方法はwhenceに指定する。

- def
  #include <sys/types.h>
  #include <unistd.h>
  off_t lseek(int fd, off_t offset, int whence);

- argument
  whence:位置の指定方法。
         SEEK_SET:offsetに移動（起点はファイル先頭）
         SEEK_CUR:現在のファイルオフセット+offsetに移動
         SEEK_END:ファイル末尾+offsetに移動

*** dup(2), dup2(2)
- 
  oldfdを複製するシステムコール。
  dupはduplicateより。

- def
  #include <unistd.h>
  int dup(int oldfd);
  int dup2(int oldfd, int newfd);

*** ioctl(2)
- 
  ストリームがつながる先にあるデバイスに特化した操作を全て含めたシステムコール。

- def
  #include <sys.ioctl.h>
  int ioctl(int fd, int request, ...);

- argument
  request:どのような操作をするか定数で指定し、そのrequest特有の引数を第3引数以降に渡す。

*** fcntl(2)
- 
  ファイルディスクリプタ関連の操作をioctlより分離したもの。

- def
  #include <unistd.h>
  #include <fcntl.h>
  int fcntl(int fd, int cmd, ...);


** command

*** mv
    リネームとかファイルの移動とか。
    mv aaa{,bbb}とするとaaa->aaabbbにリネームされる。

*** touch
*** mkdir
*** rmdir

*** chmod
    アクセス権限の変更。
    u:所有者 g:グループ o:その他すべて a:すべての権限
    +:権限付与 -:権限削除 =:権限の書き換え
    r:読み込み w:書き込み x:実行 s:セットID t:スティッキービット
    - SUID
        SUID(Set User ID)は特殊なパーミッションのひとつで、
        実行可能ファイルに設定する。
        実行権にRootユーザのユーザIDをセットできる。
        u+s, 4xxx
    - SGID
        SGID(Set Group ID)は特殊なパーミッションのひとつで、
        実行可能ファイルおよびディレクトリに設定する。
        実行権にGroupのグループIDをセットできる。
        g+s, 2xxx
    - スティッキービット
        特殊なパーミッションのひとつで、ディレクトリに対して設定する。
        書き込み権限があっても、自分以外のユーザが所有するファイルを削除できなくなる。
        o+t, 1xxx
*** chgrp

*** tail
    n:number f: follow (exit with C-c)
*** ls
*** man
- マニュアルを呼び出す。
  |------------+------------------------|
  | セクション | 分類                   |
  |------------+------------------------|
  |          1 | ユーザコマンド         |
  |          2 | システムコール         |
  |          3 | ライブラリ関数         |
  |          4 | デバイスファイルなど   |
  |          5 | ファイルフォーマット   |
  |          6 | ゲーム                 |
  |          7 | 規格など               |
  |          8 | システム管理用コマンド |
  |------------+------------------------|

*** info
- 
  emacsを使ってマニュアルを表示する。
  GNU libcの一次情報はinfo。

*** whatis
    show summary of man, searched from command names.
*** apropos
    show result searched from summaries and command names.
*** info
    info documents on emacs
*** whereis
*** clear
*** ps
- ax

*** mount
    現在マウントされているファイルシステムを調べる。
    [--bind] すでにマウントされているツリーの一部を別の場所にマウントする。
    [-v] verbose
    [-t] ファイルシステムのタイプを指定
        ext3, ntfs, sysfs, devpts, proc, tmpfsなど。

*** unmount

*** sysctl
    system settings
    /proc/sys/net/ipv4/ip_forward -> net.ipv4.ip_forward (in /etc/sysctl.conf)

*** fdisk
    パーティションを設定する。
    [- l] リストを取得する。 (sudo fdisk -l /dev/sda)

*** dmesg
    カーネルのメッセージバッファの内容を表示する。"display message"の略。

*** df
    ファイルシステムについて、使用領域と空き領域のサイズを表示する。
    disk free : display free disk space.
    [-h] サイズの単位をつけてくれる。
    [-a] サイズが0のファイルシステムも出力
    [-T] ファイルシステムの種類(ex: ext4)も出力

*** mkfs
    ファイルシステムの作成
    [-t] ファイルシステムタイプを指定する。
    [-V] verboseもversionも兼用しているようです。
    ex: mkfs -v -t ext4 /dev/sdb1

*** mkswap
    スワップ領域を設定する。
    mkswap /dev/sbd2

*** export
    変数を大域変数として追加する。
    export FOO="BAR"

*** ln
    [-s, --symbolic] シンボリックリンクの作成
    [-v, --verbose]

*** groupadd
    新しいグループの作成
*** useradd
    新規ユーザの作成
    [-s] shellを設定する。
    [-g] 主グループを設定する。
    [-m] ホームディレクトリが存在しない場合に作成する。
         [-k] -mと同時に指定すると、指定したフォルダ以下のファイルがコピーされる。
              指定しない場合は/etc/skel以下をコピー。

*** passwd
    ユーザパスワードを変更する。

*** chown
    所有者を変更する。
    [-v] verbose

*** su
    ユーザを切り替える。
    [-, -l, --login] シェルをログインシェルにする。

*** source
    "source filename"で、filenameで指定されたスクリプトファイルを実行する。
    ファイルの内容を、自分で手で打っていくのと同じ。

*** tar
    ファイルを書庫化、展開する。
    - メインオプション
        [-A, --catenate] tarファイルを書庫に追加する
        [-c, --create] 書庫を新規作成する
        [-d, --diff] 書庫とファイルシステム比較する
        [--delete] 書庫内からファイルを削除する
        [-r, --append] 書庫の後部にファイルを追加する
        [-t, --list] 書庫の内容を表示する
        [-u, --update] 新しいファイルのみ追加する
        [-x, --extract] 書庫内からファイルを取り出す
    - その他
        [-f] ファイルを指定
        [-v, --verbose] ファイル一覧を詳細に表示
    - 形式別(最近は自動判断)
        [-z] tar + gzip
        [-j] tar + bzip2
        [-J] tar + xz

*** zip / unzip
*** rar / unrar
*** gzip / gunzip
*** bzip2 / bunzip2
*** xz / unxz

*** readelf
    ELFファイルに関する情報を表示

*** make
    コンパイル等の処理を自動で行う。
    [-k, --keep-going] エラーが発生してもできるだけ処理を継続させる。
    [-n, --just-print, --dry-run] 実際には処理せず実行コマンドのみ表示する。

*** tee
    標準入力から読み込んだ内容を、標準出力とファイルの両方へ出力する。

*** find
    ファイルやディレクトリを検索する。
    用法: find [option] [path...] [expression]
    [-name] ファイル名を検索、パターンマッチ可。
    [-exec] 検索後コマンドを実行する。

*** strip
    オブジェクトファイルからシンボル(デバッグ用のデータ)を切り捨てる。

*** mknod
    特殊ファイルを作成する。
    mknod [オプション] ファイル名 タイプ メジャー マイナー
    [-m] アクセス権を設定する。デフォルトは0666からumaskを引いたもの。
    タイプ: b ブロック(buffered)型、c,u キャラクタ(unbuffered)型
            p FIFO(名前つきパイプ)
            ※pを指定を指定した場合はデバイス番号（メジャーマイナー）を指定しない。

*** chroot
    ルートディレクトリを変更してコマンドを実行する。
    chroot directory [command [args]]

*** install
    ファイルをコピーして属性の設定をする。
    1. install [OPTION]... SOURCE DEST
    2. install [OPTION]... SOURCE... DIRECTORY
    3. install -d [OPTION]... DIRECTORY...
    [-d, --directory] ディレクトリを作成する。
    [-m, --mode] アクセス権を設定する。
    [-v, --verbose]

*** tzselect
    タイムゾーンを選択する。

*** readlink
    シンボリックリンクの値を読む。
    readlink [OPTION]... FILE...

*** gcc
- 
  コンパイルする。
- -o
  ファイル名を指定する。
  ex) gcc -o hello.exe hello.c
- -Wall
  ANSI Cスタイルの宣言と定義を使った場合に、一般的な警告オプションがすべてOnになり、
  細かな警告をしてくれる。
- -O1(O), -O2, -O3
  最適化オプション。数字が大きい方が強力な最適化が行われる。
  ただしO3はバグが多い印象があるとのこと。

** memo

*** suid
    set user id
*** sgid
    set group id

*** /etc/passwd
    ユーザ名:暗号化パスワード:UID:GID:ユーザのフルネーム:ユーザのホームディレクトリ:ログインシェル

*** /etc/group
    グループ名:パスワード:GID:ユーザアカウントのリスト(カンマ区切り)

*** /etc/nsswitch.conf
    ネームサービススイッチ(NSS)の設定ファイル。
    いろいろなカテゴリの名前サービス情報を、どの情報源からどの順序で取得するかを判断するのに使用される。

*** Ctrl-s
    スクロール停止キー。画面がフリーズしたように見える。
    ログを見ていて、一時的にとめておくために使ったりする。
    解除はCtrl-q
*** glob
- 
  シェルが*?{}[]~などを解釈し、ファイル名として展開することをグロブ（ファイルグロブ）という。
  正規表現とは別物。
  働かせたくない場合は""等で囲む。
  ちなみにWindowsではLinuxと異なりプログラム側で展開する。
*** tty
- 
  端末を表すttyは、TeleTYpeの略。
*** standard input/output
- 
  |----------------+---------------+----------------|
  | FileDiscriptor | Macro         | Meaning        |
  |----------------+---------------+----------------|
  |              0 | STDIN_FILENO  | 標準入力       |
  |              1 | STDOUT_FILENO | 標準出力       |
  |              2 | STDERR_FILENO | 標準エラー出力 |
  |----------------+---------------+----------------|

*** sys/types.h システム定義型
OSやCPUの差異を隠蔽するために別名で基本型を再定義している。
- size_t
  符号なし整数型
- ssize_ti
  符号付き整数型

*** '\0'の有無
- 
  read(2)は終端に'\0'を想定していない。
  対して、printf()は末尾に'\0'を前提としているので、
  そのまま渡したり、合わせて使うのは間違い。
