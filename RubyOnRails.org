* Ruby on Rails

** Philosophy

- Don't Repeat Yourself: DRY
  同じことを繰り返すな

- Convention Over Configuration
  設定より規約が優先される

** REST
*** GET
- 
  データ読取
*** POST
- 
  作成

*** PATCH
- 
  更新。
  以前はPUTリクエストを使っており、Rails40でもサポートはされているが、
  PATCHの方が意図にあうため、PATCHが推奨されている。

*** DELETE
- 
  削除

** Architecture
*** Controller
- 

*** View


*** Model

** Command

*** rails
**** new
**** server
- 
  サーバを起動する。
  "rails s"でもよい。
**** generate
***** controller
- 
  キャメルケースで渡すと、スネークケースのファイルを自動的に生成する。
  ただし単なる慣習なので、スネークケースのコントローラ名を入力しても
  同様にスネークケースのファイル名が出力される。

***** integration_test
**** destroy
- 
  generateの逆で作成したコードを削除する
  ex) rails destroy controller FooBars baz quux

**** console
- 
  Railsアプリケーションを対話的に操作することが出来る。
  exitを入力すると終了できる。
  Ctrl-Cでスタックから抜ける。Ctrl-Dで完全にコンソールを終了する。
  "rails c"でもOK。

*** bundle
- update
- install
- exec
  - rake
    - T
      コマンド一覧を表示する
    - db
      - T
        データベースのコマンドを表示する。
  - rspec

*** rake

**** db
- db:migrate
  マイレーションを変更する
  - VERSION=0
    最初の状態に戻す
- db:rollback
  1つ前の状態に戻す

**** routes

** File/Directory

- README.rdoc
  アプリケーションの簡単な説明

- Rakefile
  rakeコマンドで使用可能なタスク

- Gemfile
  このアプリケーションに必要なGemの定義ファイル

- Gemfile.lock
  アプリケーションの全てのコピーが同じgemのバージョンを使用していることを確認するために使用されるgemリスト

- config.ru
  Rackミドルウェア用の設定ファイル

- .gitignore
  Gitに含めないファイルを指定する。

*** app/
- 
  モデル、ビュー、コントローラ、ヘルパーなどを含む主要なアプリケーションコード

**** app/assets/
- 
  アプリケーションなどで使用するCSS(Cascading Style Sheet)、JavaScriptファイル、画像などのアセット
***** app/assets/stylesheets
***** app/assets/javascripts
***** app/assets/images

**** app/views/
***** app/views/layouts/
- 
  Webサイトのレイアウトが格納されている。
  ex) application.html.erb

***** app/views/static_pages/
- 
  
**** app/helpers/
- 
  ヘルパーの定義ファイルが格納されている
  モジュールを定義すると、Railsが自動的に全てのビューにインクルードしてくれる。

*** bin/
- 
  バイナリ実行可能ファイル
- rails
  コード生成、コンソールの起動、ローカルのWebサーバの立ち上げなどに使用するRailsスクリプト

*** config/
- 
  アプリケーションの設定
- routes.rb
  - root 'welcome#index'
    アプリケーションのルートURLへのアクセスをwelcomeコントローラのindexアクションに割り当てる。
  - get 'welcome/index'
  - get 'static_pages/home'
    /static_pages/homeというURLに対するgetリクエストに対し、
    StaticPagesコントローラのhomeアクションと結びつける。

*** db/
- 
  データベース関連のファイル

*** doc/
- 
  マニュアルなど、アプリケーションのドキュメント

*** lib/
- 
  ライブラリモジュール

- assets
  ライブラリで使用するCSS、JavaScripts、画像などのアセット

*** log/
- 
  アプリケーションのログファイル

*** public/
- 
  エラーページなど、一般（Webブラウザなど）に直接公開するデータ

*** test/
- 
  アプリケーションのテスト（spec/ディレクトリがあるため、現在は使用されていない。)

*** tmp/
- 
  一時ファイル

*** vendor/
- 
  サードパーティのプラグインやgemなど

- assets
  サードパーティのプラグインやgemで使用するCSS、JavaScripts、画像などのアセット

** Helper
*** link_to
- 
  アンカータグaを使用したリンクを作成する。
  第1引数がリンクテキスト、第2引数がURL、第3引数がオプションハッシュ。

*** image_tag
- 
  画像ファイルのパスと任意のオプションハッシュを取る。
  ex) image_tag("rails.png", alt: "Rails")
      => <img alt="Rails" src="/assets/rails.png" />

*** render
- 
  ファイルを探してその内容を評価し、結果を挿入する。パーシャルという機能。
  "render 'layouts/shim'"とした場合、app/views/laiyouts/_shim.html.erbというファイルを利用する。
*** stylesheet_link_tag
*** javascript_include_tag
*** csrf_meta_tags
** Memo

- form_forメソッド

*** heroku
(他に書くところもないので、とりあえず。。)

**** command

- heroku login
- heroku create
- git push heroku master
- heroku open
- heroku rename

*** rspec
- 
  ダブルクォート""で囲った文字列は評価しない

- ex)
  describe "Home page" do
    it "should have the content 'Sample App'" do
      visit '/static_pages/home'
      expect(page).to have_content('Sample App')
    end
  end
*** erb
- 
- <% ... %>
  中に書かれたコードを単に実行する
- <%= ... %>
  中に書かれたコードが実行され結果がテンプレートに挿入する。

*** Rails環境
- development
- test
- production
*** Asset Pipeline
- 
  アセットをディレクトリに配置し、さまざまなプリプロセッサエンジンを介してそれらを実行し、
  ブラウザに配信できるようそれらをマニフェストファイルを用いて結合する。

  プログラマにとっては分割され見やすく、
  実行環境にとってはファイルが1つにまとめられるので取込のオーバーヘッドがない。
  また空白を取り除くことでファイルサイズも縮小してくれる。

**** アセットディレクトリ
- 3.0以前
  Rails3.0以前は静的ファイルは以下に置かれていた。
  - public/stylesheet
  - public/javascrit
  - public/images

- 3.1以降
  3.1以降では、静的ファイルを目的別に分類する、標準的な3つのディレクトリが使用される。
  - app/assets
    現在のアプリケーション固有のアセット
  - lib/assets
    開発チームによって作成されたライブラリ用のアセット
  - vendor/assets
    サードパーティのアセット

**** マニフェストファイル
- 
  アセットをどのように1つのファイルにまとめるかを指示する。
  実際にまとめるのはSprockets gem。
  CSSとJavaScriptには適用されるが、画像ファイルには適用されない。

**** プリプロセッサエンジン
- 
  ファイルの拡張子を使用してどのプリプロセッサを使うか判断する。
  Sass用の.scss、CoffeeScript用の.coffee、埋め込みRuby(ERb)用の.erbあたりが一般的。
  つなげて実行することが出来る。
  
  ex) foobar.js.erb.coffee
  上の例の場合、CoffeeScriptとERbの両方で実行される。
  コードは右から左に実行されるので、CoffeeScriptが先に実行される。
  


** Link
- 

  
