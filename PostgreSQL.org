* PostgreSQL

** Command

*** Client Application

**** clusterdb
- 
  PostgreSQLデータベースをクラスタ化する

**** createdb
- 
  新しいPostgreSQLデータベースを作成する

**** createlang
- 
  PostgreSQL手続き言語をインストールする。
  廃止予定。CREATE EXTENSIONを使う。

**** createuser
- 
  新しいPostgreSQLユーザアカウントを作成する。

**** dropdb
- 
  PostgreSQLデータベースを削除する。

**** droplang
- 
  手続き言語を削除する

**** dropuser
- 
  ユーザアカウントを削除する

**** ecpg
- 
  埋め込みSQL用Cプリプロセッサを使用する

**** pg_basebackup
- 
  クラスタのベースバックアップを取得

**** pg_config
- 
  インストールしたPostgreSQLバージョン情報を提供する

**** pg_dump
- 
  PostgreSQLデータベースをスクリプトファイルまたは他のアーカイブファイルへ抽出する

**** pg_dumpall
- 
  データベースクラスタをスクリプトファイルへ抽出する

**** pg_isready
- 
  サーバの接続状態を検査する

**** pg_receivexlog
- 
  クラスタからトランザクションログをストリームする

**** pg_restore
- 
  pg_dumpで作成されたアーカイブファイルから、データベースをリストアする

**** psql
- 
  対話的ターミナル

- -l
  データベースの一覧を表示する。

**** reindexdb
- 
  インデックスを再作成する

**** vacuumdb
- 
  不要領域の回収と解析を行う。


*** Server Application

**** initdb
- 
  データベースクラスタを新しく作成する

**** pg_controldata
- 
  クラスタの制御情報を表示する

**** pg_ctl
- 
  サーバの初期化、起動、停止、制御

**** pg_resetxlog
- 
  データベースクラスタの先行書き込みログやその他制御情報を初期化する

**** postgres
- 
  PostgreSQLデータベースサーバ。

**** postmaster
- 
  postgresの別名。廃止予定。


** SQL言語

*** SQLの構文
**** 語彙の構成
- SQL
  SQLは一続きのコマンド。
- コマンド
  コマンドはトークンがつながったもので、セミコロンで終わる。
  トークンは通常空白(スペース、タブ、改行)で区切られるが、曖昧さがなければ必要ない。
- トークン
  キーワード、識別子、引用符で囲まれた識別子、リテラル（若しくは定数）、特別な文字シンボル。
***** キーワード
- 
  SQL言語で決まった意味を持つ単語。
  [[https://www.postgresql.jp/document/9.3/html/sql-keywords-appendix.html][付録C. SQLキーワード]]

***** 識別子
- 
  識別子とキーワードは同じ語彙構造を持つため、キーワードでないものが識別子。
  識別子（とキーワード）は、文字、アンダースコアで始まり、
  続く文字は、文字、アンダースコア、数字、あるいはドル記号$を使用できる。
  標準識別子ではドル記号$は識別子内では使用できない。
  
  NAMEDATALEN-1バイトより長い識別子は使えない。長い名前を書くことはできるが区切られてしまう。
  デフォルトではNAMEDATALENは64。src/include/pg_config_manual.hを編集することで変更可能。
  
  任意の文字の連なりを二重引用符(")で囲んだ区切り識別子も使用できる。
  バックスラッシュでないエスケープ文字を使用したい場合、文字列の後にUESCAPE句を使用して指定する。

***** 定数
- 暗黙に型付けされる定数
  文字列、ビット文字列、数字

****** 文字列定数
- 
  単一引用符(')でくくられた任意の文字の並び。
  2つの文字列定数が、改行を含む空白で区切られている場合、連結され1つの定数として処理される。
  ex) SELECT 'foo'
      'bar';
      ⇒ SELECT 'foobar';

******* C形式エスケープ
- 
  単一引用符の前にEを記述する。
  文字列内でバックスラッシュ文字によりC言語のようなバックスラッシュシーケンスが開始される。
  
  |---------------------------+---------------------------------------|
  | Backslash Escape Sequence | 解釈                                  |
  |---------------------------+---------------------------------------|
  | \b                        | 後退                                  |
  | \f                        | 改ページ                              |
  | \n                        | 改行                                  |
  | \r                        | 復帰                                  |
  | \t                        | タブ                                  |
  | \o, \oo, \ooo (o=0-7)     | 8進数バイト値                         |
  | xh, \xhh (h=              | 16進数バイト値                        |
  | \uxxxx, \Uxxxxxxxx        | 16もしくは32ビットの16進Unicode文字列 |
  |---------------------------+---------------------------------------|

******* Unicodeエスケープ
- 
  U&で始まる。
  バックスラッシュ以外のエスケープ文字を使いたい場合、
  UESCAPE句を使用して指定することが可能。

******* ドル引用符
- ex)
  $$Dianne's horse$$
  $tag$Dianne's horse$tag$

****** ビット文字列定数
- 
  BやXを前置して、ビット文字列を表現できる。小文字でもよい。
  Xだと16進の表記となる。
  ex) B'1001', X'1FF'

****** 数値定数
- 
  以下の形式がある。
  - digits
  - digits.[digits][e[+-]digits]
  - [digits].digits[e[+-]digits]
  - digitse[+-]digits

  ex) 42, 3.5, 4., .001, 5e2, 1.925e-3

****** 他の型の定数
- 
  type 'string'
  'string'::type
  CAST ('string' AS type)

***** 演算子
- 
  NAMEDATALEN-1までの長さの、以下に示すリストに含まれる文字の並び。
    + - * / < > = ~ ! @ # % ^ & | ` ?
  
  --, /*は使用できない。
  複数文字の演算子名は、下記の文字を含まない限り、+や-で終わることができない。
    ~ ! @ # ^ & | ` ?

  曖昧さを回避するため、隣り合った演算子を空白で区切る必要がある。
    X*@Y -> X* @Y

****** 優先順位
- 
  |--------------------+--------+------------------------------------------------|
  | 演算子/要素        | 結合性 | 説明                                           |
  |--------------------+--------+------------------------------------------------|
  | .                  | 左     | テーブル/列名の区切り文字                      |
  | ::                 | 左     | PostgreSQL方式の型キャスト                     |
  | [ ]                | 左     | 配列要素選択                                   |
  | + -                | 右     | 単項可算、単項減算                             |
  | ^                  | 左     | 累乗                                           |
  | * / %              | 左     | 掛け算、割り算、剰余                           |
  | + -                | 左     | 加算、減算                                     |
  | IS                 |        | IS TRUE, IS FALSE, IS NULL, その他             |
  | ISNULL             |        | NULLかどうかを試す                             |
  | NOTNULL            |        | 非NULLかどうかを試す                           |
  | (その他)           | 左     | その他全ての組み込み、あるいはユーザ定義演算子 |
  | IN                 |        | メンバシップを設定する                         |
  | BETWEEN            |        | 範囲内に含有                                   |
  | OVERLAPS           |        | 時間間隔の重複                                 |
  | LIKE ILIKE SIMILAR |        | 文字パターンの一致                             |
  | < >                |        | 小なり、大なり                                 |
  | =                  | 右     | 等しい、代入                                   |
  | NOT                | 右     | 論理否定                                       |
  | AND                | 左     | 論理積                                         |
  | OR                 | 左     | 論理和                                         |
  |--------------------+--------+------------------------------------------------|

***** 特殊文字
- 
  直後に数字が続くドル記号($)は、関数定義の本体またはプリペアド文中の位置パラメータを表すために使われる。
  括弧()は、式をまとめる。
  大括弧[]は、配列要素を選択するために使う。
  カンマ,は、リストの要素を区切るために構文的構造体で使われることがある。
  セミコロン;は、SQLコマンドの終わりを意味する。
  コロン:は、配列から"一部分"を取り出すために使う。
  アスタリスク*は、すべてのフィールドを表現するために使われる
  ピリオド.は数値定数の中で使われる。

***** コメント
- 
  一行コメント --
  ブロックコメント /* */

**** 評価式
- 
  評価式は以下のいずれか。
  - 定数またはリテラル値
  - 列の参照
  - 関数宣言の本体やプリペアド文における位置パラメータ参照
  - 添え字付の式
  - フィールド選択式
  - 演算子の呼び出し
  - 関数呼び出し
  - 集約式
  - ウィンドウ関数呼び出し
  - 型キャスト
  - 照合順序式
  - スカラ副問い合わせ
  - 配列コンストラクタ
  - 行コンストラクタ
  - 括弧で囲まれた別の評価式

**** 関数と演算子

***** 関数呼び出し
- 
  関数呼び出し時の引数は、位置表記、名前付け表記、混在表記が可能。


*** データ定義
**** 基本
- 
  CREATE TABLEでテーブル作成、DROP TABLEでテーブル削除。

**** デフォルト値
***** DEFAULT
- 
  列データ型の後に列挙して設定する。

***** SERIAL
- 
  連続した値を生成する

**** 制約
- 
  列に対して制約をつける列制約と、
  テーブルに対して制約をつけるテーブル制約がある。

***** CHECK
- 
  制約を付ける。
  ex) price numeric CHECK (price > 0)

***** COSTRAINT
- 
  制約に個別に名前を付けることが出来る。
  ex) price numeric CONSTRAINT positive_price CHECK (price > 0)

***** NOT NULL
- 
  非NULL制約。

***** UNIQUE
- 
  一意性制約

***** PRIMARY KEY
- 
  単純に一意性制約と非NULL制約を組み合わせたもの。

***** REFERENCES
- 
  外部キー制約。
  列リストを省略した場合、参照先の主キーを対象とする。

***** FOREIGN KEY

***** EXCLUDE
- 
  排他制約

**** システム列

***** oid
- 
  オブジェクト識別子。

***** tableoid
- 
  行を含むテーブルのOID。

***** xmin
- 
  行バージョンの挿入トランザクションの識別情報。
  行バージョンとは、行の個別の状態。

***** cmin
- 
  挿入トランザクション内のコマンド識別子。

***** xmax
- 
  削除トランザクションの識別情報。

***** cmax
- 
  削除トランザクション内のコマンド識別子。

***** ctid
- 
  行バージョンの物理的位置。

**** テーブルの変更
***** 列の追加
- 
  ex) ALTER TABLE products ADD COLUMN descrition text CHECK (description <> '');

***** 列の削除
- 
  ex) ALTER TABLE products DROP COLUMN description;

***** 制約の追加
- 
  ex) ALTER TABLE products ADD CHECK (name <> '');
      ALTER TABLE products ADD CONSTRAINT some_name UNIQUE (product_no);
      ALTER TABLE products ADD FOREIGN KEY (product_group_id) REFERENCES product_groups;
      ALTER TABLE products ALTER COLUMN products_no SET NOT NULL;

***** 制約の削除
- 
  制約を削除する場合、対象の制約名を知る必要がある。
  自分で設定していない場合、システムが生成した名前が割り当てられているため、
  それを探す必要がある。
  ex) ALTER TABLE products DROP CONSTRAINT some_name;

***** デフォルト値の変更
- 
  ex) ALTER TABLE products ALTER COLUMN price SET DEFAULT 7.77;
      ALTER TABLE products ALTER COLUMN price DROP DEFAULT;

***** 列のデータ型の変更
- 
  暗黙のキャストが変更する場合のみ、成功する。
  ex) ALTER TABLE products ALTER COLUMN price TYPE numeric(10,2);

***** 列名の変更
- 
  ex) ALTER TABLE products RENAME COLUMN product_no TO product_number;

***** テーブル名の変更
- 
  ex) ALTER TABLE products RENAME TO items;


**** 権限
- 
  オブジェクトを使用するには権限が必要。

- 権限の種類
  SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER,
  CREATE, CONNECT, TEMPORARY, EXECUTE, USAGE

***** GRANT
- 
  権限を割り当てる。
  ex) GRANT UPDATE ON accounts TO joe;

***** REVOKE
- 
  権限を取り消す。
  ex) REVOKE ALL ON accounts FROM PUBLIC;

**** スキーマ
- 
  入れ子にできないOSのディレクトリのようなもの。
  名前空間を分離する。
  
- オブジェクトの作成
  スキーマ上にオブジェクトを作成するには、
    ex) CREATE TABLE myschema.mytable ( ...);
  のようにスキーマを指定した形式で書く。

- デフォルト
  デフォルトでは、publicスキーマにオブジェクトが作成される。

- スキーマ検索パス
  "SHOW search_path;"で現行の検索パスを表示できる。
  検索パス内で最初に存在するスキーマが新規オブジェクトが作成されるデフォルトの場所で、
  検索時は一致するオブジェクトが見つかるまで検索パス内で探索される。
  追加するには、"SET search_path TO myschema, public;"のようにする。

- システムカタログスキーマ
  pg_catalogスキーマが、publicおよびユーザ作成のスキーマのほかに各データベースに含まれる。
  pg_catalogは常に検索パスに含まれる。
  明示的にリストされていない場合、パスのスキーマを検索する前に暗黙的に検索される。

***** CREATE SCHEMA
- 
  スキーマに自由に名前をつける。

***** DROP SCHEMA
- 
  スキーマを削除する。
  オブジェクトを含むスキーマを削除するには、CASCADEをつける。

***** USAGE
- 
  スキーマを使用する権限。多分。

**** 継承
- 
  親テーブルの検査制約と非NULL制約は子テーブルに継承される。
  他の種類の制約は継承されない。
  
  複数の親から継承可能。
  複数の親が同じ名前の列を保持していたり、子テーブルが親テーブルと同じ列を保持している場合、
  統合され一つとなる。データ型が異なる場合はエラーとなる。
  全ての制約を受け継ぐ。

  子テーブルがいる場合親テーブルを削除できないが、
  CASCADEオプションを付けて子テーブルも全て削除することはできる。

***** INHERITS
- 
  テーブルで継承を行うためのヒント。

**** パーティショニング

**** その他のオブジェクト

*** SQL Command

**** BEGIN

**** COMMIT

**** COPY
- 
  平文テキストから入力する。
  ファイルとテーブルの間でデータをコピーする。
  ex) COPY weather FROM '/home/user/weacher.txt';

**** CREATE

**** DELETE

**** INSERT
  
**** ROLLBACK

**** SAVEPOINT
- 
  現在のトランザクション内に新規にセーブポイントを定義する。

**** SELECT

**** UPDATE

*** 関数

**** version()

**** rank()

**** nextval()

*** データ型
- 
  int, smallint, real, double, precision, char(N), varchar(N), date, time, timestamp, interval
  point

** 内部コマンド

*** \h
- 
  ヘルプを表示する

*** \q
- 
  psqlを終了する。

** etc

*** current_date


*** DISTINCT

*** OVER


** memo

*** 構成
- 
  サーバプロセスとクライアントアプリケーションで構成される。

** Link
- [[https://www.postgresql.jp/document/9.3/html/index.html][PostgreSQL 9.3.2文書]]
- [[http://www.postgresql.org/][PostgreSQL]]
- [[https://wiki.postgresql.org/wiki/Main_Page][PostgreSQL Wiki]]
- [[http://lets.postgresql.jp/documents/tutorial/centos/2][CentOSでPostgreSQLを使ってみよう!(2)]]
