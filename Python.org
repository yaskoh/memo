* Python
** Tutorial
** Command
*** python
- usage
  python [-bBdEhilOqsSuvVWx?] [-c command | -m module-name | script | -] [args]

- -c <command>
- -m <module-name>
- -
  標準入力(sys.stdin)からコマンドを読み込む。
- <script>
  script内のPythonコードを実行する。

- -?, -h, --help
  全コマンドラインオプションの短い説明を出力する。
- -V, --version
  Pythonのバージョンを表示する
*** Environmental variables
**** PYTHONHOME
- 標準Pythonライブラリの場所を変更する。
**** PYTHONPATH
- モジュールファイルのデフォルトの検索パスを追加する。
**** PYTHONSTARTUP
- この変数が読み込み可能なファイル名の場合、対話モードで最初のプロンプトが表示される前にそのファイルのPythonコマンドが実行される。
**** PYTHONPTIMIZE
**** PYTHONDEBUG
**** PYTHONINSPECT
**** PYTHONUNBUFFERED
**** PYTHONVERBOSE
**** PYTHONCASEOK
**** PYTHONDONTWRITEBYTECODE
**** PYTHONHASHSEED
** Language
*** Parser
**** line structure
***** logical line
***** physical line
***** Comments
- 
  ハッシュ"#"から始まり、同じ物理行の末端で終わる。
***** encoding declaration
- 
  スクリプトの一行目か二行目にあるコメントが正規表現"coding[=:]\s*([-\w.]+)"にマッチする場合、コメントはエンコード宣言として処理される。
  推奨系は以下。
  - Emacs : # -*- coding: <encoding-name> -*-
  - vim:fleeencoding=<coding-name>
***** 明示的な行継続
***** 非明示的な行継続
***** 空行
***** Indent インデント
***** トークン間の空白
**** Token
***** Identifier
- 
****** reserved
***** Keyword
- 
  False, None, True
  and, as, assert, break, class, continue
  def, del, elif, else, except, finally
  for, from, global, if, import, in, is,
  lambda, nonlocal, not, or, pass, raise, return,
  try, while, whithe, yield, pass, raise

***** Literal
****** Strings literal
- 
  - stringliteral ::= [stringprefix](shortstring | longstring)
  - stringprefix ::= "r" | "u" | "R" | "U"
  - shortstring ::= "'" shortstringitem* "'" | '"' shortstringitem* '"'
  - longstring ::= "'''" longstringitem* "'''" | '"""' longstringitem* '"""'

****** Concatenation
****** Number literal
******* Integer literal
******* Iloat literal
******* Imaginary literal
- imagnumber ::= (floatnumber|intpart) ("j"|"J")
- ex)
  3.14j 10J
***** Operator
- 
  +, -, *, **, /, //, %, @, <<, >>, &, |,
  ^, ~, <, >, <=, >=, ==, !=

***** Delimiter
- 以下は文法上のデリミタとして働く
  ( ) [ ] { } , : . ; @ = ->
  += -= *= /= //= %= @= &= |= ^= >>= <<= **=
  
- 他のトークンの一部として特殊な意味を持っていたり、字句解析にとって重要な意味を持つ。
  ' " # \

- 以下はPythonでは使われておらず、文字列リテラルやコメントの外部にある場合、無条件でエラーとなる。
  $ ? `

***** NEWLINE
***** INDENT
***** DEDENT
*** Data model
**** Object, Value, Type
**** The standard type hierarchy
***** None
- 単一の値のみを持つ。この値を持つオブジェクトはただ一つしか存在しない。
  組み込み名"None"でアクセスされる。
***** NotImplemented
- 単一の値のみを持つ。この値を持つオブジェクトはただ一つしか存在しない。
  組み込み名"NotImplemented"でアクセスされる。
***** Ellipsis
- 単一の値のみを持つ。この値を持つオブジェクトはただ一つしか存在しない。
  リテラル"..."または組み込み名"Ellipsis"でアクセスされる。
***** numbers.Number
****** numbers.Integral
******* Integers (int)
******* Booleans (bool)
****** numbers.Real (float)
****** numbers.Complex (complex)
***** Sequence
- 有限の順序集合(ordered set)を表現する。
  要素は非負の整数でインデクス化されている。
****** Immutable sequence
******* String
******* Tuple
******* Byets
****** Mutable sequence
******* Lists
******* Byte Arrays
***** Set types
- 順序のない、ユニークで不変なオブジェクトの有限集合を表見する。
****** Sets
- 可変な集合型。set()コンストラクタで作成され、後からadd()などのいくつかのメソッドで変更できる。
****** Frozen sets
- 不燃あ集合型。frozenset()コンストラクタによって生成される。
***** Mapping
- 任意のインデクス集合でインデクスされた、オブジェクトからなる有限の集合を表す。
****** Dictionary
- ほぼ任意のインデクスされたオブジェクトからなる有限の集合を表す。
***** Callable type
- 関数呼び出し操作を行うことができる型。
****** User-defined functions
******* Special attributes
******** __doc__
******** __name__
******** __qualname__
****** Instance methods
- クラス、クラスインスタンスと任意の呼び出し可能オブジェクト（通常はユーザ定義関数）を結びつける。
****** Generator functions
- yield文を使う関数もしくはメソッドをジェネレータ関数と呼ぶ。
  そのような関数が呼び出された時は常に、関数の本体を実行するのに使えるイテレータオブジェクトを返す。
****** Coroutine functions
- async defを使用して定義された関数やメソッドをコルーチン関数(coroutine function)と呼ぶ。
****** Built-in functions
- C関数へのラッパ。len()やmath.sin()など。
****** Built-in methods
- 実際には組み込み関数を別の形で隠蔽したもの。
****** Classes
****** Class instances
- Instances of arbitrary classes can be made callable by defining a __call__() method in their class.
  任意のクラスのインスタンスは、クラスで__call__()メソッドを定義することで呼び出し可能となる。
***** Module
***** Custom classes
***** Class instances
***** I/O objects (file objects)
- file objectは開かれたファイルを表す。
***** Internal types
****** Code objects
- バイトコンパイルされた実行可能なPythonコード（バイトコード・bytecode）を表現する。
  関数オブジェクトとの違いは、関数オブジェクトは関数のグローバル変数に対し明示的な参照を持っているのに対し、
  コードオブジェクトにはコンテキストがないということ。
****** Frame objects
- 実行フレーム(execution frame)を表す。実行フレームはトレースバックオブジェクト内に出現する。
  
****** Traceback objects
****** Slice objects
****** Static method objects
****** Class metod objects
**** Method name
**** Co-routine
*** Exec model
**** Program Structure
**** Naming and binding
**** Exceptions
*** Import System
**** importlib
**** Package
**** Search
**** Load
**** path based finder
*** Expression
**** Arithmetic conversion
**** Atom
***** Identifiers
***** Literals
***** Parenthesized forms
***** Displays for lists, sets and dicts
****** Listed explicitly
******* List displays
******* Set displays
******* Dictionary displays
****** Comprehension
- syntax
  - comprehension ::= expression comp_for
  - comp_for ::= "for" target_list "in" or_test [comp_iter]
  - comp_iter ::= comp_for | comp_if
  - comp_if ::= "if" expression_nocond [comp_iter]
- computed via a set of looping and filtering instructions
- ex
  - [ i for i in range(10) ]
  - a,b,c = [ False for i in range(3) ]

***** Generator expressions
***** Yield expressions
**** Primary
**** Awati expression
**** power operator
**** Unary arithmetic and bitwise operations
***** -
***** +
***** ~
- bitwise invert ビット単位反転
  xのビット単位反転は"-(x+1)"として定義されている。
**** Binary arithmetic operations
***** *
***** //
- floor division 切り捨て徐算
  
***** /
***** %
***** @
- 行列の遠山に対し使用される。Pythonの組み込み型はこの演算子を実装していない。
***** +
***** -
**** shifting operation
**** binary bitwise operation
**** comparing
**** boolean operaiton
**** Conditional Expressions 条件式
- 
  条件式、しばしば三項演算子、とも。もっとも優先度が低いPyhonの演算。
  "x if C else y"はCを評価し、trueの場合xが評価され値が返る。それ以外はyが評価され返る。

**** lambda
- syntax
  lambda_expr ::= "lambda" [parameter_list]: expression
**** list of expressions
**** evaluate order
**** primarity of operand
*** Simple statement
- 単一の論理行内に納められる文。
**** expression statement 式文
**** assignment statement
- syntax
  - assignment_stmt ::= (target_list "=")+ (expression_list | yield_expression)
  - target_list ::= target ("," target)* [","]
***** Augumented assignment statement
- 累積代入文は、二項演算と代入分を組み合わせて一つの文にしたもの。
- syntax
  - augmented_assignment_stmt ::= augtarget augop (expression_list | yield_expression)
  - augtarget
  - augop ::= "+=" | "-=" | "*=" | "@=" | "/=" | "//=" | "%=" | "**=" | ">>=" | "<<=" | "&=" | "^=" | "!="
**** assert
- syntax
  assert_stmt ::= "assert" expression ["," expression]
**** pass
- syntax
  pass_stmt ::= "pass"
  ヌル操作。構文的には文が必要だが、コードとしては何も実行したくない場合のプレースホルダとして有用。
**** del
- syntax
  del_stmt ::= "del" target_list
- 
  オブジェクトの削除。各々のターゲットを左から右へ順に再起的に削除する。
  
**** return
- syntax
  return_stmt ::= "return" [expression_list]
**** yield
- syntax
  yield_stmt ::= yield_expression
- 
  意味はyield expressionと同じ。yield文を用いるとyield式文で必要な確固を省略できる。
  
**** raise
**** break
**** continue
**** import
- 
  import          ::= "import" module ["as" name] ( "," module ["as" name] )*
                      | "from" relative_module "import" identifier ["as" name] ( "," identifier ["as" name] )*
                      | "from" relative_module "import" "(" identifier ["as" name] ( "," identifier ["as" name] )* ["," ")"
                      | "from" module "import" "*"
  module          ::= (identifier ".")* identifier
  relative_module ::= "."* module
  name            ::= identifier

- 基本の実行ステップ
  1. モジュールを見つけ出し、必要であればロードし初期化する
  2. import文が現れるスコープのローカル名前空間で名前を定義する。

- from形式での手順
  1. from節で指定されたモジュールを見つけ出し、必要であればロードし初期化する
  2. import節で指定されたそれぞれの識別子に対し以下の処理を行う
     1. インポートされたモジュールがその識別子名の属性を持っているかを確認する
     2. 持っていなかった場合はその識別子名でサブモジュールのインポートを試み、再度その属性がインポートされたモジュールにあるか確認する
     3. 属性が見つからない場合はImportErrorを送出
     4. 属性が見つかった場合は、as節があるならそこの名前、そうでないなら属性名を使って、その値への参照がローカル名前空間に保存される

**** global
**** nonlocal
*** Compound statement
- 複合文には他の文（のグループ）が入る。
  中に入っている他の文の実行の制御に何らかのやり方で影響を及ぼす。
**** if
- syntax
  if_stmt ::= "if" expression ":" suite
              ( "elif" expression ":" suite )*
              ["else" ":" suite]

**** while
- syntax
  while_stmt ::= "while" expression ":" suite
                 ["else" ":" suite]

- 
  式の値が真である間、実行を繰り返す。
  式が偽であれば、else節がある場合にはそれを実行し、ループを終了する。

**** for
- syntax
  for_stmt ::= "for" target_list "in" expression_list ":" suite
               ["else" ":" suite]

- 
  シーケンス（文字列、タプルまたはリスト）や、その他の反復可能なオブジェクト(iterable object)内の要素に渡って反復処理を行うために使われる。

**** try
- 
  try_stmt  ::= try1_stmt | try2_stmt
  try1_stmt ::= "try" ":" suite
                ("except" [expression ["as" identifier]] ":" suite) +
                ["else" ":" suite]
                ["finally" ":" suite]
  try2_stmt ::= "try" ":" suite
                "finally" ":" suite
**** with
**** function defenition
- 
  funcdef        ::=
  decorators     ::=
  decorator      ::=
  dotted_name    ::=
  parameter_list ::= 
  parameter      ::=
  defparameter   ::=
  funcname       ::=

- 
  ユーザ定義関数オブジェクトを定義する、実行可能な分。
  関数定義を実行すると、現在のローカルな名前空間で関数名を関数オブジェクトに束縛する。
  
**** class defenition
- 
  classdef    ::=
  inheritance ::=
  classname   ::=

- 
  クラスオブジェクトを定義する、実行可能な文。
  
**** co-routine
***** co-routine function definition
***** async for
***** async with
*** Top Level
** Library
*** Standard Library
**** built-in
***** Function
****** abs()
****** all()
****** any()
****** chr(i)
- Unicodeコードポイントが整数iである文字を表す文字列を返す。ord()の逆。
****** dir()
- dir([object])
  引数がない場合、現在のローカルスコープにある名前のリストを返す。
  引数がある場合、そのオブジェクトの有効な属性のリストを返そうと試みる。
  
****** enumerate()
- enumerate(iterable, start=0)
  erumerateオブジェクトを返す。
  iterableは、シーケンスかiteratorか、あるいはイテレーションをサポートするその他のオブジェクトでなければならない。
  
****** help()
- help([obeject])
  組み込みヘルプシステムを起動する。
  引数が与えられていない場合、インタプリタコンソール上で起動する。
  
****** input()
- input([prompt])
  引数promptが存在すれば、それが末尾の改行を除いて標準出力に書き出される。
  次に、関数から1行を読み込み、文字列に変換して返す。
- 例）
  
****** list()
- class list([iterable])
  実際には関数でなくミュータブルなシーケンス型。
****** map()
- map(function, iterable, ...)
  functionを、結果を返しならがiterableのすべての要素に適用するイテレータを返す。

****** max()
- 
  max(iterable, *[, key, default])
  max(arg1, arg2, *args[, key])
- 
  iterableの中で最大の要素、または2つ以上の引数の中で最大のものを返す。

****** print()
- print(*objects, sep='', end='\n', file=sys.stdout)
  object(複数でも可)をsepで区切りながらストリームfileに表示し、最後にendを表示する。
  sep, end, fileが与えられる場合、キーワード変数として与えられる必要がある。
****** open()
- open(name[, mode[, buffering]]
  ファイルを開いて、fileオブジェクトを返す。開けない場合IOErrorが送出される。
  nameは開きたい名前で、modeはファイルをどのようにして開くかを指定する。

  - mode
    - r
    - w
    - a : 追加書き込み
    - b : バイナリファイルを開く場合
    - r+
    - w+
    - a+
****** ord(c)
- 1文字のUnicode文字を表す文字列に対し、その文字のUnicodeコードポイントを表す整数を返す。chr()の逆。
****** range()
- range(stop)
- range(start, stop[, step])
  実際には関数でなくイミュータブルなシーケンス型。
****** round()
- round(number[, ndigits])
  numberを小数点以下ndigits桁に丸めた浮動小数点数の値を返す。
  ndigitsが省略された場合、入力に最近節の整数を返す。
  偶数を選ぶ方に丸められる。（例：0.5と-0.5は0, 1.5は2に丸められる）
****** type()
- class type(name, bases, dict)
  引数が1つだけの場合、objectの型を返す。返り値は型オブジェクトで、一般にobjcet.__class__によって返されるのと同じオブジェクト。
  
****** zip(*iterables)
- それぞれのイテラブルから集めたイテレータを作る。
  この関数はタプルのイテレータを返し、そのi番目のタプルは引数シーケンスまたはイテラブルそれぞれのi番目の要素を含む。
***** Non-essential Function
***** Constant
****** False
****** True
****** none
****** NotImplemented
****** Ellipsis
****** __debug__
****** Constants added by site module
******* quit
******* exit
******* copyright
******* license
******* credit
***** Type
****** Truth Value Testing
****** Boolean Operations
- and, or, not
******* and
- x and y
  xが偽ならx, そうでなければy
******* or
- x or y
  xが偽ならy, そうでなければx
******* not
- not x
  xが偽ならTrue、そうでなければFales
****** Comparisons
****** Numeric Types
- int, float, complex
******* Bitwise Operations on Integer
******* Aditional Methods on Integer
******* Additional Methods on Float
****** Iterator Types
****** Sequence Types
- basically: list, tuple, range
******* Sequence Operations
******** x in s
******** x not in s
******** s + t
******** s * n, n * s
******** s[i]
******** s[i:j]
******** s[i:j:k]
******** len(s)
******** min(s)
******** max(s)
******** s.index(x0,i0,j[[)
******** s.count(x)
******* Type
******** Immutable
******** Mutable
******* Basic Sequences
******** List
******** Tuple
******** Range
******* Text Sequences
- str
******** Class
- 
  - class str(object='')
  - class str(object=b'', encoding='utf-8', erros='strict')
- 
  objectの文字列版を返す。objectが与えられなかった場合、空文字が返される。
  
******** Methods
********* str.capitalize()
********* str.casefold()
********* str.center(width[, fillchar])
********* str.count(sub[, start[, end]])
********* str.find(sub[, start[, end]])
********* str.isalnum()
- 文字列中のすべての文字が英数字で、かつ1文字以上あるなら真を、そうでなければ偽を返す。
********* str.isdecimal()
********* str.isdigit()
- 文字列中のすべての文字が数字で、かつ1文字以上あるなら真を、そうでなければ偽を返す。
  数字は、十進数字と、互換上付き数字のような特殊操作を必要とする数字を含む。
********* str.isidentifier()
********* str.islower()
- 文字列中の大小文字の区別のある文字すべてが小文字で、かつ大小文字の区別のある文字が1文字以上あるなら真を、そうでなければ偽を返す。
********* str.isnumeric()
- 文字列中のすべての文字が数を表す文字で、かつ1文字以上あるなら真を、そうでなければ偽を返す。
  数を表す文字は、数字とUnicodeの数値プロパティを持つすべての文字を含む。
********* str.isprintable()
********* str.isspace()
********* str.istitle()
********* str.isupper()
- 文字列中の大小文字の区別のある文字すべてが大文字で、かつ大小文字の区別のある文字が1文字以上あるなら真を、そうでなければ偽を返す。
********* str.join(iterable)
- イテラブルiterable中の文字列を結合した文字列を返す。
  セパレータは、このメソッドを提供する文字列。
********* str.lower()
******* Binary Sequences
- bytes, bytearray, memoryview
******** bytes
******** bytearray
****** Set Types
- set, frozenset
****** Mapping Types
- dict
****** File Object
- 
  Cのstdioパッケージを使って実装されており、組み込み関数のopen()で生成することができる。
  
******* Methods
******** file.close()
******** file.flush()
******** file.read()
- file.read([size])
  最大でsizeバイトをファイルから読み込む。
  size引数が負であるか省略された場合、EFに到達するまでのすべてのデータを読み込む。
******** file.readline()
******** file.readlines()
******** file.seek()
- file.seek(offset[, whence])
  ファイルの現在位置を設定する。

- whence
  - 0, os.SEEK_SET
    絶対位置指定。デフォルト。
  - 1, os.SEEK_CUR
    現在のファイル位置から相対的にseekする
  - 2, os.SEEK_END
    ファイルの末端から相対的にseekする
******** file.write()
- file.write(str)
  文字列をファイルに書き込む。戻り値はない。
******** file.name
- 
  ファイルオブジェクトがopen()を使って生成された時のファイルの名前。
******** file.mode
- 
  ファイルのI/Oモード。
  Version 2.6で追加。
****** memoryview type
****** Context Manager Types
****** Other Built-in Types
******* Modules
******* Classes, Class Instances
******* Functions
******* Methods
******* Code Objects
******* Type Objects
******* The Null Object
******* The Ellipsis Object
******* Boolean Values
******* Internal Objects
****** Special Attributes
******* ojbect.__dict__
- オブジェクトの（書き込み可能な）属性を保存するために使われる辞書またはその他のマッピングオブジェクト。
******* instance.__class__
- クラスインスタンスが属しているクラス。
******* class.__bases__
- クラスオブジェクトの基底クラスのタプル
******* class.__name__
- クラスまたは型の名前。
******* class.__qualname__
- クラスまたほ型のqualified name。
******* class.__mro__
- メソッドの解決寺に基底クラスを探索するときに考慮されるクラスのタプル
******* class.mro()
- クラスのインスタンス化時に呼ばれ、結果は__mro__に格納される。
  メタクラスによって、そのインスタンスのメソッド解決の順序を上書きされる可能性がある。
******* class.__subclasses__()
- それぞれのクラスは、それ自身の直接のサブクラスへの弱参照を保持する。
  それらの山椒のうち、生存しているもののリストを返す。
***** Exception
**** 文字列処理
***** string
****** Const
******* string.ascii_letters
- ascii_lowercaseとascii_uppercaseを合わせたもの。
******* string.ascii_lowercase
- 小文字'abcdefghijklmnopqrstuvwxyz'。
******* string.ascii_uppercase
- 大文字'ABCDEFGHIJKLMNOPQRSTUVWXYZ'。
******* string.digits
******* string.hexdigits
***** re
- 正規表現操作
  正規表現マッチング操作を提供
****** Syntax
****** Module Contents
******* re.compile()
- re.compile(pattern, flag=0)
  正規表現パターンを正規表現オブジェクトにコンパイルする。

******* re.search()
- re.search(pattern, string, flags=0)
  string全体を走査して、正規表現patternがマッチを発生する最初の位置を探して、対応するMatchObjectインスタンスを返す。
  もし文字列内にマッチする位置がない場合Nneを返す。
******* re.match()
- re.mathch(pattern, string, flags=0)
  stringの先頭で0個以上の文字が正規表現patternとマッチすれば、MatchObjectインスタンスを返す。
****** re.RegexObject
- class re.RegexObject
******* Methods
******** search()
****** re.MatchObject
******* Methods
******** expand()
- expand(template0

******** start(), end()
- start([group]), end([group])
  groupとマッチした部分文字列の先頭と末尾のインデックスを返す。
  マッチしたサブ文字列は"m.string[m.start(g):m.end(g)]"で
***** difflib
- 差分の計算を助ける

****** class difflib.SequenceMatcher

****** class difflib.Differ

******* compare
****** class difflib.HtmlDiff
**** データ型
***** collections
- 汎用の組み込みコンテナdict, list, setおよびtupleに代わる、特殊なコンテナデータ型を実装している。

****** Classes
******* class collections.defaultdict([default_factory[, ...]])
******* class collections.Counter([iterable-or-mapping])
- 
  ハッシュ可能なオブジェクトをカウントするdictのサブクラス。
  要素を辞書のキーとして保存し、そのカウントを辞書の値として保存する。
******** Methods
********* elements()
- それぞれの要素を、そのカウント分の回数だけ繰り返すイテレータを返す。
********* most_common([n])
- 最も多いn要素を、カウントが多いものから少ないものまで順に並べたリストを返す。
********* subtract([iterable-or-mapping])
**** 数値と数学モジュール
**** ファイルとディレクトリへのアクセス
***** glob
- Unix形式のパス名のパターン展開
****** glob
- glob.glob(pathname)
  pathnameにマッチする空の可能性のあるパス名のリストを返す。
****** iglob
- glob.iglob(pahtname)

**** データの永続化
**** データ圧縮とアーカイブ
**** ファイルフォーマット
**** 暗号関連のサービス
**** 汎用オペレーティングシステムサービス
***** os
****** Process Parameters
****** File Object Creation
****** File Descriptor Operations
****** Files and Directories
******* os.chdir()
- os.chdir(path)
  現在の作業ディレクトリをpathに設定する。
  環境 : Unix, Windows
******* os.getcwd()
- 
  現在の作業ディレクトリを表す文字列を返す。
  環境 : Unix, Windows
******* os.listdir()
- os.listdir(path)
  pathで指定されたディレクトリ内のエントリ名が入ったリストを返す。
  利用できる環境 : Unix, Windows
****** Process Management
****** Miscellaneaus System Information
****** Miscellaneaus Function
**** 並列実行
***** subprocess
- サブプロセス管理
****** run()
**** プロセス間通信とネットワーク
**** インターネット上のデータの操作
**** 構造化マークアップツール
**** インターネットプロトコルとサポート
***** urllib
- URLを扱うモジュール群
***** urllib.request
- URLを開くための拡張可能なライブラリ
  
****** 関数
******* urllib.request.urlopen(url,data=None, ...)
******* urllib.request.install_opener(opener)
******* urllib.request.build_opener([handler, ...[)
***** urllib.response
***** urllib.parse
***** urllib.error
- 
  urllib.requestによってなげられる例外を定義している。基底クラスはURLError。


****** exception urllib.error.URLError
- 
  ハンドらが何らかの問題に遭遇した場合、この例外（もしくは派生した例外）を創出する。
  OSErrorのサブクラス。

- reason
  エラーの理由。メッセージ文字列あるいは他の例外インスタンス。

****** exception urllib.error.HTTPError
- 
  例外であると同時に、例外ではないfile-likeな戻り値を返す関数(urlopen()の戻り値と同じ)。
  URLErrorのサブクラス。
- code
  HTTPステータスコード。
- reason
  通常エラーの説明文
- headers
  HTTPErrorの原因となったHTTPリクエストのHTTPレスポンスヘッダ。

**** マルチメディアサービス
**** 国際化
**** プログラムのフレームワーク
**** Tkを用いたグラフィカルユーザインターフェース
**** 開発ツール
**** デバッグとプロファイル
**** ソフトウェア・パッケージと配布
**** Pythonランタイムサービス
***** sys
- システムパラメータと関数
****** sys.argv
- 
  Pythonスクリプトに渡されたコマンドライン引数のリスト。
  argv[0]はスクリプトの名前となるが、フルパスかどうかはOSによる。

****** sys.exit([arg])
- Pythonを終了する。exit()はSystemExitを送出するので、捕捉可能。
****** sys.stdin, sys.stdout sys.stderr
- 
  インタープリタの標準入力・標準出力・標準エラー出力に対応するファイルオブジェクト。
  stdinはスクリプトの読み込みを除く全ての衆力処理で使用され、input()やraw_input()もstdinから読み込む。

****** sys__stdin__, sys.__stdout__, sys.__stderr__
- 
  それぞれ起動時のstdin, stdout, stderrの値を保持する。終了処理時に利用される。

****** sys.version
- 
  インタプリタのバージョン番号の他、ビルド番号や使用コンパイラなどの情報を示す文字列。
  この文字列はPython対話型インタプリタが起動した時に表示される。
  バージョン情報はここから抜きださずに、version_infoおよびplatformが提供する関数を使う。
****** sys.version_info
- 
  バージョン情報を表す5個のタプル : major, minor, micro, releaselevel, serialが表示される。
  
**** カスタムPythonインタプリタ
**** 制限実行
**** モジュールのインポート
**** Python言語サービス
**** Pythonコンパイラパッケージ
**** 各種サービス
**** MSWin固有
**** Usix固有
**** MacOSX固有
*** Beautiful Soup
** Python 2.x
*** Tutorial
**** 実行
- python
- python <program-name>
- python -c <command-name> [arg] ...

**** ソースコードの文字コード
- 
  # -*- coding: encoding -*-
**** 文字列
- immutable
  変更不可能。
- slice
  word[0:2]
**** 制御フロー
***** if
- 
  - 例
    if x < 0: 
        x = 0;
    elif x == 0:
        print 'Zero'
    else:
        print 'More'

***** for
- 
  - 例
    for w in words:
        print w, len(w)
    
***** range
- 
  - 例
    range(0, 10, 3)
    
***** break, continue, else
- 
  ループにelseが存在する。ループが終了した際に実行されるが、breakで抜けた場合は実行されない。
  continueは次のイテレーションを実行する
  - 例
    for n in range(2, 10):
        for x in range(2, n):
            if n % x == 0:
                print n, 'equals', x, '*', n/x
                break
        else:
            print n, 'is a prime number'
    
***** pass
- 
  何もしない。構文上何か書かなければいけない時に書く。
  - 例
    class MyEmptyClass:
        pass

***** 関数定義
- 
  def fib(n):
      definition
  
****** default argument
- 
  - 例
    - def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):
          (def)
****** keyword argument
- 
  kwarg=valueという形式のキーワード引数を使って呼び出すことができる。
  - 例
    - def parrot(voltage, stage='a stiff', action='voom', type='Norweign Blue'):
          (def)
      
****** unpack
- 
  *演算子を使ってリストやタプルから引数をアンパックする。
  **オペレータを使って辞書でもキーワード引数を渡すことができる。
  - 例
    args = [3, 6]
    range(*args)
****** lambda
- 
  - 例
    def make_incrementor(n):
        return lambda x: x + n

*** Command line
- -?, -h, --help
  オプションの使い方を出力する。
- -V, --version
  バージョン番号を表示する。
- -i
  実行後にインタラクティブモードに入る。
- -c <command-name>
- -m <module-name>
*** Environmental variables
**** PYTHONHOME
**** PYTHONPATH
*** Language
**** Parser
***** line structure
****** logical line
****** physical line
****** Comments
- 
  ハッシュ"#"から始まり、同じ物理行の末端で終わる。
****** encoding declaration
****** 明示的な行継続
****** 非明示的な行継続
****** 空行
****** インデント
****** トークン間の空白
***** Token
***** Identifier
***** Keyword
***** Literal
****** Strings literal
****** Concatenation
****** Number literal
****** Integer literal
****** float literal
****** imaginary literal
****** operator
****** delimiter

**** Data model
**** Exec model
**** Expression
***** Arithmetic conversion
***** Atom
***** Primary
***** Awati expression
***** power operator
- power ::= await ["**" u_expr]
****** **
***** unary arithmetic and bitwise operation
- u_expr ::= power | "-" u_expr | "+" u_expr" | "~" u_expr
****** -
****** +
****** ~ 反転
- 整数引数をビット単位反転(bitwise invert)したものを与える。
***** binary arithmetic operation
- m_expr ::= u_expr | m_expr "*" u_expr | m_expr "@" m_expr |
             m_expr "//" u_expr | m_expr "/" u_expr | m_expr "%" u_expr
- a_expr ::= m_expr | a_expr "+" m_expr | a_ekpr "-" m_expr
****** *
- multiplication 乗算

****** @
- 行列の乗算

****** /
- division 除算
****** //
- floor division 切り捨て除算
  除算にfloorを適用したもの。
****** %
- modulo 剰余
****** +
****** -
***** shifting operation
***** binary bitwise operation
***** comparing
***** boolean operaiton
***** Conditional Expressions
***** lambda
***** list of expressions
***** evaluate order
***** primarity of operand
**** Simple statement
**** Compound statement
***** if
***** while
***** for
***** try
***** with
**** Top Level
*** Library
**** Standard Library
***** built-in
****** Function
******* abs()
******* all()
******* any()
******* open()
- open(name[, mode[, buffering]]
  ファイルを開いて、fileオブジェクトを返す。開けない場合IOErrorが送出される。
  nameは開きたい名前で、modeはファイルをどのようにして開くかを指定する。

  - mode
    - r
    - w
    - a : 追加書き込み
    - b : バイナリファイルを開く場合
    - r+
    - w+
    - a+
******* print()
- print(*objects, sep='', end='\n', file=sys.stdout)
  object(複数でも可)をsepで区切りながらストリームfileに表示し、最後にendを表示する。
  sep, end, fileが与えられる場合、キーワード変数として与えられる必要がある。

****** Non-essential Function
****** Constant
****** Type
******* Truth Value Testing
******* Boolean Operations
******* Comparisons
******* Numeric Types
******** Bitwise Operations on Integer
******** Aditional Methods on Integer
******** Additional Methods on Float
******* Iterator Types
******* Sequence Types
- str, unicode, list, tuple, bytearray, buffer, xrange
******** String Method
********* str.split()
- str.split([sep[, maxsplit]])
  sepを単語の境界として文字列を単語に分解し、分割された単語からなるリストを返す。
  
******* Set Types
******* Mapping Types
******* File Object
- 
  Cのstdioパッケージを使って実装されており、組み込み関数のopen()で生成することができる。
  
******** Methods
********* file.close()
********* file.flush()
********* file.read()
- file.read([size])
  最大でsizeバイトをファイルから読み込む。
  size引数が負であるか省略された場合、EFに到達するまでのすべてのデータを読み込む。
********* file.readline()
********* file.readlines()
********* file.seek()
- file.seek(offset[, whence])
  ファイルの現在位置を設定する。

- whence
  - 0, os.SEEK_SET
    絶対位置指定。デフォルト。
  - 1, os.SEEK_CUR
    現在のファイル位置から相対的にseekする
  - 2, os.SEEK_END
    ファイルの末端から相対的にseekする
********* file.write()
- file.write(str)
  文字列をファイルに書き込む。戻り値はない。
********* file.name
- 
  ファイルオブジェクトがopen()を使って生成された時のファイルの名前。
********* file.mode
- 
  ファイルのI/Oモード。
  Version 2.6で追加。
******* memoryview type
******* Context Manager Types
******* Other Built-in Types
******** Modules
******** Classes, Class Instances
******** Functions
******** Methods
******** Code Objects
******** Type Objects
******** The Null Object
******** The Ellipsis Object
******** Boolean Values
******** Internal Objects
****** Exception
***** 文字列処理
****** re
- 正規表現操作
  正規表現マッチング操作を提供
******* Syntax
******* Module Contents
******** re.compile()
- re.compile(pattern, flag=0)
  正規表現パターンを正規表現オブジェクトにコンパイルする。

******** re.search()
- re.search(pattern, string, flags=0)
  string全体を走査して、正規表現patternがマッチを発生する最初の位置を探して、対応するMatchObjectインスタンスを返す。
  もし文字列内にマッチする位置がない場合Nneを返す。
******** re.match()
- re.mathch(pattern, string, flags=0)
  stringの先頭で0個以上の文字が正規表現patternとマッチすれば、MatchObjectインスタンスを返す。
******* re.RegexObject
- class re.RegexObject
******** Methods
********* search()
******* re.MatchObject
******** Methods
********* expand()
- expand(template0

********* start(), end()
- start([group]), end([group])
  groupとマッチした部分文字列の先頭と末尾のインデックスを返す。
  マッチしたサブ文字列は"m.string[m.start(g):m.end(g)]"で
****** difflib
- 差分の計算を助ける

******* class difflib.SequenceMatcher

******* class difflib.Differ

******** compare
******* class difflib.HtmlDiff
***** データ型
***** 数値と数学モジュール
***** ファイルとディレクトリへのアクセス
****** glob
- Unix形式のパス名のパターン展開
******* glob
- glob.glob(pathname)
  pathnameにマッチする空の可能性のあるパス名のリストを返す。
******* iglob
- glob.iglob(pahtname)

***** データの永続化
***** データ圧縮とアーカイブ
***** ファイルフォーマット
***** 暗号関連のサービス
***** 汎用オペレーティングシステムサービス
****** os
******* Process Parameters
******* File Object Creation
******* File Descriptor Operations
******* Files and Directories
******** os.chdir()
- os.chdir(path)
  現在の作業ディレクトリをpathに設定する。
  環境 : Unix, Windows
******** os.getcwd()
- 
  現在の作業ディレクトリを表す文字列を返す。
  環境 : Unix, Windows
******** os.listdir()
- os.listdir(path)
  pathで指定されたディレクトリ内のエントリ名が入ったリストを返す。
  利用できる環境 : Unix, Windows
******* Process Management
******* Miscellaneaus System Information
******* Miscellaneaus Function
***** オプションのオペレーティングシステムサービス
***** プロセス間通信とネットワーク
***** インターネット上のデータの操作
***** 構造化マークアップツール
***** インターネットプロトコルとサポート
***** マルチメディアサービス
***** 国際化
***** プログラムのフレームワーク
***** Tkを用いたグラフィカルユーザインターフェース
***** 開発ツール
***** デバッグとプロファイル
***** ソフトウェア・パッケージと配布
***** Pythonランタイムサービス
****** sys
- システムパラメータと関数
******* sys.argv
- 
  Pythonスクリプトに渡されたコマンドライン引数のリスト。
  argv[0]はスクリプトの名前となるが、フルパスかどうかはOSによる。

******* sys.stdin, sys.stdout sys.stderr
- 
  インタープリタの標準入力・標準出力・標準エラー出力に対応するファイルオブジェクト。
  stdinはスクリプトの読み込みを除く全ての衆力処理で使用され、input()やraw_input()もstdinから読み込む。

******* sys__stdin__, sys.__stdout__, sys.__stderr__
- 
  それぞれ起動時のstdin, stdout, stderrの値を保持する。終了処理時に利用される。

***** カスタムPythonインタプリタ
***** 制限実行
***** モジュールのインポート
***** Python言語サービス
***** Pythonコンパイラパッケージ
***** 各種サービス
***** MSWin固有
***** Usix固有
***** MacOSX固有
** Style
*** PEP 8
- インデントは空白4つを使い、タブは使わない。
- ソースコードの幅が79文字を超えないように行を折り返すこと
- 関数やクラスや関数内の大きめのコードブロックの区切りに空行を使う
- 可能なら、コメントは行に独立で書く
- docstringを使う
- 演算子の前後とコンマの後には空白を入れ、括弧内のすぐ内側には空白を入れないこと
- クラスや関数には一貫性のある名前を付ける。
  CamelCaseをクラス名に使い、lower_case_with_underscoresを関数名やメソッドに使う。
- 風変わりなエンコーディングは使わない
**** Link
- https://www.python.org/dev/peps/pep-0008/

** pip
- 
  Pythonにおけるパッケージ管理システム。
*** command
**** help
- 
  ex) pip help
      pip help install

**** search
- 
  Python Package Index(pypi)にあるパッケージをsearchコマンドで検索可能。

**** install
- 
  インストールを行う。

**** freeze
- 
  書き出しておいたパッケージリストを全部インストールする。

**** show
- 
  パッケージの詳細を確認できる。

*** etc
**** install
- 
  githubのget-pip.pyをパイプでpython呼び出しして実行した。
  ただし、pythonをzlib付でビルドしていないとだめらしく、
  configure時に"--with-zlib-dir=/usr/local/lib"とか付けた。
  [[https://github.com/pypa/pip/issues/1919][zipimport.ZipImportError#1919]]

**** Link
- [[https://pip.pypa.io/en/latest/index.html][pip]]
- [[http://tdoc.info/blog/2014/01/15/pip.html][pipの使い方(2014/1バージョン) - そこはかとなく書くよん。]]

** Link
- [[http://docs.python.jp/2/tutorial/][Pythonチュートリアル 2]]
- [[http://docs.python.jp/3.5/index.html][Python 3.5.1 ドキュメント]]
** Glossary
*** Mutable, Immutable
- Mutable
  値を変更できるオブジェクト。
  dictやlistなど。
- Immutable
  生成後に値を変更できないオブジェクト。
  数値型、文字列型、タプル型のインスタンスなど
*** Container
- 他のオブジェクトに対する参照をもつオブジェクト。
  Tuple, List, Dictionaryなど。
** Memo
*** old
- osでよく使うコマンド
  os.getcwd, os.chdir

- time.sleep
  time.sleep(3)で3秒停止。

- strin.rstrip()
  string.rstrip()で末尾の改行を削除

- string.find()
  string.find(target)で、string内のtargetの位置を返す。
  'abcde'.find('b')で1(int)が返る。

- shutil.copy
copyはshutil(shutil.copy, shutil.copytree, shutil.copyfile等)、

- os.rename
  renameはos(os.rename)

- 終了：
  Ctrz(Unix系 Ctrd)
  quit()
*** shellコマンド互換
- cd  : os.chdir(path)
- ls  : os.listdir(path), glob.glob(pattern)
- pwd : os.getcwd()
*** 読み書き
- ファイルを開いて読む
  - ex
    for line in open('text.txt', 'r'):
        print line

- 改行コードを除く場合
  - ex
    print line[:-1]

- ファイルを丸ごと読む
  - ex
    allLine = open('test.txt').read()

- 多くのファイルを読む
  - ex
    for file in glob.glob('*.txt'):
        for line in open(file, 'r'):
            print line

*** コメントアウト
- #
  (あとで文法に移してください)
  
*** 前回表示結果
- 
  "_"に格納されている。
  - 例
    >>>price=100.50
    >>>price * tax
    12.5624
    >>>price + _
    113.9625 # 前回の値が足されている。

*** 外部プログラムの実行
- 
  subprocessの利用を推奨。
  - 例
    import subprocess
    subprocess.call('ls')

- 
  osやcommandsモジュールは推奨されていない。
  - 例
    os.system('ls')
    commands.getstatusoutput('ls')
  
