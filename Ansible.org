* Ansible

** command

*** ansible
- 
  Usage: ansible <host-pattern> [option]

**** option

- -a MODULE_ARGS, --args=MODULE_ARGS
  module argument

- -m MODULE_NAME, --module-name=MODULE_NAME
  module name to execute (default=command)

- -S, --su
  run operations with su

- -s, --sudo
  run operations with sudo

- -u REMOTE_USER, --user=REMOTE_USER
  connect as this user (default=current-user like vagrant)

*** ansible-playbook

**** option
- -C, --check
  don't make any changes; instead, try to predict some of the cahnges that may occur
  dry run

- --list-tasks
  list all tasks that would be executed
  taskコマンドの確認

- --list-hosts
  対処サーバの確認

- --syntax-check
  perform a syntaxcheck on the playbook, but do not execute it
  書式確認

**** playbook
- hosts
  対称のホストまたはグループを指定する。glob[*]も使用可能。
  カンマ区切りもYAMLのリスト指定もOK。

- sudo
  sudoを使って実行する。
  デフォルトではrootとしての実行だが、別途sudo_userを指定することで別のユーザとしても実行可能。

- tasks
  実行する処理を定義する。
  nameは必須でない。
  モジュール名に続きオプションをとる。

*** ansible-doc
- 
  Ansible Moduleのドキュメントが読めるコマンド。
  ex) ansible-doc ping

- -l
  moduleをリスト表示する。

*** ansible-pull

*** ansible-galaxy

*** ansible-vault
- 
  暗号化されたYAMLファイルを作る。

** module
- 
  Ansibleで実行できる機能。
  ansible-doc -lで一覧を取得できる。
  たくさんあるので(ansible-doc -l | wc -lの結果は242)、無理して覚えない。

*** Cloud Modules

*** Commands Modules

**** command

**** raw

**** script

**** shell
*** Database Modules
**** Misc
**** Mysql
**** Postgresql

*** Files Modules

*** Inventory Modules

**** add_host

**** group_by

*** Messaging Modules

*** Network Modules

*** Notification Modules

*** Packaging Modules

**** Language

***** composer
***** cpanm
***** easy_install
***** gem
***** npm
***** pip

**** Os

***** apt
***** apt_key
***** apt_repository
***** apt_rpm
***** homebrew
***** homebrew_cask
***** homebrew_tap
***** layman
***** macports
***** opnbsd_pkg
***** opkg
***** pacman
***** pkgin
***** pkgng
***** pkgutil
***** portage
***** portinstall
***** redhat_subscription
***** nhn_channel
***** rhn_register
***** rpm_key
***** svr4pkg
***** swdepot
***** urpmi
***** yum
***** zypper
***** zypper_repository

*** Source Control Modules

**** bzr

**** git

**** github_hooks

**** hg

**** subversion

*** System Modules

**** alternatives
**** at
**** authorized_key
**** capabilities
**** cron
**** crypttab
**** debconf
**** facter
**** filesystem
**** firewalld
**** getent
**** glusterfs
**** group
**** hostname
**** kernel_blacklist
**** locale_gen
**** Ivg
**** Ivol
**** modprobe
**** mount
**** ohai
**** open_iscsi
**** ping
**** seboolean
**** selinux
**** service
**** setup
**** sysctl
**** ufw
**** user
**** zfs

*** Utilities Modules

*** Web Infrastructure Modules

**** apache2_module

**** django_manage

**** ejabberd_user

**** htpasswd

**** jboss

**** jira

**** supervisorctl
*** Windows Modules

** inevntory file
- 
  ansibleはインベントリファイルに書かれたホストにしかアクセスしない。
  -i でインベントリファイルを指定して実行する。
  デフォルトでは"/etc/ansible/hosts"を読む。

  対称は複数でもよく、またクラウドからとってくることもできる。

  フォーマットはINIフォーマットで書かれる。

*** group
- 
  ブラケット[]内にグループ名を記述する。複数グループを指定可能。
  SSH標準以外のポートを指定するには、ホストネームの後コロン:を置いた後ろに
  ポート番号を指定できる。
  ex) [webservers]
      badwolf.example.com:5309

*** alias
- 
  静的IPを使ってエイリアスを付ける場合、以下のようにすることが可能。
  ex) jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50

*** 複数指定
- 
  複数をまとめて指定可能。
  ex) www[01:50].example.com
      db-[a:f].example.com

*** connection
  コネクションタイプを以下のように指定可能。
  ex) localhost          ansible_connection=local
      other.example.com  ansible_connection=ssh    ansible_ssh_user=mpdehaan

*** Groups of Groups, Group Variables
- 
  グループのグループや、それぞれに対しグループに対して変数を設定可能。
  ex) [atlanta]
      host1
      host2
      
      [raleigh]
      host2
      host3
      
      [southeast:children]
      atlanta
      raleigh]
      
      [southeast:vars]
      soe_server=foo.southeast.example.com
      halon_system_timeout=30
      self_destruct_countdown=60
      escape_pods=2
      
      [usa:children]
      southeast
      northeast
      southwest
      northwest

*** Splitting Out
- 
  hostとgroupについては、別ファイルにして指定のフォルダに格納することで読み込むことができる。
  ex) /etc/ansible/group_vars/raleigh
      /etc/ansible/group_vars/webservers
      /etc/ansible/host_vars/foosball
  
  更に、各グループやホスト名のディレクトリを作成して、配下にファイルを配備しても読み込んでくれる。
  ex) /etc/ansible/group_vars/raleigh/db_settrings
      /etc/ansible/group_vars/raleigh/cluster_settings

*** Behavioral Inventory Parameters
- ansible_ssh_host
  The name of the host to connect to, if different from the alias you wish to give to it.

- ansible_ssh_port
  The ssh port number, if not 22

- ansible_ssh_user
  The default ssh user name to use.

- ansible_ssh_pass
  The ssh password to use (this is insecure, we strongly recommend using --ask-pass or SSH keys)

- ansible_sudo_pass
  The sudo password to use (this is insecure, we strongly recommend using --ask-sudo-pass)

- ansible_sudo_exe (new in version 1.8)
  The sudo command path.

- ansible_connection
  Connection type of the host.
  Candidates are local, ssh or paramiko.
  The default is paramiko before Ansible 1.2,
  and 'smart' afterwards which detects whether usage of 'ssh'
  would be feasible based on whether ControlPersist is supported.

- ansible_ssh_private_key_file
  Private key file used by ssh.
  Useful if using multiple keys and you don't want to use SSH agent.

- ansible_shell_type
  The shell type of the target system.
  By default commands are formatted using 'sh'-style syntax by default.
  Setting this to 'csh' or 'fish' will cause commands executed on target systems
  to follow those shell's syntax instead.

- ansible_python_interpreter
  The target host python path.
  This is useful for systems with more than one Python or not located at "/usr/bin/python" such as \*BSD, 
  or where /usr/bin/python is not a 2.X series Python.
  We do not use the "/usr/bin/env" mechanism as that requires the remote user's path to be set right
  and also assumes the "python" executable is named python,
  where the executable might be named something like "python26".

- ansible\_\*\_interpreter
  Works for anything such as ruby or perl and works just like ansible_python_interpreter.
  This replaces shebang of modules which will run on that host.

** directory layout
*** [[http://docs.ansible.com/playbooks_best_practices.html#directory-layout][directory-layout best practice]]
- 
  - production         # inventory file for production servers
  - stage              # inventory file for stage environment
   
  - group_vars/
    - group1           # here we assign variables to particular groups
    - group2           # ""
  - host_vars/
    - hostname1        # if systems need specific variables, put them here
    - hostname2        # ""
   
  - library/           # if any custom modules, put them here (optional)
  - filter_plugins/    # if any custom filter plugins, put them here (optional)
   
  - site.yml           # master playbook
  - webservers.yml     # playbook for webserver tier
  - dbservers.yml      # playbook for dbserver tier
   
  - roles/
    - common/          # this hierarchy represents a "role"
      - tasks/         #
        - main.yml     #  <-- tasks file can include smaller files if warranted
      - handlers/      #
        - main.yml     #  <-- handlers file
      - templates/     #  <-- files for use with the template resource
        - ntp.conf.j2  #  <------- templates end in .j2
      - files/         #
        - bar.txt      #  <-- files for use with the copy resource
        - foo.sh       #  <-- script files for use with the script resource
      - vars/          #
        - main.yml     #  <-- variables associated with this role
      - defaults/      #
        - main.yml     #  <-- default lower priority variables for this role
      - meta/          #
        - main.yml     #  <-- role dependencies

    - webtier/         # same kind of structure as "common" was above, done for the webtier role
    - monitoring/      # ""
    - fooapp/          # ""

*** *.yml
- 
  ymlファイルにAnsibleで何をするかの定義がある。
  site.ymlが大本のファイルだが、include情報が主で、
  実際の定義はroles以下のmain.ymlに書かれる。

*** hosts
- 
  inventoryファイル。
  上のbest practiceではproductionとstageか。
  サーバをグループ分けしたりする。

*** vars
- 
  変数を外だしする。
  上でいうとgorup_varsとhost_varsか。

*** roles
- 
  サーバの役割による分岐点。
  上のbest practiceではcommon, webtier, monitoring, fooappなどに分かれている。
  更に各ディレクトリもいくつかのディレクトリに分ける。

**** tasks
- 
  各roleごとに何を実施するかが具体的に書かれる。
  サーバの設定やサービスのインストールはtasksディレクトリ以下のmainymlに書く。

**** handlers
- 
  サービス再起動のmain.ymlをおく。
  taskディレクトリ以下のmain.ymlでサーバの設定を行い、
  設定反映のためhandlersで再起動するイメージ。

**** templates
- 
  サービスの設定ファイルテンプレートをj2形式でおく。
  すべてPlaybookで書くよりも、テンプレートファイルを使用したほうが簡単のため。

** memo
*** host key
- 
  1.2.1以降のバージョンでは、ホストキーのチェックがデフォルトで実行される。
  もし不要であれば、"/etc/ansible/ansible.cfg"か"~/.ansile.cfg"を以下のように編集する。
    [defaults]
    host_key_checking = False

  以下でもよい。
    $ export ANSIBLE_HOST_KEY_CHECKING=False

*** Link
- [[http://docs.ansible.com/index.html?&__hssc=5198188.3.1418180787182&__hstc=5198188.e8669720ecb31fe0cfe4fb1c00202864.1418180787181.1418180787181.1418180787181.1&hsCtaTracking=496f9732-2003-4e8a-9c72-9ad8d37a1c12%7Ccb31b05e-278e-4dd4-8a4f-0a6eba410cef][Ansible Documentation]]
- [[http://techblog.clara.jp/2014/06/ansible_no1-how_to_install/][Ansible(1)概要とインストール方法について - CLARA ONLINE TECHBLOG]]
