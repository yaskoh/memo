* Ansible
** Documentation
*** Introduction
**** Installation
**** Getting Started
**** Inventory
**** Dynamic Inventory
**** Patterns
**** Introduction To Ad-Hoc Commands
**** Configuration file
**** BSD Support
**** Windows Support
**** Networking Support
*** Quickstart Video
*** Playbooks
**** Intro to Playbooks
**** Playbook Roles and Include Statements
**** Variables
**** Jinja2 filters
**** Jinja2 tests
**** Conditionals
**** Loops
**** Blocks
**** Strategies
**** Best Practices
*** Playbooks:Special Topics
**** Become
**** Accelerated Mode
**** Asynchronous Actions and Polling
**** Check Mode
**** Playbook Debugger
**** Delegation, Rolling Updates, and Local Actions
**** Setting the Environment
**** Error Handling In Playbooks
**** Advanced Syntax
**** USing Lookups
**** Prompts
**** Tag
**** Vault
**** Start and Stop
**** Directives Glossary
*** About Modules
**** Introduction
**** Core Modules
**** Extra Modules
**** Common Return Values
**** Internal use
*** Module Index
**** All Modules
**** (ry
*** Detailed Guides
**** Amazon Web Services Guide
**** Azure
**** Rackspace
**** Google Cloud Platform
**** (ry
*** Developer Information
**** Ansible Architecture
**** Developing Modules
**** Developing Plugins
**** Developing Dynamic Inventory Sources
**** Pyhton API
**** Developing the Ansible Core Engine
**** Helping Tseting PRs
**** Releases
*** Glossary
*** YAML Syntax
** Commands
*** ansible
- Syntax: ansible <host-pattern> [-m module_name] [-a args] [option]
  run a task on a target host(s)

**** option
- -a MODULE_ARGS, --args=MODULE_ARGS
  module argument

- -m MODULE_NAME, --module-name=MODULE_NAME
  module name to execute (default=command)

- -S, --su
  run operations with su

- -s, --sudo
  run operations with sudo

- -u REMOTE_USER, --user=REMOTE_USER
  connect as this user (default=current-user like vagrant)

*** ansible-playbook
- run an ansible playbook
**** option
- -i PATH, --inventory=PATH
  The PATH to the inventory, which default to /etc/ansible/hosts.

- -C, --check
  don't make any changes; instead, try to predict some of the cahnges that may occur
  dry run

- --list-tasks
  list all tasks that would be executed
  taskコマンドの確認

- --list-hosts
  対処サーバの確認

- --syntax-check
  perform a syntaxcheck on the playbook, but do not execute it
  書式確認

**** playbook
- hosts
  対称のホストまたはグループを指定する。glob[*]も使用可能。
  カンマ区切りもYAMLのリスト指定もOK。

- sudo
  sudoを使って実行する。
  デフォルトではrootとしての実行だが、別途sudo_userを指定することで別のユーザとしても実行可能。

- tasks
  実行する処理を定義する。
  nameは必須でない。
  モジュール名に続きオプションをとる。

*** ansible-doc
- 
  Ansible Moduleのドキュメントが読めるコマンド。
  ex) ansible-doc ping

- -l
  moduleをリスト表示する。

*** ansible-pull

*** ansible-galaxy

*** ansible-vault
- 
  暗号化されたYAMLファイルを作る。
** Installation
- Linux : Recommend to use OS package manager
- Others : Reccomend installing via "pip", which is the Python package manager
*** Yum (CentOS,RHEL,)
- yum install -y epel-release
- sudo yum install ansible --enablerepo=epel
*** Apt (Ubuntu,)
- sudo apt-get install software-properties-common
- sudo apt-addrepository ppa:ansible/ansible
- sudo apt-get update
- sudo apt-get install ansible
*** Pip (Linux,MacOS,)
- sudo easy_install pip
- sudo pip install ansible
** Modules
- 
  Ansibleで実行できる機能。
  ansible-doc -lで一覧を取得できる。
  たくさんあるので(ansible-doc -l | wc -lの結果は242)、無理して覚えない。

*** Cloud Modules

*** Commands Modules

**** command

**** raw

**** script

**** shell
*** Database Modules
**** Misc
**** Mysql
**** Postgresql

*** Files Modules

*** Inventory Modules

**** add_host

**** group_by

*** Messaging Modules

*** Network Modules

*** Notification Modules

*** Packaging Modules

**** Language

***** composer
***** cpanm
***** easy_install
***** gem
***** npm
***** pip

**** Os

***** apt
***** apt_key
***** apt_repository
***** apt_rpm
***** homebrew
***** homebrew_cask
***** homebrew_tap
***** layman
***** macports
***** opnbsd_pkg
***** opkg
***** pacman
***** pkgin
***** pkgng
***** pkgutil
***** portage
***** portinstall
***** redhat_subscription
***** nhn_channel
***** rhn_register
***** rpm_key
***** svr4pkg
***** swdepot
***** urpmi
***** yum
***** zypper
***** zypper_repository

*** Source Control Modules

**** bzr

**** git

**** github_hooks

**** hg

**** subversion

*** System Modules

**** alternatives
**** at
**** authorized_key
**** capabilities
**** cron
**** crypttab
**** debconf
**** facter
**** filesystem
**** firewalld
**** getent
**** glusterfs
**** group
**** hostname
**** kernel_blacklist
**** locale_gen
**** Ivg
**** Ivol
**** modprobe
**** mount
**** ohai
**** open_iscsi
**** ping
**** seboolean
**** selinux
**** service
**** setup
**** sysctl
**** ufw
**** user
**** zfs

*** Utilities Modules

*** Web Infrastructure Modules

**** apache2_module

**** django_manage

**** ejabberd_user

**** htpasswd

**** jboss

**** jira

**** supervisorctl
*** Windows Modules

** Inevntory file
- 
  ansibleはインベントリファイルに書かれたホストにしかアクセスしない。
  -i でインベントリファイルを指定して実行する。
  デフォルトでは"/etc/ansible/hosts"を読む。

  対称は複数でもよく、またクラウドからとってくることもできる。

  フォーマットはINIフォーマットで書かれる。

- グループ
  ブラケット[]内にグループ名を記述する。複数グループを指定可能。
  SSH標準以外のポートを指定するには、ホストネームの後コロン:を置いた後ろに
  ポート番号を指定できる。
  ex) [webservers]
      badwolf.example.com:5309

- alias
  静的IPを使ってエイリアスを付ける場合、以下のようにすることが可能。
  ex) jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50

- ansible_ssh_port
- ansible_ssh_host

- 複数指定
  複数まとめて指定可能。
  ex) www[01:50].example.com
      db-[a:f].example.com

- コネクション
  コネクションタイプを以下のように指定可能。
  ex) localhost          ansible_connection=local
      other.example.com  ansible_connection=ssh    ansible_ssh_user=mpdehaan

- ansible_connection
- ansible_ssh_user

** Playbooks
- りほーとホストの状態を定義するyamlファイル
** Directory layout
*** 最小構成
- hosts #Inventory
- site.yml #Playbook
*** [[http://docs.ansible.com/playbooks_best_practices.html#directory-layout][directory-layout best practice]]
- 
  - production         # inventory file for production servers
  - stageing           # inventory file for stage environment
   
  - group_vars/
    - group1           # here we assign variables to particular groups
    - group2           # ""
  - host_vars/
    - hostname1        # if systems need specific variables, put them here
    - hostname2        # ""
   
  - library/           # if any custom modules, put them here (optional)
  - filter_plugins/    # if any custom filter plugins, put them here (optional)
   
  - site.yml           # master playbook
  - webservers.yml     # playbook for webserver tier
  - dbservers.yml      # playbook for dbserver tier
   
  - roles/
    - common/          # this hierarchy represents a "role"
      - tasks/         #
        - main.yml     #  <-- tasks file can include smaller files if warranted
      - handlers/      #
        - main.yml     #  <-- handlers file
      - templates/     #  <-- files for use with the template resource
        - ntp.conf.j2  #  <------- templates end in .j2
      - files/         #
        - bar.txt      #  <-- files for use with the copy resource
        - foo.sh       #  <-- script files for use with the script resource
      - vars/          #
        - main.yml     #  <-- variables associated with this role
      - defaults/      #
        - main.yml     #  <-- default lower priority variables for this role
      - meta/          #
        - main.yml     #  <-- role dependencies

    - webtier/         # same kind of structure as "common" was above, done for the webtier role
    - monitoring/      # ""
    - fooapp/          # ""
*** Memo
**** *.yml
- 
  ymlファイルにAnsibleで何をするかの定義がある。
  site.ymlが大本のファイルだが、include情報が主で、
  実際の定義はroles以下のmain.ymlに書かれる。

**** hosts
- 
  inventoryファイル。
  上のbest practiceではproductionとstageか。
  サーバをグループ分けしたりする。

**** vars
- 
  変数を外だしする。
  上でいうとgorup_varsとhost_varsか。

**** roles
- 
  サーバの役割による分岐点。
  上のbest practiceではcommon, webtier, monitoring, fooappなどに分かれている。
  更に各ディレクトリもいくつかのディレクトリに分ける。

***** tasks
- 
  各roleごとに何を実施するかが具体的に書かれる。
  サーバの設定やサービスのインストールはtasksディレクトリ以下のmainymlに書く。

***** handlers
- 
  サービス再起動のmain.ymlをおく。
  taskディレクトリ以下のmain.ymlでサーバの設定を行い、
  設定反映のためhandlersで再起動するイメージ。

***** templates
- 
  サービスの設定ファイルテンプレートをj2形式でおく。
  すべてPlaybookで書くよりも、テンプレートファイルを使用したほうが簡単のため。

** Memo
*** host key
- 
  1.2.1以降のバージョンでは、ホストキーのチェックがデフォルトで実行される。
  もし不要であれば、"/etc/ansible/ansible.cfg"か"~/.ansile.cfg"を以下のように編集する。
    [defaults]
    host_key_checking = False

  以下でもよい。
    $ export ANSIBLE_HOST_KEY_CHECKING=False

*** 基本構成
- inventry
- playbook
*** Windowsでの利用
- 概要
  - Windows Remote Management(WinRM)を使用して操作を行う。
- Winの準備
  - WinRMの起動と構成を行う。
    - 構成スクリプトのダウンロード
      Invoke-WebRequest -Uri https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1 -OutFile ConfigureRemotingForAnsible.psl
    - ネットワークプロファイルの確認
      Get-NetConnectionProfile -IPv4Connectivity Internet
    - 実行 (プロファイルがPublicの場合、コマンド末尾の"-SkipNetworkProfileCheck"が必要、その他の場合は不要。)
      powershell -ExecutionPolicy RemoteSigned .\ConfigureRemotingForAnsible.ps1 -SkipNetworkProfileCheck
- Client側
  - pipのインストール
  - pywinrmのダウンロード
    pip install pywinrm
- [[http://qiita.com/yunano/items/f9d5652a296931a09a70][AnsibleでWindowsを操作する準備をする - Qiita]]
** Link
- [[https://www.ansible.com/][ANSIBLE]]
- [[http://docs.ansible.com/][Documentation]]
- [[http://techblog.clara.jp/2014/06/ansible_no1-how_to_install/][Ansible(1)概要とインストール方法について - CLARA ONLINE TECHBLOG]]
