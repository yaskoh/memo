* git

** command

*** git help
- <verb>
  <verb>コマンドのヘルプを確認する。
  同様のコマンドに、git <verb> --help, man git-<verb>がある。

*** git init
- 
  Gitリポジトリを新たに作成するコマンド。
  git initは本来中央リポジトリを作成する際に一度だけ使用するものであり、
  ここの開発者がローカルリポジトリを作成する際はgit cloneしてコピーする。
- --bare
  作業ディレクトリを持たない空のGitレポジトリを作成できる。
  共有レポジトリは必ず--bareフラグを使用して作成する。
  ノンベアリポジトリにプッシュを行うと変更の誤書き込みを起こす可能性があるため。

*** git clone
- 
  既存リポジトリのコピーを取得する
  git clone url [directory]
- --depth n <url>
  直近のnコミットだけをダウンロード

*** git config
- 
  項目の設定を行う。

- 設定ファイル
  各リポジトリ ： <repo>/.git/config
  ユーザ固有 ： ~/.gitconfig
  システム全体 ： $(prefix)/etc/gitconfig

- --global user.name <name>
  現在のユーザが行う全てのコミットのオーサー名を設定する。
- --global user.email <email>
  オーサーEメールアドレスを設定する。
- --global alias.<alias-name> <git-command>
  Gitコマンドのショートカットを設定する。
- --system core.editor <editor>
  git commandのようなコマンドを実行する際のエディタを指定する。
- --global --edit
  グローバルな設定ファイルをテキストエディタでひらくコマンド。
- --global color.ui "auto"
  ユーザインターフェースを自動で色付けする。

*** git add
- 
  作業ディレクトリ内の変更をステージングエリアに追加するコマンド。
  git commitを実行するまでは変更が実際に記録されることはない。
  追跡対象にしたり、変更をステージしたりする。
- -p, --patch
  インタラクティブにパッチの一部を追加する。
  y:ステージする
  n:無視する
  s:より小さい部分に分割
  e:手作業で編集
  q:終了する
  ?:ヘルプ。他のコマンドを確認できる。
- i, --interactive
  インタラクティブにファイルを追加する。

*** git commit
- 
  ステージされた変更をコミットする。
  SVNは差分を蓄積するが、Gitはスナップショットを取得する。
  - v diffの内容も表示する。
  - m インラインでメッセージを記載
  - a 追跡対象となっているファイルを追加してからコミット
- コミットメッセージ
  1行目にコミットの全体的説明を50文字以内で、2行目を空白行、3y合目以降に詳細を記述するのが標準的。
  ex:) Change the message displayed by hello.py
       
       - Update the sayHello() function to output the user's name
       - Change the sayGoodbye() function to a friendlier message
- --amend
  ステージされた変更を直前のコミットと結合し、
  その結果生成されるスナップショットで直前のコミットを置き換えるコマンド。
- -C <commit>
  指定した<commit>のメッセージを指定してコミットする。
- -c <commit>
  <commit>のメッセージを記入した状態でエディタが立ち上がる。

*** git status
- 
  ステージされたファイル、ステージされていないファイル、追跡対象外のファイル一覧を表示する。

*** git log
- 
  コミット履歴を表示する。

- -n <limit>
  表示するコミット数を<limit>に制限する。
- --oneline
  各々のコミット内容を1行に圧縮して表示するコマンド。
- --stat
  改変されたファイルおよびその中での追加行数と削除行数を増減数で表示する。
- -p
  各々のコミットに対するパッチを表示する。
- --author="<pattern>"
  特定のオーサーが行ったコミットを検索する。
- --grep="<pattern>"
  コミットメッセージが<pattern>(プレーンテキスト又は正規表現)と一致するコミットを検索する。
- --prety=format:"<fmt>"
  フォーマット指定する。
- --since="<time>"
  <time>以降のログを取得する。5 hours, 1 minute, 2008-10.01(!) 等で指定可能
- --before="<time>"
  <time>以前のログを取得する。
- <since>..<until>
  <since>と<until>の間に位置するコミットのみを表示する。
  2個の引数には、コミットID、ブランチ名、HEAD、その他任意のリビジョンリファレンスを用いることが出来る。
- <file>
  特定のファイルを含むコミットのみ表示する。
- --graph --decorate --oneline
  見やすくするための各種オプション

- -C -C -p
  コピーを検出する。


*** git checkout
- 
  ファイルのチェックアウト、コミットのチェックアウト、ブランチのチェックアウトの
  3つの異なる機能を有するコマンド。
- <commit>
  コミットのチェックアウト
  作業ディレクトリ内の全てのファイルを、指定したコミットと同一の状態に更新するコミット。
  コミットハッシュまたはタグを仕様できる。
  "detached HEAD"状態。git master等で元の状態に戻る。
- <commit> <file>
  ファイルのチェックアウト
  ファイルの過去のリビジョンをチェックアウトするコマンド。
  作業ディレクトリの他の部分に一切影響を与えることなくファイルの過去のリビジョンを確認できる。
  作業ディレクトリ自体は変更されてしまうので、変更が不要であればgit checkout HEAD <file>等で元に戻す。

- <existing-branch>
  ブランチのチェックアウト
  <existing-branch>が現在のブランチとなり、それと一致するように作業ディレクトリが更新される。
- b <new-branch>
  新規ブランチ<new-branch>を作成して即時チェックアウトするコマンド。
  git branch <new-branch> -> git checkout <new-branch> と同様。
- b <new-branch> <existing-branch>
  現在のブランチでなく、<exsiting-branch>を基点として作成する。
  タグも指定可。


*** git revert
- <commit>
  <commit>により加えられたすべての変更を元に戻す新しいコミットを生成し、
  それを現在のブランチに適用するコマンド。

*** git reset
- 
  git resetコマンドを使用して元に戻ると、元の状態を復元する方法はない。
  そのため、ローカルな変更を元に戻す場合に限るべき。
  何も指定しない場合、作業ディレクトリに何の変更も加えず、
  ステージエリアをリセットして直前のコミット時の状態と一致させる。
- <file>
  指定したファイルをステージングエリアから削除するコマンド。
- --hard
  作業ディレクトリとステージエリアを直前のコミット時の状態と一致させるコマンド。
- <commit>
  ブランチの先端を<commit>の位置に戻しステージングエリアをその状態と一致するようにするが、
  作業ディレクトリはそのままにしておく。
- hard <commit>
  <commit>位置に戻し作業ディレクトリもあわせる。

*** git clean
-
  追跡対象外のファイルを削除する。
  普通にrm等で削除してもよいが、利便性のために存在している。
  reset同様非可逆な操作となる。
- -n
  git cleanで削除されるファイルの一覧が表示される。実際には削除されない。
- -f
  追跡対象外のファイルをカレントディレクトリから削除するコマンド。
- -f <path>
  対象範囲を指定したパスに限定し、追跡対象外ファイルを削除する。


*** git branch
- 
  ブランチの作成、一覧表示、リネーム、削除を行うコマンド。
  何も指定しない場合、リポジトリ内のブランチを一覧表示する。
  ブランチは単なるコミットへのポインタで、ブランチを作成しただけではリポジトリは変更されない。
- <branch>
  <branch>という名称の新規ブランチを作成する。
- d <branch>
  指定したブランチを削除する。マージされていない変更が残っている場合は拒否される。
- D <branch>
  マージされていない変更が残っていても強制的に削除するコマンド。
- m <branch>
  現在のブランチの名前を<branch>に変更する。
- m <old> <new>
  <old>ブランチの名前を<new>に変更する。
- M <old> <new>
  <new>ブランチを<old>ブランチで上書きする（？）
- r
  リモートのブランチを表示する。
- a
  リモートとローカルのブランチ全てを表示する。

*** git merge
- 
  git branchで作成された独立な複数の開発ラインをひとつのブランチに統合するコマンド。
  以下では現在のブランチへのマージを行う。現在のブランチは更新され、ターゲットブランチはそのまま残る。
- <branch>
  指定したブランチを現在のブランチにマージするコマンド。
  マージアルゴリズムは自動的に選択される。（早送りマージか三方向マージ）
- --no-ff <branch>
  常にマージコミットを作成してマージする。
- --squash
  他のブランチから持ってきたコミットを、1つのコミットに圧縮して登録する。

*** git cherry-pick
- 
  別ブランチの1つのコミットだけを取得してマージする。
- -n
  コミットを控えるので、連続適用することで、いくつかのコミットをチェリーピックできる。


*** git rebase
- <base>
  ブランチの基点となるコミットを別のコミットに移動する操作。
- i <base>
  インタラクティブなベースセッション。

*** git reflog
reflogという機能が働いていて、ブランチの先端に対する更新の追跡が行われており、
いかなるブランチからもタグからも参照されていない更新内容であっても戻ることができる。


*** git remote
リモート接続。リンクではなくブックマークのようなもの。
通常はHTTPプロトコルはリードオンリーで、プッシュが出来ない。
SSHは両方可能。
- 
  他のリポジトリへのリモート接続一覧が表示される
- v
  各々のURLも表示される
- add <name> <unl>
  リモートリポジトリに対する新規接続を作成するコマンド。
- rm <name>
  <name>リポジトリへの接続を削除するコマンド。
- rename <old-name> <new-name>
  <old-name>から<new-name>へリネームするコマンド。
- show <name>
  <name>リモートリポジトリの情報が表示される。
- prune <name>
  古くなったリモートリポジトリを取り除く

*** git fetch
- 
  変更をリモートリポジトリから取得するが、ローカルブランチにマージしない。

*** git pull
- 
  変更を取得した後マージする

*** git push
- 
  変更をoriginリポジトリの対応するブランチに送信する。
- --dry-run
  プッシュされる変更を確認する


*** git diff
- 
  差分を表示する。オプションをつけない場合はステージされていない変更の表示。
  また、--cached / --stagedオプションをつけると、ステージされた変更の差分を表示する。
  |------+--------------------------+-----------------------------------|
  | tree | stage                    | repository                        |
  |------+--------------------------+-----------------------------------|
  |      | tree  <- (無印) -> stage |                                   |
  |      |                          | stage  <- --cached ->  repository |
  |      | tree          <-   HEAD  | ->                     repository |
  |------+--------------------------+-----------------------------------|
- --stat <tag>
  統計情報を表示する。

*** git blame
- <file>
  各行ごとに、最後に編集した情報が出力される。
- L <start>,<end>
  出力する行を指定をする。
  "12,13"や、"12,+2"等の指定が出来る。
  正規表現の指定も出来るので、'"/<\/body>/",-2'等の表記も可能。
- -- <file>
  ファイル名の指定。ファイル名が変わった場合などに、以前のファイル名を指定するためのオプション。
    ex) git blame -L "/<\/body>/",-2 4333289^ -- hello.html
- -M
  移動された行や同ファイル内でコピーされた行も検出して出力する。
- -C -C
  ファイル間のコピーを検出できるようにする。


*** git rm
追跡対象からファイルを削除し、作業ディレクトリからも除く。
- --cached
  ステージ上からのみファイルを取り除く。
- f
  すでにステージされた変更も含めて削除したい場合。

*** git mv
- 
  ファイルを移動する。git mv <old> <new>
  実際は以下と一緒。
    mv file_from file_to
    git rm file_from
    git add file_to


*** git tag
- 
  タグを表示する
- <tagname>
  軽量版(lightweight)のタグをつける。
- -a
  注釈付きタグ(annotated)を作成する
- -am
  注釈付きタグにメッセージをつける
- -n
  メッセージ付きでタグを表示する
- -d <tagname>
  タグを削除する

*** git archive
アーカイブを作成する。
- <tree-ish>
  アーカイブするツリーやタグを指定する。HEADなど。
- --format=<fmt> 
  フォーマットを指定する。zip, tarなど。
- --prefix=<pfx>
  格納フォルダを設定する。


*** git submodule
（サブモジュールは使い方がいまいち不明）
- 
  サブモジュールを表示する
- add <url> <name>
  サブモジュールを追加する
- init <sbmdl>
  サブモジュールを初期化する
- update <sbmdl>
  サブモジュールを最新に更新する


*** git gui
- 
  GUIで編集・確認ができる。らしい。
  見れたことはない。

*** git mergetool
- 
  マージを行うためのツールを立ち上げる。
  設定されたmerge.toolの値を見に行く。


*** git gc
- 
  リポジトリの大きさを圧縮する
- --agressive
  デルタを一から再計算し、より強い最適化を実行する

*** git bisect
- 
  二分探索する
- start
- bad
- good
- reset
- visualize
- log
- replay
- run
  テストスクリプトを投げ、テスト結果からgood/badを判断する。
  正常は0, スキップは125, 終了はそれ以外の正数値（普通は1)

** memo

*** ~N

~(チルダ)は親コミットの相対参照を行う場合に使用する。
3157e~1は3157eの一つ前の親コミット、HEAD~3は現在のコミットの3つ前のコミット。
"HEAD~10..HEAD"等指定してやると便利。

*** ^

^(キャレット)は一つ前をあらわす。
"18f822e^"は"18f822e"のひとつ前のリビジョン、"18f822e^^^"は3つ前のリビジョンを表す。
チルダと組み合わせて、"HEAD~1^^"や"HEAD^~2"なども可能。


*** status

|--------------------+------------------+-------------------+-----------|
| untractked         | unmodified       | modified          | staged    |
|--------------------+------------------+-------------------+-----------|
| add the file =>    |                  |                   |           |
|                    | edit the file => |                   |           |
|                    |                  | stage the file => |           |
| <= remove the file |                  |                   |           |
|                    |                  | <= commit         | <= commit |
|--------------------+------------------+-------------------+-----------|


*** .git/info/exclude

ローカルのレポジトリだけに生成されるものを除外する。
すべてのレポジトリに生成されるファイルを除外するには、.gitignoreを使用する。


*** タグとブランチの名前

- 先頭が.(ピリオド)であってはならない
- 末尾が/(スラッシュ)であってはならない
- 特殊文字の中には使えないものがある。
  スペース, ~(チルダ), ^(キャレット), ?(クエスチョンマーク), *(アスタリスク), [(開ブラケット), ASCIIの制御文字等
- ピリオドの連続(..)は使えない

** Link

[[https://www.atlassian.com/ja/git/tutorial][Gitチュートリアル Atlassian]]

