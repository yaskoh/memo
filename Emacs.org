* Emacs
** Packages
- [[file:Emacs_Packages.org][Emacs_Packages.org]]
** Mode
*** About
- Majorモードの提供機能
*** Built-in
**** Global
***** Keybind
****** special
******* C-c
******* C-h
******* C-x
******* C-u
****** default
******* C-a : beginning-of-line
******* C-b : backward-char
******* C-d : delete-char
******* C-e : end-of-line
******* C-f : forward-char
******* C-g : keyboard-quit
******* C-k : kill-line
******* C-l : recenter-top-bottom
******* C-n : next-line
******* C-p : previous-line
******* C-q : quoted-insert
- 特殊文字の入力
******** C-j : 改行
******* C-r : isearch-backward
******* C-s : isearch-forward
******** C-u C-s : regexp-mode
- C-uに限らず、一つ目の引数を取った場合にregexpに。
******** C-s C-w : isearch-yank-word
******* C-u : universal-argument
******* C-v : scroll-up
******* C-w : kill-region
******* C-y : yank
******* C-[ : backward-page
******* C-] : forward-page
******* C-\ : toggle-input-method
- IME on/off
******* C-Space : set-mark-command
******* C-x b : switch-to-buffer
******* C-x e : call-last-kbd-macro
******* C-x k : kill-buffer
******* C-x ( : start-kbd-macro
******* C-x ) : end-kbd-macro
******* C-x ] : forward-page
******* C-x [ : backward-page
******* C-x 0 : delete-window
******* C-x 1 : delete-other-window
******* C-x 2 : split-window-vertically
******* C-x 3 : split-window-horizontally
******* C-x C-b : list-buffers
******* C-x C-c : save-buffers-kill-terminal
******* C-x C-f : find-file
******* C-x C-k e : edit-kdb-macro
******* C-x C-k n : name-last-kbd-macro
******* C-x C-s : save-buffer
******* C-x C-w : write-buffer
******* C-x C-j : dired
******* C-x RET f : set-bufer-file-coding-system
- Set character code
******* C-M-s : re-search-forward
******* C-M-r : re-search-backward
******* C-M-\ : indent-region
******* C-M-% : query-replace-regexp
******* M-a : backward-sentence
******* M-b : backward-word
******* M-e : forward-sentence
******* M-f : forward-word
******* M-g g : goto-line
******* M-g M-g : goto-line
******* M-g TAB : move-to-column
******* M-v : scroll-down
******* M-x : execute-extended-command
- コマンドを入力して実行

******* M-< : beginning-of-buffer
******* M-> : end-of-buffer
******* M-: : eval-expression
******* <f1> : (help-command)
******* <help>
******** (help-command)
- help-for-help-internal
******** c KEYS
******** f FUNCTION
- describe-function
  Display documentation for the given function.
******** F COMMAND
- Show the on-line manual's section that describes the command.
******** k KEYS
- Display the full documentation for the key sequence.
******** K KEYS
- Show the on-line manual's section for the command bound to KEYS.
******** m
- Display documentation of current minor modes and current major mode, including their special commands.
******** t
- Tutorial
******** v VARIABLE
- Display hte given variable's documentation and value.
****** edited
******* C-h : delete-backward-char
******* C-j : newline
******* C-m : newline-and-indent
******* C-o : other-window
- 引数を設定した分のウィンドウ数移動する。
  "C-c -1 C-o"とすると一つ戻る。
******* C-t : forward-char
******* C-x o : other-frame
******* C-x ? : help-command
- 
  <f1>を使ってください

******* C-z : undo
******* C-/ : transpose-chars
******* M-t : forward-word
******* M-r : replace-string
******* M-z : transpose-words
****** original
******* C-h : (help-command)
******* C-j
******* C-m
******* C-o
******* C-t
******* C-x o
******* C-z
******* C-/
******* M-t
******* M-r
******* M-z
**** edebug-mode
- Minor
***** Keybind
****** SPC : edebug-step-mode
****** ? : edebug-help
****** B : edebug-nex-breakpoint
****** b : edebug-set-breakpoint
****** c : edebug-continue-mode
****** e : edebug-eval-expression
- 式を表亜カルス
****** g : edebug-go-mode
- 次のブレークポイントまで実行
****** h : edebug-goto-mode
- カーソル位置まで実行
****** i : edebug-step-in
- 直後の関数に入る
****** q : top-level
- edebugを抜ける
****** u : edebug-unset-breakpoint
- ブレークポイントを削除
**** dired
***** Commands
****** R : dired-do-rename
****** f : 
**** eshell
**** lisp-interaction-mode
***** Command
****** eval-print-last-sexp
- C-j
****** eval-last-sexp
- C-x C-e
  直前の括弧で囲まれたS式を評価する
****** eval-defun
- C-M-x
  全体を評価して結果を返す
****** indent-for-tab-command
- C-i
****** indent-sexp
- C-M-q
****** load-file
****** eval-current-buffer
**** org-mode
***** KeyBind
****** C-c ^ : org-sort
****** tab : org-cycle
***** Commands
****** org-sort
****** org-cycle
**** lisp
***** Keybind
****** C-M-x : edebug-eval-defun
**** re-builder
**** eww
- web broweser.
  it is part of the Emacs 24.4.

- [[https://lars.ingebrigtsen.no/2013/06/16/eww/][eww - Random Thoughts]]
**** ielm
- Inferior Emacs Lisp Mode
  this acts like an intreactive Lisp interpreter.
  real little REPL.

- 
  うまく評価してくれず、使い方不明。

**** Tramp-mode
- TRAMP(Transparent Remote Access, Multiple Protocols)
  winではあまりうまくいっていないので、どうにかしたい。
- Link
  [[https://www.emacswiki.org/emacs/TrampMode][Tramp Mode - EmacsWiki]]
  [[http://yo.eki.do/notes/tramp-mode][Emacs:まだターミナルで消耗してるの？ - 葉月夜堂]]
**** shells
***** shell
- M-x shell
  標準シェル。
  タブ補完などが効かない。

***** ansi-term(term)
- M-x term (M-x ansi-term)
  
***** eshell
- M-x eshell
  
***** multi-term
- 
  別途インストールが必要。
*** Others
**** slime
***** Command
****** slime
- (slime &optional COMMAND CODING-SYSTEM)
****** slime-compile-defun
- C-c C-c
- (slime-compile-defun &optional RAW-PREFIX-ARG)
  Compile the current toplevel form.
  
****** slime-compile-and-load-file
- C-c C-k
- (slime-compile-and-load-file &optional POLICY)
  Compile and load the buffer's file and highlight compiler notes.

****** slime-switch-to-output-buffer
- C-c C-z (slime-repl.el)
- (slime-switch-to-output-buffer)
  Select the output buffer, when possible in an existing window

***** Memo
****** Error on Windows 7
- 
  Path中にspaceがあると、argumentとして取られてしまう模様。エラーとなる。
  [[http://stackoverflow.com/questions/17860785/slime-on-windows-7][SLIME on Windows 7]]

***** Link
- [[https://common-lisp.net/project/slime/][SLIME: The Superior Lisp Interaction Mode for Emacs]]

**** px
- Preview inline latex in any mode
  [[https://github.com/emacsmirror/px][px - github]]
**** emmet-mode
***** KeyBindings
****** default
******* C-M-right : emmet-next-edit-point
******* C-M-left : emmet-prev-edit-point
******* C-c w : emmet-wrap-with-markup
****** edited
******* C-' : emmet-expand-line
****** original
******* C-j : emmet-expand-line
******* C-return : emmet-expand-line
***** Commands
****** emmet-expand-line
***** Link
- [[https://github.com/smihica/emmet-mode][smihica/emmet-mode - github]]
**** yasnipet
- Tag
  ex) html, then tab
***** KeyBindings
****** C-i : yas-expand-from-trigger-key
****** Tab : yas-expand
****** C-c & C-n : yas-new-snippet
****** C-c & C-s : yas-insert-snippet
****** C-c & C-v : yas-visit-snippet-file
***** Commands
****** yas-describe-tables
- 利用できるスニペット一覧を表示可能。
****** yas-insert-snippet
- Prompts you for possible snippet expansion
****** yas-new-snippet
- Lets you create a new snippet file in the correct subdirectory.
**** Minibuffer
***** Keybind
****** M-p, up : previous-history-element
****** M-n, down : next-history-element
****** M-r : previous-matching-history-element
****** M-s : next-matching-history-element
****** C-M-i : completion-at-point
**** picture-mode
- 
  picture-modeかedit-pictureを選択する。
- C-c C-c
  pictureモードから抜ける。

- C-c <, C-c >, C-c ^, C-c .
  

- C-right, C-left, C-up, C-down
  線を描く。

- M-right, M-left, M-up, M-down
  線を消す。
** Functions
- 使いやすさのために、パッケージを超えてまとめる必要があれば行う。
  厳密なものはPackagesへ移行中
*** File
**** dired
**** find-file
- C-x C-f
**** load-file
*** Buffer
**** kill-buffer
- C-k
**** save-buffer
- C-x C-s
**** save-buffers-kill-terminal
**** switch-to-buffer
- C-x b
**** list-buffers
- C-x C-b
**** write-buffer
- C-x C-w
*** Window
**** delete-window
**** delete-other-window
**** split-window-vertically
**** split-window-horizontally
*** Moving Point
**** forward-char
- (C-f), C-t
**** backward-char
- C-b
**** previous-line
**** next-line
**** forward-word
**** backward-word
**** beginning-of-line
- C-a
**** end-of-line
- C-e
**** forward-sentence
- M-e
**** backward-sentence
- M-a
**** scroll-up
- C-v
**** scroll-down
- M-v
**** forward-page
- C-x ]
**** backward-page
- C-x [
**** goto-line
- M-g
*** Editing
**** delete-char
- C-d
**** delete-backward-char
- C-h
**** kill-word
- M-d
**** kill-line
- C-k
**** yank
- C-y
**** kill-region
- C-w
**** set-mark-command
- C-Space
**** universal argument
- C-u
  次に入力するコマンドを4回実行する
**** quoted-insert
*** Search
**** isearh-forward
- C-s
**** isearch-backward
- C-r
**** isearch-yank-word
- C-s C-w
**** re-search-forward
- C-M-s
**** re-search-backward
- C-M-r
**** query-replace-regexp
- C-M-%
***** Reply
- y
  replace on match
- n
  skip to next
- RET / q
  exit
- . (period)
  replace one match and exit
- , (comma)
  replace but not move point
- C-r
  enter recursive edit (C-M-c to get out again)
- C-w
  delete match and recursive edit
- C-l
  clear the screen, redisplay, and offer same replacement again
- !
  replace all remaining matches
- ^
  to move point back to previous match
- E
  to edit the replacement string
- Y
  (Multi-buffer)replace all remaining matches in all remaining buffers with no more questions.
- N
  (Multi-buffer)skip to the next buffer ithout replacing remaining matches in the current buffer.
*** Macro
**** start-kbd-macro
- C-x (, <F3>
**** end-kbd-macro
- C-x ), <F4>
**** call-last-kbd-macro
- C-x e
**** kbd-macro-query
- C-x q
**** edit-kdb-macro
- C-x C-k e
**** name-last-kbd-macro
- C-x C-k n
**** insert-kbd-maccro
**** apply-macro-to-region-lines
*** Shell
**** shell
**** term
**** eshell

** Features
*** Help
*** Register
*** Regular Expression
- https://www.emacswiki.org/emacs/RegularExpression

**** Operation
- Lispリーダと正規処理表現処理器の二段階で読み込まれるため、
  正規表現を文字列として渡すには、\\と2つ重ねて記述する必要がある。
- 
  "\\b" -> (Lispリーダ, \\⇒\) -> "\b" -> (正規表現処理機, \b)
**** Syntax
***** Special Characters
- special : . * + ? ^ $ \ [
- between brackets : ] - ^

****** normal
******* .
- any character (but new line)
******* *
******* +
******* ?
******* ^
******* $
******* [...]
- どれか1つにマッチする。
******* [^..]
******* [a-z]
******* \
- prevents interpretation of following special char
******* \|
******* \w
- word constituent
******* \b
- word boundary
******* \sc
- character with c syntax (e.g. \s- for whitespace char)
******* \( \)
******* \< \>
- start/end of word
******* \_< \_>
- start/end of symbol
******* \` \'
- start/end of buffer/string
******* \1
- string matched by the first group
******* \n
- string matched by the nth group
******* \{3\}
******* \{3,\}
******* \{3,6\}
******* \=
- match succeeds if it is located at poit
****** non-greedy
******* *?
******* +?
******* ??
****** not match
******* \W
- not word
******* \B
- not word boundary
******* \Sc
****** category
- 
  Use "C-u C-x =" to display the category of the character under the cursor.

******* \ca
- ascii character
******* \Ca
- non-ascii character (newline included)
******* \cl
- latin character
******* cg
- greek character
****** syntax class
- see the syntax table by typing C-h s (but I have changed the key binding of help.)
******* \s-
******* \sw
******* \s_
******* \s.
******* \s(
******* \s)
******* \s"
******* \s\
******* \s/
******* \s$
******* \s'
******* \s<
******* \s>
******* \s!
******* \s|
****** syntax class between bracket
******* [:digit:]
******* [:alpha:]
******* [:alnum:]
******* [:alnum:]
******* [:upper:]
******* [:space:]
******* [:xdigit:]
******* [:cntrl:]
******* [:ascii:]
*** Keyboard Macros
- start
 C-x (
- end
  C-x )
- execute (most recent)
  C-x e
- execute, then start recording
  C-u C-x (
** Structure
*** Screen
**** Point
**** Echo Area
**** Mode Line
**** Menu Bar
*** Files
*** Buffers
*** Windows
*** Frames
*** International
** Command line
*** Options
**** -d display, --display=display
**** -t device, --terminal=device
**** -nw, --no-windows
**** -batch, --batch
**** -q, --no-init-file
- 個人の初期化ファイルをロードしない
**** --no-site-file
**** -u user, --user=user
**** --debug-init
**** --unibyte
**** --multibyte
** Glossary
*** Special Forms
- A special form is a primitive function specially marked so that its argumets are not all evaluated.
  
*** バッファーローカル変数
- バッファーごとに別の値を取れる変数。
  make-local-variable関数を使うと、通常の変数をバファーローカルにできる。
** Memo
*** ToDo
- emacslispの書き方
- 正規表現の改善
  o re-builder
  - foreign-regexpの代わりに、perl表現を自動でemacs表現に変換した上で実行してあげる層を作れないか？
- ダウンロードランキングから、有用なパッケージを導入
  http://emacs.rubikitch.com/melpa-dl-ranking-2015/
- kawabata/dotfilesを読む
- use-packageの設定
- bind-keyによる設定
- パッケージの整理
- yasnippetの用法
- Linux/Macで確認
  - el-get
    winで失敗中。
    -> caskにしようかしら。
  - magitの導入
- 25.1にupdate?
- できればansible導入

*** 変数設定
- defconst, defvar, setq, defcustom
  defcostomは無条件に変数を初期化するが、defvarは変数が空である場合のみ初期化する。
  変数の使い方を制限することはしないため、主には好みの問題。
  ユーザカスタマイズを目的とする変数を宣言するにはdefcustomを使う。
*** defcustom カスタマイズ定義
- 
  https://www.gnu.org/software/emacs/manual/html_node/eintr/defcustom.html
  http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_14.html
*** advice アドバイス
- 関数の既存の定義に追加ができる。
  各関数は、個別に定義した複数のアドバイス断片を持ち、明示的に有効・無効にできる。
  
  本来の処理の前後に処理を追加するもの。

**** advice.el
- 旧advice.elでは、defadviceにbefore, after, aroundを指定して追加をし、
  ad-activate/ad-deactivateで有効化/無効化できる。
  ad-do-itやad-return-valueなどを駆使して利用する。

  https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html#Advising-Functions
  http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_17.html

**** nadvice.el
- advice-addとadvice-removeを使う。
  aroundでは、元の関数が引数として渡されるため、ad-do-itの代わりにapplyを使えばよい。
  また、ad-return-valueを設定せずともそのままアドバイス関数の返り値が関数の返り値となる。

- アドバイス
  - :before
  - :after
  - :around
  - :override
  - :filter-return
  - :filter-args
  - :before-while
  - :before-until
  - :after-while
  - :after-until

    http://emacs.rubikitch.com/nadvice/
*** backquote バッククォート
- 基本的にはquoteと同じ。
  - ,
    内側にある特別な印","は、値が定数でないことを表す。バッククォートはリスト構造の中の","を評価し値で置き換える。
  - ,@ (splice)
    評価結果を結果となるリストに繋ぎ合わせる(splice)。結果となるリストの他の要素と同じレベルとなる。
    
- http://www.bookshelf.jp/texi/elisp-manual-20-2.5-jp/elisp_13.html#SEC176
*** Major Mode作成手順
**** 例1
- モード用のキーマップを作る
  - make-sparse-keyで空のキーマップを作る
  - define-keyでキーと関数を指定
- major-mode 用のコマンドを作る
  - 変数 major-mode にそのモードを表すシンボルを設定
  - 変数 mode-name にそのモードの名前を設定
  - 'use-local-map' でモード用のキーマップを設定

**** 例2 (やさしいEmacs-Lisp講座 / 本)
- モード名を設定する
  (setq major-mode 'my-mode)
  (setq mode-name "まいもーど")
- 使用するキーマップを設定する
  (setq my-local-map (make-sparse-keymap))
  (define-key my-local-map "h" 'backward-char)
- 動作に必要な変数を設定する
  (use-local-map my-local-map)
- 必要な関数を定義する
*** Literal リテラル
**** 数値リテラル
***** 数値 1234
***** 小数 3.14
***** 文字コード ?a
- aの文字コード
***** 8進数 ?\12
- 8進数表記の整数
***** 16進数 ?\x12
- 16進数表記の整数
***** NN進数 #NNr
- NN進数
  ex: #5r40→20, #30remacs→11943388

*** 置換時の改行
- 
  ^J(C-q C-j)
*** Windowsバイナリ
- 
  公式バイナリは、日本語入力時にIMEが使えなくて不便(24.5時点)
- NTEmacsバイナリ（パッチ付）
  2016/4/19時点ではこの簡易版パッチのものを使っている。
  [[http://cha.la.coocan.jp/doc/NTEmacs.html][NTEmacs / Emacs for Windows]]
- Gnu pack
  [[http://d.hatena.ne.jp/ksugita0510/][gnupackの開発メモ]]

*** Macのbackslash
- 
  Mac上では、¥はbackslashと同一でなく、YEN SIGN(UTF8 0xC2 0xA5)、となってしまう。
  \(ASCII 0x5c)をemacs上で出すことは難しいので、keymapに設定すると良い。
  ちなみにemacs以外のMac上の画面では、Option+¥で\が入力可能。

  ->mac上IMEで、デフォルトを\とするか¥とするか選択できた。

- 
  http://qiita.com/aKenjiKato/items/4ac7d9b100bdce0b8920
  http://www.glamenv-septzen.net/view/1119

*** 数値のビット幅
- 
  (expt 2 n)で扱える最大のnがビット幅。超えると0が帰ってくる。
  手持ちのemacsは64bit版のため、60で正、61で負の値が返ってきたあと、62以降は0となる。

*** 並び替え
- org-sort(C-c ^)
*** インデント
- C-M-\, indent-region
*** TeXの設定
- MacでTeXを使うために、PATH及びexec-pathを設定する必要がある。
  [[http://emacs.stackexchange.com/questions/18534/orgmode-mac-el-capitan-cant-find-latex][Orgmode + Mac (el capitan): can't find latex - (emacs)]]
*** 検索機能
- [[http://dev.ariel-networks.com/articles/emacs/part1/][「Emacsのトラノマキ」 連載第一回 「Emacsの検索機能を使いこなす」 - ありえるえりあ]]

- M-x grep
- lgrep
- rgrep
- grep-find

**** Windowsでのgrep/find
- Windowsでうまくgrepができない/結果がヒットしない
- [[https://www.emacswiki.org/emacs/GrepMode][Grep Mode - EmacsWiki]]

*** debug
- [[http://dev.ariel-networks.com/articles/software-design-200802/elisp-debug/][Emacs Lisp デバッグ - ありえるえりあ]]
*** キー設定
**** remap
- あるコマンドに割り当てられているキー、という形でキー指定が可能。
  既存のキーを拡張したコマンドを当てる場合などに有用。
  ex) (add-hook 'c++-mode-hook '(lambda () (local-set-key [remap newline] 'newline-and-indent)))
  
**** Key macro
- キー設定関数で、コマンドの代わりにキーを指定することもできる。
  ex) (global-set-key "\C-l" "\C-f")
  C-lを押すとC-fのキーが押されたこととなる。
**** keyboard-translate
- モードに関係なくキー変換を行うことができる。
  引数はベクター表記の中の文字。低次元層に働く関数なので、結構強力。
  ex) (keyboard-translat ?\C-l ?\C-f)
  
*** デバッグ
**** print(message)
- message関数を使う。
  sit-forやy-or-n-p
**** backtrace
- 事前にdebug-on-errorをtにしておく必要がある。
  backtraceバッファでeを押すとその時点での変数の値を評価できる。
**** edebug
- C-u C-M-xを評価したい関数に対して適用して、その後関数を実行する。
**** Link
- [[http://dev.ariel-networks.com/articles/software-design-200802/elisp-debug/][Emacs Lisp デバッグ - ありえるえりあ]]
- [[http://d.hatena.ne.jp/rubikitch/20101116/edebug][Emacs Lispのソースコードデバッガ edebug を使う]]
- [[http://www.bookshelf.jp/texi/emacs-lisp-intro-jp/eintro_19.html][17.デバッグ]]
** Link
*** Manual
- [[https://www.gnu.org/software/emacs/][GNU Emacs]]
- [[http://www.gnu.org/software/emacs/manual/html_mono/emacs.html][GNU Emacs manual]]
- [[https://ayatakesi.github.io/][emacs 日本語マニュアル]]
- [[https://www.emacswiki.org/emacs/SiteMap][EmacsWiki]]
- [[http://d.hatena.ne.jp/o0cocoron0o/20100424/1272116442][Emacs 基本コマンド一覧 - Cocoron's memo]]
- [[http://emacsrocks.com/][emacsrocks]]

- [[http://yohshiy.blog.fc2.com/blog-category-30.html][Top - 環境設定のための Emacs Lisp 入門 - プログラマーズ雑記帳]]

*** Settings
- [[https://github.com/kawabata/dotfiles/blob/master/.emacs.d/init.el][dotfiles/.emacs.d/init.el (kawabata/dotfiles) - github]]
- [[http://www.clear-code.com/blog/2012/3/20.html][Emacs実践入門 - おすすめEmacs設定2012 - ククログ]]
- [[http://yohshiy.blog.fc2.com/blog-entry-324.html][Emacs のおすすめ基本設定 - プログラマーズ雑記帳]]
- [[http://dev.classmethod.jp/devenv/emacs-settings/][あまり有名でないEmacsのオススメ設定 - Developers.IO]]
- [[http://th.nao.ac.jp/MEMBER/zenitani/elisp-j.html][Emacs Lisp TIPS]]

*** Startup
- [[https://gist.github.com/zk-phi/9935048][setup.el で安全・爆速な init.el を書く - zk-phi/setup_description_ja.org]]

