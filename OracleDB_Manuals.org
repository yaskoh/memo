* OracleDB Manuals
- それぞれのメモに分割される前/されないファイルを、ドキュメント単位で記載する。
** 11.2
*** Oracle Database概要
- https://docs.oracle.com/cd/E16338_01/server.112/b56306/toc.htm

**** 第0部
***** はじめに
****** 関連ドキュメント
- 『Oracle Database 2日でデータベース管理者』
- 『Oracle Database 2日で開発者ガイド』
- [[https://docs.oracle.com/cd/E16338_01/server.112/b56306/intro.htm#CEGCAFDB][Oracle Databaseドキュメントのロードマップ]]
  （下記にもあり）
***** 1 Oracle Databaseの概要
****** 概要
******* DBMS
- DBMSの構成要素
  - カーネルコード : メモリと記憶域の管理
  - メタデータのリポジトリ : データディクショナリ
  - 問合せ言語
******* リレーショナルモデル
******* RDBMS
- リレーショナル・モデルはRDBMSの基礎
******* OracleDBの歴史
****** スキーマ・オブジェクト
- 特性の1つ : 物理データ記憶域が論理データ構造から独立している
  - データベーススキーマ : 論理データ構造またはスキーマ・オブジェクトの集合
    - スキーマ・オブジェクト : ユーザが作成する構造、データベース・オブジェクトの1種
******* 表
******* 索引
******* データアクセス
******* SQL
******* PL/SQLとJava
- PL/SQL : Oracle SQLの手続きを拡張
  - アプリケーション・ロジックをDBに格納できる
    PL/SQLプロシージャ/ファンクション
- Javaで作成されたプログラム単位も格納可能。
****** トランザクションの管理
******* トランザクション
******* データ同時実行性
******* データ整合性
****** Oracle Databaseアーキテクチャ
******* データベースおよびインスタンス
- 1つのデータベースと1つ以上のデータベース・インスタンスで構成される
  - データベース : ディスクに格納された一連のファイル
  - インスタンス : 一連のメモリー構造。SGAとバックグラウンドプロセスで構成される。

- クライアントプロセスにより実行される
  - 各クライアントプロセスはそれぞれ独自のサーバープロセス関連付けられる
    - PGA@サーバープロセス
******* データベース記憶域構造
******** 物理記憶領域構造
- データファイル
- 制御ファイル
- オンラインREDOログ・ファイル
******** 論理記憶域構造
- データ・ブロック
- エクステント
- セグメント
- 表領域
******** データベース・インスタンス構造
********* プロセス
- クライアント・プロセス
- バックグラウンド・プロセス
- サーバー・プロセス
********* インスタンスのメモリー構造
- SGA
- PGA
******** アプリケーションおよびネットワークのアーキテクチャ
********* アプリケーション・アーキテクチャ
- クライアント/サーバ
- 複数層
- サービス指向(SOA)
********* ネットワーク・アーキテクチャ
- Oracle Net Services : DBとネットワークの通信プロトコルとの間のインターフェース
  主要なネットワークプロトコルをサポート(TCP/IP, HTTP, FTP, WebDAVなど)

- Oracle Net : Oracle Net Servicesのコンポーネント
  クライアントAppからDBへのネットワークセッションを確立して維持する

- Oracle Net Lister : Net Servicesのコンポーネント
  - 独立したプロセスとして実行される
- クライアント要求の構成
  - 専用サーバー・アーキテクチャ
    - 各クライアントプロセスは、専用サーバー・プロセスに接続する。
  - 共有サーバー・アーキテクチャ
    - 複数のセッションに対して共有プロセスのプールを使用する。
      ディスパッチャと通信し、多数のクライアントが同じデータベース・インスタンスに接続できるようにする
****** ドキュメントのロードマップ
******* 初級グループ
- Oracle Database概要（このマニュアル）
- Oracle Database 2日でデータベース管理者
- Oracle Database 2日で開発者ガイド
******* 中級
******** 管理者
- 『Oracle Database 2日でパフォーマンス・チューニング・ガイド』
- 『Oracle Database 2日でReal Application Clustersガイド』
- 『Oracle Database 2日でデータ・ウェアハウス・ガイド』
- 『Oracle Database 2日でデータ・レプリケーションおよび統合ガイド』
- 『Oracle Database 2日でセキュリティ・ガイド』
******** 開発者
- 『Oracle Database Application Express 2日で開発者ガイド』
- 『Oracle Database 2日でJava開発者ガイド』
- 『Oracle Database 2日で.NET開発者ガイド』
- 『Oracle Database 2日でPHP開発者ガイド』
******* 上級
******** 必須
- 『Oracle Database SQL言語リファレンス』
- 『Oracle Databaseリファレンス』
******** 管理者（一部）
- 『Oracle Database管理者ガイド』
- 『Oracle Databaseパフォーマンス・チューニング・ガイド』
- 『Oracle Databaseバックアップおよびリカバリ・ユーザーズ・ガイド』
- 『Oracle Real Application Clusters管理およびデプロイメント・ガイド』
******** 開発者（一部）
- 『Oracle Databaseアドバンスト・アプリケーション開発者ガイド』
- 『Oracle Database PL/SQL言語リファレンス』
- 『Oracle Database PL/SQLパッケージ・プロシージャおよびタイプ・リファレンス』
**** 第Ⅰ部 Oracleリレーショナル・データ構造
***** 2 表と表クラスタ
****** スキーマオブジェクトの概要
- データベース・スキーマ ⇒ スキーマ・オブジェクトと呼ばれるデータ構造の論理コンテナ。
- スキーマ・オブジェクトの例 : 表、索引。SQLで作成し操作する

- ユーザ : ユーザと同じ名前がついた単一のスキーマを所有する
  - スキーマには、所有するユーザーのデータが含まれている
  - 通常、本番データベースでは、スキーマ所有者は人でなく、DBApp

- スキーマ内の各スキーマ・オブジェクトには、一意の名前がつく。
  - 例: hr.employee は、hrスキーマ内のemployee表
******* スキーマオブジェクトのタイプ
- 表 : 最も重要なスキーマオブジェクト
- 索引
- パーティション
- ビュー
- 順序 : 複数のユーザーが整数を生成して共有できるオブジェクト。津城主キー値の生成に使用される。
- ディメンション : 列背ttのペア間の親子関係を定義する
- シノニム : スキーマオブジェクトの別名。単なる別名のためデータ・ディクショナリないの定義以外に記憶域は必要ない。
- PL/SQLサブプログラム、PL/SQLパッケージ

- 他のタイプのオブジェクト（スキーマに含まれないもの）
  - データベース・ユーザ
  - ロール
  - コンテキスト
  - ディクショナリ・オブジェクト
******* スキーマ・オブジェクトの格納
- 一部のスキーマ・オブジェクトは、「セグメント」と呼ばれる論理記憶域構造にデータを格納する。
  - パーティション化されていないヒープ構成表や索引はセグメントを作成。
  - ビューや順序などはメタデータのみで構成
- 以下『セグメントを持つスキーマオブジェクトについてのみ』説明
  
******* スキーマオブジェクトの依存性
- スキーマオブジェクトには、他のオブジェクトを参照し、依存性を作成するものがある。
  - AがBを参照している場合、
    - A : Bに関する依存オブジェクト
    - B : Aに関する参照オブジェクト
- 定義変更などにより、依存オブジェクトに無効マークが着く場合あり
  - 使用できるようにするには、新しい定義で再コンパイルする必要あり。
  - "USER_OBJECTS"の"STATUS"などでVALID/INVALIDを確認可能
******* SYSスキーマとSYSTEMスキーマ
- 管理アカウントSYS :
  - データベース作成時に自動的に作成される
  - データ・ディクショナリの実表とビューが格納される
- SYSTEMアカウント :
  - データベース作成時に自動的に作成される
  - 管理情報を表示する追加の表とビューが格納
  - 様々なオプションとツールで使用される内部表とビューが格納
******* サンプル・スキーマ
****** 表の概要
- 表の基本カテゴリ
  - リレーショナル表 : 一般的なタイプ
  - オブジェクト表 :
- 構成特性（リレーショナル表）
  - ヒープ構成表 : 特定の順序で格納されない
  - 索引構成表
  - 外部表 : 読み取り専用の表
- 種類
  - 永続表
  - 一時表
******* 行と列
- 表の定義には表明と列の集合が含まれる
- ディスク領域を使用しない仮想列を含めることができる
******* 例:
******* Oracleデータ型
******** 文字データ型
- 長さセマンティクス
  - バイト・セマンティクス
  - キャラクタ・セマンティクス
********* VARCHAR2およびCHAR
********* NCHARおよびNVARCHAR2
******** 数値データ型
********* NUMBERデータ型
********* 浮動小数点数
******** 日時データ型
********* DATEデータ型
********* TIMESTAMPデータ型
******** ROWIDデータ型
- ROWIDデータ型にデータベース内の各行のアドレス(ROWID)が格納される。
- カテゴリ
  - 物理ROWID: ヒープ構成表、表クラスタ、表パーティションや索引パーティションに行のアドレスを格納する
  - 論理ROWID: 索引構成表に行のアドレスを格納する
  - 外部ROWID: ゲートウェイを介してアクセスされるDB2表などの外部表の識別子
- ユニバーサルROWID(UROWID)はすべてのタイプのROWIDをサポートしている
********* ROWIDの使用
- 特定の行のアクセスで最も高速
- 表の編成を把握する機能を提供
- 表の中の行の一意識別子
********* ROWID擬似列
- それぞれの表は、ROWIDという名前の擬似列を持っている。
  選択は可能、挿入・更新・削除は不可。
- 引数のないSQLファインクションに似ている。
******** 書式モデルとデータ型
- 書式モデル: 格納された日時または数値データの書式を文字列で表す文字リテラル。
  データベース内の内部表現は変更されない。
******* 整合性制約
- 表の1つ以上の列の値を制限する名前付きの規約。
  制約はデータ・ディクショナリに格納される
******* オブジェクト表
- オブジェクト型: TYPE
  - 名前、属性およびメソッドを含むユーザ定義データ型
  - 論理構造が定義されるが、記憶域は作成されない。
  - query: CREATE TYPE department_typ AS OBJECT (...);
- オブジェクト表:
  - すべての行がオブジェクトを表す特殊な表。
  - リレーショナル列同様、オブジェクト表に含められるのは、表と同一の宣言された方のオブジェクトインスタンスなど、1種類の行のみ。
  - すべての
  - query: CREATE TABLE departments_obj_t OF department_typ;
******* 一時表
- トランザクションまたはセッションの期間中にのみ存在するデータが
******** 一次表の作成
******** 一時表でのセグメントの割り当て
- 永続表同様、データディクショナリに定義される。
  最初にデータが導入された時に割り当てられる。
******* 外部表
- 外部ソースのデータに対して、データベース内の表にあるデータのようにアクセスできる。
  SQL, PL/SQLおよびJavaで問い合わせ可能。

******** 外部表の作成
- CREATE TABLE ... ORGANIZATION EXTERNAL文は2つの部分に分かれる。
- 基本読み取り専用。ORACLE_DATAPUMPアクセスドライバを指定して作成される場合は除く。
******** 外部表のアクセスドライバ
- ORACLE_LOADER(デフォルト)
  - SQL*Loaderを使用した外部ファイルへの読み取り専用アクセスを可能にする。
- ORACLE_DATAPUMPアクセス・ドライバ
  - 外部データをアンロードできる。
******* 表の記憶域
- 表領域のデータ・セグメントを使用して表データを保持する。
  セグメントにはデータ・ブロックからなるエクステントが含まれる。
******** 表の編成
- デフォルトでは、表はヒープ
******** 行の格納
- 行がデータブロックに格納される。
  表の各行は、1つ以上の行断片に格納される。
  可能な限り1つの行断片として扱うが、挿入できない場合もしくは更新時に容量を超えた場合、複数の行断片を使用する。
******** 行断片のROWID
- ROWIDは行の10バイトの物理アドレスのこと。
******** NULL値の格納
- 列に値がない
******* 表の圧縮
******** 基本および高度な行圧縮
- サポートしている圧縮タイプ
  - 基本表圧縮
  - 高度な表圧縮
******** ハイブリッド列圧縮
- 行グループの同じ列がまとめてデータベースに格納される。
  同じデータ型で類似した特性を持つ列グループをまとめて格納することで、記憶域を大幅に圧縮する。
********* ハイブリッド列圧縮のタイプ
- ウェアハウス圧縮
- オンライン・アーカイブ圧縮 : 履歴データ、変更されないデータ向け
******** 圧縮ユニット
- 行の集合を格納するために「圧縮ユニット」と呼ばれる論理的な構造が使用される。
****** 表クラスタの概要
- 共通の列を共有し、関連するデータを同じブロックに格納する表のグループのこと。
  クラスタ化されると、1つのデータブロックに複数の表の行を含めることができる。
- クラスタ・キー: クラスタ化表で共有される1つ以上の列
- クラスタ・キー値: 特定の行のセットに対するクラスタ・キー列の値のこと。
******* 索引付きクラスタの概要
- 索引を使用してデータを検索する表クラスタのこと。
- クラスタ索引: クラスタ・キーのBツリー索引のこと。
******* ハッシュクラスタの概要
- 索引キーがハッシュ関数となる
******** ハッシュ・クラスタの作成
******** ハッシュ・クラスタの問い合わせ
- キー値をハッシュする方法はデータベースが決定する
******** 様々なハッシュ・クラスタ
- 単一表ハッシュ・クラスタ
  - 同時に1つの表のみをサポートするために最適化されたハッシュ・クラスタのバージョン。
- ソート済みのハッシュ・クラスタ
******** ハッシュ・クラスタの記憶域
- ハッシュ・クラスタのための領域を索引付きクラスタとは異なる方法で割り当てる
***** 3 索引と索引構成表
****** 索引の概要
- 索引: 表または表クラスタに関連するオプションの構造
******* 索引の特性
- 関連するオブジェクトのデータから論理的にも物理的にも独立したスキーマ・オブジェクト。
- 特性
  - 使用可能性
    - 使用可能、または使用禁止にできる。
      使用禁止索引はDML操作により維持されず、オプティマイザによって無視される。
      バルクロードのパフォーマンス向上。
      削除の後再作成する代わりに、一時的に使用禁止とし、あとで愛構築可能。
  - 可視性
    - 参照用(デフォルト)または非参照用にできる。
      非参照用はDML操作により維持され、デフォルトでオプティマイザで使用されない。
      使用禁止または削除の代替手段。
******** キーと列
- 索引とキー
  - 索引: データベース内に格納される構造体
  - キー: 厳密に論理的な概念
- 主キーと一意キーには自動的に索引が作成される。外部キーにも索引を作成できる。
******** コンポジット索引
- 複数の列に対して作成される索引。連結索引とも。
  データを取得する問い合わせにとって最も効果的な順序で指定する必要がある
******** 一意索引と非一意索引
******** 索引のタイプ
- Bツリー索引
  - 索引構成表
  - 逆キー索引
  - 降順索引
  - Bツリークラスタ索引
- ビットマップ索引とビットマップ結合索引
- ファンクション索引
- アプリケーション・ドメイン索引

******* Bツリー索引
- Bツリー（バランス・ツリー）
******** ブランチ・ブロックとリーフ・ブロック
- 全てのリーフ・ブロックは自動的に同じ深さとなる
- ブランチレベル: 高さから1を引いた数。高さが3ならブランチレベルは2
- ブランチ・ブロック:
  - 2つのキーの分岐を決定する際に必要な、最小のキー接頭辞が格納される。
- リーフ・ブロック:
  - 全ての索引付きデータ値と、実際の行を検索するための対応するROWIDが含まれる。
******** 索引スキャン
********* 全索引スキャン
- 索引全体を順に読み取る。
  ソートが不要。
********* 高速全索引スキャン
- 特定の順序に従わず索引ブロックを読み取る全索引スキャン。
- 次の2つの条件が満たされる場合に全表スキャンの代替となるスキャン
  - 問合せに必要な全ての列が索引に含まれている
  - すべてNULLの列が問い合わせの結果セットに現れない（以下条件）
    - NOT NULL制約が存在
    - 結果セットにNULLが含まれないように考えられた、列に適用される条件
********* 索引レンジ・スキャン
- 索引の順序付きスキャン
- 特性:
  - 索引の1つ以上の先頭列を条件に指定する
  - 0個、1個、または複数の値を索引キーにできる
- 一般的に、選択的なデータへのアクセスに使用する。
********* 索引の一意スキャン
- レンジスキャンと対照的に、ROWIDは0個または1個。
********* 索引スキップ・スキャン
- コンポジット索引の論理副索引を使用する。
  単一の索引をスキップする。
- コンポジット索引の先頭列に含まれる個別値が少数であり、索引の先頭以外のキーに多数の個別値がある場合に有効。
********* 索引クラスタ化係数
- 姓などの索引付きの値を対象に、行の順序性を測定した指標。
  行の記憶域の中でこの値に関する順序性がよいほど、クラスタ化係数は小さくなる。
- 確認: SELECT INDEX_NAME, CULSTERNIG FACTOR FROM ALL_INDEXES WHERE INDEX NAME IN (...);
******** 逆キー索引
******** 昇順索引と降順索引
******** キー圧縮
******* ビットマップ索引
******* ファンクション索引
******* アプリケーション・ドメイン索引
******* 索引記憶域
****** 索引構成表の概要
***** 4 パーティション、ビューおよびその他のスキーマ・オブジェクト
****** 順序の概要
- SEQUENCE
****** ディメンションの概要
- データウェアハウスには通常、ディメンションとファクトという2つの重要な要素がある。
***** 5 データ整合性
***** 6 データ・ディクショナリと動的パフォーマンス・ビュー
**** 第Ⅱ部
**** 第Ⅲ部
**** 第Ⅳ部
**** 第Ⅴ部
**** 第Ⅵ部
*** 2日でデータベース管理者
- https://docs.oracle.com/cd/E16338_01/server.112/b56320/toc.htm
**** 概要
**** インストールとデータベースの作成
**** データベース管理の概要
**** ネットワーク環境の構築
**** Oracleインスタンスの管理
**** データベース記憶域構造の管理
**** ユーザー・アカウントおよびセキュリティの管理
**** スキーマ・オブジェクトの管理
**** バックアップおよびリカバリの実行
**** データベースの監視およびチューニング
**** 問題の調査、報告及び解決
**** ソフトウェアの管理
**** 自動ストレージ管理の管理
*** 2日で開発者ガイド
*** Oracle Databaseパフォーマンス・チューニング・ガイド
- https://docs.oracle.com/cd/E16338_01/server.112/b56312/toc.htm
**** I パフォーマンス・チューニング
***** 1. パフォーマンス・チューニングの概要
**** II パフォーマンス計画
***** 2. パフォーマンスを考慮した設計と開発
***** 3. パフォーマンス改善方法
**** III インスタンスのパフォーマンスの最適化
**** IV SQL文の最適化
***** 11. 問合せオプティマイザ
***** 16. SQLチューニングの概要
***** 17. 自動SQLチューニング
****** 17.1 自動チューニング・オプティマイザの概要
****** 17.2 自動SQLチューニング・アドバイザの管理
****** 17.3 SQLチューニング・アドバイザによる事後対応のチューニング
****** 17.4 SQLチューニング・セットの管理
****** 17.5 SQLプロファイルの管理
****** 17.6 SQLチューニング・ビュー
*** 2日でパフォーマンス・チューニング・ガイド
- https://docs.oracle.com/cd/E16338_01/server.112/b56313/toc.htm
**** I スタートガイド
***** 概要
***** パフォーマンス・メソッド
**** II 事前チューニング
***** パフォーマンスの自動監視
***** リアルタイムなデータベースのパフォーマンスの監視
***** パフォーマンス・アラートの監視
**** III 事後チューニング
***** パフォーマンスの手動監視
***** 一時的なパフォーマンスの問題の解決
***** 時間の経過によるパフォーマンス低下の解決
**** IV SQLチューニング
***** 高負荷のSQL文の識別
***** SQL文のチューニング
***** データ・アクセス・パスの最適化
