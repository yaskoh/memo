* SQL Server

** memo

*** GROUPING SETS
-
  GROUP BY句で、どの単位でまとめるか複数の選択が可能。
  rollupやcubeだけでなく、柔軟な設定ができる。


*** データベースの種類
- master
  インスタンスレベルの構成情報やログインなどのセキュリティ情報
- model
  ユーザーデータベースのテンプレート
- msdb
  ジョブやスケジューリング関連情報
- tempdb
  一時テーブルやソートデータなどの格納
  パフォーマンスが要求されるため、専用のボリュームへ配置する。
  多数並行してtempdbのクエリが実行される場合、スペース管理をする特定のページにて
  競合が発生することが知られている。
  サイズが同じデータファイルをプロセッサと同数配置することで緩和できる。
  ドライブは分けなくともよい。
- resource
  システムメタデータ（表示されないが、binn内にmssqlsystemresource.mdf/ldfが存在
- ユーザdb
  ユーザが作成したもの。


*** 復旧モデル
- 完全(Full)復旧モデル
  トランザクションログへ全ての処理履歴を完全に記録する。
  Standard以上のデフォルト。
- 一括ログ(Bulk Logged)復旧モデル
  バルク操作する際のパフォーマンスを向上するために、
  ログの記録を最小限に抑えるモデル。
  完全モデルの補完
- 単純(Simple)復旧モデル
  チェックポイント時のログ切捨て。
  チェックポイントが完了する毎に
  現在実行しているトランザクション以外のログを切り捨てる。


*** 設定変更手段
- SQL Server構成マネージャ
  起動アカウント、起動モード等
- SQL Server Management Studio Object Explorer
  いつものSSMS。認証モード等、これでのみ変更可能なオプションあり。
- サーバオプション(sp_configue)
- DDLやシステムストアドプロシージャ
  自動拡張の設定など

※照合順序と導入フォルダは、導入後の変更が難しい。



*** 書き込みキャッシュ
- 
  書き込みキャッシュと拡張処理能力で、
  ディスクの書き込みがキャッシュされるか否か、
  およびFlush/Write-Throughコマンドを使用するか否か設定する。


*** パーティション開始位置
- 
  パーティションの開始位置をMBR後の64番目のセクタから開始するとパフォーマンスが向上する場合あり。
  Diskpart起動、"LIST DISK"で確認、"SELECT DISK X"、"Create Partition Primary Align = 64"とかする。


*** インスタントコピー機能
- スプリットミラー方式
  ミラーリングしていたRAIDアレイを、ミラーリングを解くことで瞬時に分割、バックアップとする。
  コピー前に同期が完了している必要があるため、バックアップ時は高速だが、普段はミラーリングのオーバーヘッドが発生する。
- コピーオンライト(Copy-On-Write,COW)方式
  書き換えがあった時に、元のデータを退避する方式。
  コピー前の準備時間は不要だが、実際のコピーが完了する際は時間がかかる。
上記をSQL Serverスナップショットバックアップで利用できるか、製品ごとに異なるので確認する必要あり。


*** データサイズ
- 
  データブロックの大きさはでかい方がよいので、I/Oパターンから考えるに64KでNTFSをフォーマットするとよい。

*** ファイルグループ
- 
  以下の場合にファイルグループを分ける意味あり。
  1. I/Oが集中するテーブルを他から分ける。
  2. 特定のデータをリストアする要件あり。
  3. パーティションテーブルを個別のファイルグループへ（運用が柔軟になることがある）
  4. 管理上、業務ごとにデータを分けたい。
  5. 特定のファイルグループをRead_onlyにしたい。

*** Read_Only
- 
  データベース単位だけでなく、ファイルグループ単位でRead_onlyに設定できる。


*** ネーミングルール
- 標準識別子
  - 先頭文字
    Unicode3.2の文字、及び_,@,#を使用可
    @で始まる識別子はローカル変数またはローカルパラメータ
    @@で始まる識別子が、一部のTransact-SQLで使われる。
    #で始まる識別子は一時テーブルまたは一時プロシージャ
    ##で始まる識別子はグローバルな一時オブジェクト
  - 先頭以外
    Unicode3.2、および各国の10進数、_,@,#,$を使用可能
- 区切られた識別子
  標準識別子でないもの。[]か""で囲んで使用する必要がある。


*** ページ
- 
  8KB。
  先頭96Byteがページヘッダ、そのあとがデータ。
  ページヘッダにはテーブル識別し等のシステム情報やペ−ジばんごう、ページ上の空き容量、前後のページへのポインタ等が含まれる。
  末尾から「行オフセットテーブル」が始まる。データ行の方向と逆方向に登録される。
  単一のオブジェクトのみに割り当てられる。

*** エクステント
- 
  8ページで1エクステント。64KB。
  - 混合エクステント
    複数のオブジェクトが入ったエクステント。
    テーブルページやインデックスページが混ざっているもの。
    新しいテーブルやインデックスを作成すると、まずは混合エクステントが作成される。
    8ページまで拡張すると、単一エクステントに切り替わる。
  - 単一エクステント
    単一のオブジェクトで構成されたエクステント。
    テーブルのエクステントなら、テーブルのページのみ8つが含まれる。
  I/Oアクセスは、基本1ページまたは1エクステント単位で行われる。更に大きい場合もあり。


*** データ型
**** 真数
- bigint, bit, decimal, int, numeric, smallint, money, tinyint, smallmoney
**** 概数
- float, real
**** 日付、時刻
- datetime, smalldate, date, time, datetime2, datetimeoffset
**** 文字列
- char, text, varchar
**** Unicode型
- nchar, ntext, nvarchar
**** バイナリ
- binary, image, varbinary
**** 空間データ型
- geometry, geography
**** その他
- cursor, timestamp, sql_variant, uniqueidentifier, table, xml, hierarchyd

**** 優先順位
- 
  異なるデータ型同士で演算を行った場合、優先順位の高いデータ型にあわせて変換される。
  sql_variant, xml, datetimeoffset, datetime2, datetime, smalldatetime, date, time, float, real, decimal, money, smallmoney,
  bigint, int, smallint, tinyint, bit, ntext, text, image, timestamp, uniqueidentifier, nvarchar, char, varvinary, binary


*** IDENTITY
- ロールバックした際に欠番が発生する可能性がある。
- 列の一意性を保つ機能ではないため、別途PRIMARY KEY制約やUNIQUE制約と合わせて使用する必要あり。


*** 行
- 
  行の最大サイズは8,060Byte。ページサイズからの制限。
  例外として、varchar, nvarchar, varbinary列を含む場合は行あたり8,060Byteを超えられる。
  ただし、各列の長さが8,000Byteに収まる必要がある。


*** rebulid, reorganize
- 
  reorganizeはトランザクションによる管理ができないため、
  ユーザトランザクションの内部で使わない。
  commit, rollbackしても結果が変わらないだけでなく、
  トランザクションの影響で、エクステントに対してロックがかかってしまう。
  rebuildはトランザクションによる管理が可能で、commit, rollbackに対応する。
  online処理にすると、実行中の参照･更新が可能だが、実行後はユーザトランザクション中はロックのままとなる。


