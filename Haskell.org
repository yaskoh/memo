* Haskell

** 構文

	・if
		Haskellでは必ずelseが必要。
		関数は、必ず値を返す必要があるので。

	・関数名に'(アポストロフィ）を含むことができる。
		慣習的には、正格版の関数を表したり、
		変更したバージョンに似た名前をつけるために利用される。

	・引数を取らない関数を「定義」とか「名前」と呼ぶ。
		ex: conanO'Brein = "It's a-me, Conan O'Brien!"

	・リスト
		一様なデータ構造。整数と文字のリスト、は作れない。
		[1,2,3]は単に1:2:3:[]のシンタックスシュガー。
		リストのリストの場合もデータ構造は一様である必要があるが、
		長さは異なっていても良い。
		ex: [[6,6,6],[1,2,3,4]]

	・レンジrange
		[1..5] は [1,2,3,4,5]と同じ。
		ex: ['a'..'z'] ⇒ "abcdefghijklmnopqrstuvwxyz"
		ステップを指定することもできる。
		ex: [2,4..20] ⇒ [2,4,6,8,10,12,14,16,18,20]


** 演算子(中置関数)
	論理演算子
		論理積 &&
		論理和 ||
		否定 not 
			ex: not False ⇒ True
	比較
		等しい ==
		等しくない /=

	リスト
		++ (連結)
			1つ目のリスト（左側）を最後まで走査するため、
			処理が重くなる可能性あり。
			二つのリストを引数として受け取る。([1,2,3,4] ++ 5は誤り。[5]とする。)

		: (cons演算子)
			先頭に追加
			ex: 'A':" SMALL CAT"⇒"A SMALL CAT"

		!!
			リスト要素へのアクセス。
			ex: "Steve Buscemi" !! 6 ⇒ 'B'

		<, <=, >=, > (比較)
			先頭の要素から順に比較していく。
			差異が出たところで打ち切り。

	:l load


** 関数
	中置関数
		ex: 5 * 4 の *
	前置関数
		ex: succ 8

	・関数は全ての演算で最も高い優先度を持つ。
		ex: succ 9 + max 5 4 + 1
			⇒(succ 9) + (max 5 4) + 1
			⇒10 + 5 + 1

	・2引数の前置関数は`(バッククオート)で挟むと中置関数として呼び出せる。
		ex: div 92 10 ⇒ 9
			92 `div` 10 ⇒ 9


	succ
		後者(succesor)を返す。
		ex: succ 8 ⇒ 9

	min
		ex: min 9 10 ⇒ 9
	max
		ex: max 9 10 ⇒ 10

	div
		ex: div 92 10 ⇒ 9

	let
		名前の定義(スクリプトでa=1と書くのとGHCi上でlet a = 1と書くことは等価）
		ex: let lostNumbers = [4,8,15,16,23,42]

	(リスト)

	head
		ex: head [5,4,3,2,1] ⇒ 5
	tail
		head以外を返す。
		ex: tail [5,4,3,2,1] ⇒ [4,3,2,1]
	last
		ex: last [5,4,3,2,1] ⇒ 1
	init
		最後の要素を除いたものを返す。
		ex: init [5,4,3,2,1] ⇒ [5,4,3,2]

	length
		ex: length [5,4,3,2,1] ⇒ 5

	null
		リストが空かどうかを調べる。
		ex: null [] ⇒ True , null [1] ⇒ False

	reverse
		ex: reverse [1,2,3,4,5] ⇒ [5,4,3,2,1]

	take
		先頭から指定された数の要素を取り出すしたリストを返す。
		ex: take 3 [5,4,3,2,1] ⇒ [5,4,3]
	drop
		先頭から指定された数の要素を除いたリストを返す。
		ex: drop 3 [5,4,3,2,1] ⇒ [2,1]

	maximum
		ex: maximum [1,9,2,3,4] ⇒ 9
	minimum
		ex: minimum [1,9,2,3,4] ⇒ 1

	sum
		ex: sum [1,3,9,2] ⇒ 15
	product
		ex: product [6,2,1,2] ⇒ 24

	elem
		要素とリストを受け取り、リストの要素に含まれるかどうか返す。
		中置関数として使うことが多い。
		ex: elem 4 [1,2,3] ⇒ False
			4 `elem` [1,2,3,4] ⇒ True




