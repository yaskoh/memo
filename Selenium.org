* Selenium
** Selenium WebDriver
*** About
- 起動
  java -jar selenium-server-standalone-*.jar

*** Architecture
- 
  各種ブラウザごとにドライバが用意されており、
  それらのドライバはJSON Wire ProtocolというSeleniumが定義しているRESTful APIに対応している。

- 
  ◆HTTP Client, Client Library (Java, Ruby, Python, C#, Perl, PHP, Javascript(Node.js))
    ↑ 
    JSON Wire Protocol
    ↓
  ◆Browser Drivers (Firefox Driver, Chrome Drive, IE Driver, etc.)
    ↑
    ブラウザの拡張機能、OSネイティブ機能
    ↓
  ◆Browser

**** Drivers
- 
  各ドライバによって形式や操作方法はさまざま。

***** Firefoxドライバ
- 
  Firefoxの拡張機能

***** Chromeドライバ
- 
  実行ファイル（バイナリ）
  http://chromedriver.storage.googleapis.com/index.html

**** Selenium Server
- 
  特定のドライバに対応していないライブラリの場合、Selenium Serverを利用する必要がある。
  Node.jsの2.44.0で対応しているのはFirefoxとChromeのみなので、その他のブラウザを利用したい場合など。
  
  Selenium ServerはJavaで書かれたサーバーで、クライアントとドライバの中継サーバとして振る舞うため、
  クライアントライブラリがドライバの管理をする必要がなくなる。
  
  公式ライブラリが用意されていない言語ではサードパーティクライアントが多数公開されているが、
  Selenium Serverの利用を前提としている場合が多い。

- 
  次のコマンドで起動する。
  java -jar selenium-server-standalone-xxx.jar

- Download
  http://www.seleniumhq.org/download/

- 
  ◆HTTP Client, Client Library (Java, Ruby, Python, C#, Javascript(Node.js))
    ↑ 
    JSON Wire Protocol
    ↓
  ◆Selenium Server
    ↑ 
    JSON Wire Protocol
    ↓
  ◆Browser Drivers (Firefox Driver, Chrome Drive, IE Driver, etc.)
    ↑
    ブラウザの拡張機能、OSネイティブ機能
    ↓
  ◆Browser

*** Setting up
**** Python
- pip install selenium
**** Java
**** C#
**** Ruby
**** Perl
**** JS
*** API
**** Python
- version 2.53.6
***** selenium
****** common
******* selenium.common.exceptions
******** exception TimeoutException
- TimeoutException(msg=None, screeen=None, stacktrace=None)
  Thrown when a command does not complete in enough time.
******** exception WebDriverException
- WebDriverException(msg=None, screen=None, stacktrace=None)
  Base webdriver exception.
****** webdriver
******* android
******* blackberry
******* chrome
******** selenium.webdriver.chrome.options
******** selenium.webdriver.chrome.remote_connection
******** selenium.webdriver.chrome.service
******** selenium.webdriver.chrome.webdriver
******* common
******** html5
********* selenium.webdriver.common.html5.application_cache
******** selenium.webdriver.common.action_chains
******** selenium.webdriver.common.alert
******** selenium.webdriver.common.by
********* class By
- By(object)
  Set of supported locator strategies.
******** selenium.webdriver.common.desired_capabilities
******** selenium.webdriver.common.keys
******** selenium.webdriver.common.proxy
******** selenium.webdriver.common.service
******** selenium.webdriver.common.touch_actions
******** selenium.webdriver.common.util
******* edge
******* firefox
******** selenium.webdriver.firefox.extension_connection
******** selenium.webdriver.firefox.firefox_binary
******** selenium.webdriver.firefox.firefox_profile
******** selenium.webdriver.firefox.options
******** selenium.webdriver.firefox.remote_connection
******** selenium.webdriver.firefox.service
******** selenium.webdriver.firefox.webdriver
********* class WebDriver
- WebDriver(RemoteWebDriver)
********** methods
*********** quit
********** properties
*********** firefox_profile
*********** set_context
******** selenium.webdriver.firefox.__init__
******* ie
******* opera
******* phantomjs
******* remote
******* safari
******* support
******** selenium.webdriver.support.abstract_event_listener
******** selenium.webdriver.support.color
******** selenium.webdriver.support.event_firing_webdriver
******** selenium.webdriver.support.events
******** selenium.webdriver.support.expected_conditions
********* title_contains
******** selenium.webdriver.support.select
******** selenium.webdriver.support.ui
********* Select (import from .select)
********* WebDriverWait (import from .wait)
******** selenium.webdriver.support.wait
********* class WebDriverWait
******* selenium.webdriver.__init__
******** Firefox(import WebDriver from .firefox.webdriver)
******** FirefoxProfile(import from .firefox.fireprofile)
******** Chrome(import WebDriver from .chrome.webdriver)
******** ChromeOptions(import Options from .chrome.options)
******** Ie(import WebDriver from .ie.webdriver)
******** Edge(import WebDriver from .edge.webdriver)
******** Opera(import WebDriver from .opera.webdriver)
******** Safari(import WebDriver from .safari.webdriver)
******** BlackBerry(import WebDriver from .blackberry.webdriver)
******** PhantomJS(import WebDriver from .phantomjs.webdriver)
******** Android(import WebDriver from .android.webdriver)
******** Remote(import WebDriver from .remote.webdriver)
******** DesiredCapabilities(import .common.desired_capabilities)
******** ActionChains(import .common.action_chains)
******** TouchActions(import .common.touch_actions)
******** Proxy(import .common.proxy)
****** selenium.selenium
******* class selenium(builtins.object)
- 
  Defines an object that runs Selenium commands
******** Element Locators
******** Element Filters
******** String-match Patterns
******** Methods
********* __init__
- __init__(self, host, port, browserStartCommand, browserURL, http_timeout=90)
********* add_CustomRequestHeader
- add_CustomRequestHeader(self, key, value)
** Selenium IDE
- 
  Firefoxプラグイン。

** History
- [[http://blog.trident-qa.com/2013/05/so-many-seleniums/][Selenium何とかっていうツールがやたら色々あるのはどういうわけなのか - 品質向上ブログ]]

*** Selenium Core
- 
  原型は、2004年に米ThoughtWorks社で働いていたJason Huggins氏により作られた社内向けツール。

*** Selenium RC (Remote Control)
- 
  Selenium 1とも。
  コマンドをSeleneseという。
  
*** Selenium IDE
- 
  ユーザのブラウザ操作を記録して、そこからSeleniumのスクリプトを生成するFirefoxプラグイン。
  
*** WebDriver
- 
  2006年、GoogleのSimon Stewartが開発着手。
  ブラウザ操作をJavaScriptでなく、ブラウザの拡張機能やOSネイティブの機能を使って行う仕組み。
  そのためSelenium Serverのような中継サーバも不要となる。

- https://w3c.github.io/webdriver/webdriver-spec.html

*** Selenium WebDriver
- 
  2011/7, Selenium RCとWebDriverを統合したもの。
  どちらのコマンドも使えるが、WebDriverのコマンドが優れているので、そちらを利用するのが良い。
  Selenium 2 とも。
*** Selenium Builder
- 
  Firefox拡張。
  Selenium IDEはSelenium RCの機能しか利用できないので、
  Selenium WebDriverの機能を利用できるSelenium Builderの開発が活発。

** Memo
*** JSON Wire Protocol
- [[https://code.google.com/p/selenium/wiki/JsonWireProtocol][The WebDriver Wire Protocol - selenium]]

** Link
- [[http://www.seleniumhq.org/][SeleniumHQ]]
- [[https://app.codegrid.net/entry/selenium-1][入門、Selenium - CodeGrid]]

*** API
- [[http://stackoverflow.com/questions/5644868/webdriver-selenium-2-api-documentation][WebDriver (Selenium 2) API documentation - stackoverflow]]
- [[http://seleniumhq.github.io/selenium/docs/api/py/api.html][Selenium Documentation (Python)]]

*** Python
- [[http://selenium-python.readthedocs.io/#][Selenium with Python]]
