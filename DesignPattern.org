* DesignPattern

** 指針

*** Design Patterns in Ruby
1. 変わるものを変わらないものから分離する
2. インターフェイスに対してプログラムし、実装に対して行わない
3. 継承より集約
4. 委譲、委譲、委譲
5. 必要になるまで作るな

** GoF

*** Creational

**** Singleton

**** Factory

**** Builder

*** Structual

**** Composite
- 
  木構造を伴う再起的なデータ構造を表すことができる。
  「枝」と「葉」で共通のインターフェイスを実装しているため、同様に扱える。

**** Adapter

**** Proxy

**** Decorator

*** Behavioral

**** Template Method
- 
  ある処理の大まかなアルゴリズムをあらかじめ決めておいて、
  そのアルゴリズムの具体的な設計をサブクラスに任せること。

  その骨格となるメソッド（テンプレートメソッドと呼ばれる）を持った抽象基底クラスを構築し、
  実際の処理は具象サブクラスが提供する。

- フックメソッド
  具象クラスによってオーバーライドできる非抽象メソッドをフックメソッドと呼ぶ。
  フックメソッドではオーバーライドすることで別の振る舞いを持たせるか、標準実装をそのまま使うか選ぶことができる。

**** Strategy
- 
  一連のアルゴリズムをカプセル化し、アルゴリズムの切り替えを容易にする。
  Rubyはコードブロックがオブジェクトとして扱えるので、コードブロックの切り替えで扱える。

**** Observer
- 
  発信するオブジェクトをsubject、更新に関心があるオブジェクトをobserverという。
  オブザーバまたはリスナーと呼ばれる一つ以上のオブジェクトを、
  サブジェクトと呼ばれる対象オブジェクトが発生するイベントを観察するために登録する。

**** Iterator
- 
  集約オブジェクトがもとにある内部構造を公開せずに、その要素に順にアクセスする方法を提供する。

**** Command

**** Interpreter
