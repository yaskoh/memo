* DesignPattern

** 指針

*** Design Patterns in Ruby
1. 変わるものを変わらないものから分離する
2. インターフェイスに対してプログラムし、実装に対して行わない
3. 継承より集約
4. 委譲、委譲、委譲
5. 必要になるまで作るな

** GoF

*** Creational

**** Singleton
- 
  あるクラスについて、インスタンスが単一であることを保証する。
  唯一のオブジェクトで、グローバルにアクセスが可能なオブジェクトを用意する。
  シングルトンを唯一の通信チャンネルのように使うと、密結合となるため行うべきでない。
  テストへ対処する場合、唯一のオブジェクトという性質上状態の保持が難しいので、
  テスト用にクラスを継承する等して、そのインスタンスに対してテストを行うなどの工夫が必要。

**** Abstract Factory
- 
  関連する一連のインスタンスを、状況に応じて適切に生成する方法を提供する。
  Strategyパターンと似ている（らしい）。
  矛盾のないオブジェクトの組を作りたい場合に使う。

**** Factory Method
- 
  実際に生成されるインスタンスに依存しないインスタンスの生成方法を提供する。
  Temlate Methodを使ってオブジェクトを生成するパターン。

**** Builder
- 
  複合化されたインスタンスの生成過程を隠蔽する。
  オブジェクトの生成過程を抽象化することによって、動的なオブジェクトの生成を可能にする。
  オブジェクト生成に関する複雑なところを隠蔽することや、無効なオブジェクトを作ることを予防することなどができる。
  再利用時には注意が必要。

*** Structual

**** Composite
- 
  木構造を伴う再起的なデータ構造を表すことができる。
  「枝」と「葉」で共通のインターフェイスを実装しているため、同様に扱える。

**** Adapter
- 
  既存のクラスに変更を加えずインターフェースを変更する。
  必要なインターフェースと既存のオブジェクトとの間の違いを吸収するためのもの。

**** Proxy
- 
  共通のインターフェースを持つインスタンスを内包し、利用者からのアクセスを代理する。
  Adapterと違いインターフェイスを変えない。
  防御プロキシー、リモートプロキシー、仮想プロキシーが例としてRubyによるデザインパターンでは登場した。

**** Decorator
- 
  あるインスタンスに対し、動的に付加機能を追加する。
  Decoratorクラスが、デコレータのチェーンの次のComponentクラスの参照を持つ。

*** Behavioral

**** Template Method
- 
  ある処理の大まかなアルゴリズムをあらかじめ決めておいて、
  そのアルゴリズムの具体的な設計をサブクラスに任せること。

  その骨格となるメソッド（テンプレートメソッドと呼ばれる）を持った抽象基底クラスを構築し、
  実際の処理は具象サブクラスが提供する。

- フックメソッド
  具象クラスによってオーバーライドできる非抽象メソッドをフックメソッドと呼ぶ。
  フックメソッドではオーバーライドすることで別の振る舞いを持たせるか、標準実装をそのまま使うか選ぶことができる。

**** Strategy
- 
  一連のアルゴリズムをカプセル化し、アルゴリズムの切り替えを容易にする。
  Rubyはコードブロックがオブジェクトとして扱えるので、コードブロックの切り替えで扱える。

**** Observer
- 
  発信するオブジェクトをsubject、更新に関心があるオブジェクトをobserverという。
  オブザーバまたはリスナーと呼ばれる一つ以上のオブジェクトを、
  サブジェクトと呼ばれる対象オブジェクトが発生するイベントを観察するために登録する。

**** Iterator
- 
  集約オブジェクトがもとにある内部構造を公開せずに、その要素に順にアクセスする方法を提供する。

**** Command
- 
  動作とそれに伴うパラメータをカプセル化する。
  何を行うかの決定と、その実行とを分離する。

**** Interpreter
- 
  構文解析のために、文法規則を反映するクラス構造を作る。
  ドメインに特化した言語を実装する。
