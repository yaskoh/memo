* CPU
** CISC
- 
  Complex Instruction Set Computer。
  RISCが出現した時に、従来のISA（命令セットアーキテクチャ）は複雑である、として名付けられた。

*** x86
**** Generation
***** 1st
****** 8080
- 
  8bit CPU.

****** 8086
- 第一世代
  16bit CPU.
  8080からの移行を容易にすることを主眼に置いて開発された。

******* 8087
- 
  数値計算専用のチップで、8086と協調して動作する。
  コプロセッサ(CoProcessor)とも呼ばれる。

******* 8088
- 
  8086と同一アーキテクチャで、外部データバスを8bitにしたもの。
  メモリのアクセスに倍の時間がかかるが、コストが下げられる。

****** 80186
- 改定第一世代
  8086に命令の種類が追加されている。
  それ以外はほぼ8086と同じ。

***** 2nd
****** 80286
- 第二世代
  プロテクトモードが導入された。
  アドレスバスが24ビットに拡張され、16Mバイトまでのメモリを扱えるようになった。
  ただしセグメントの最大サイズは64Kバイト。

***** 3rd
****** 80386
- 第三世代
  32ビットCPU。
  セグメントの最大サイズが4GBに拡張された。
  仮想8086モードとページング機能が追加されている。
  外部データバスが32ビット幅を持つ。

******* 386SX
- 
  386DXと内部アーキテクチャは同じ。外部データバスのみ16ビットとなっている。

***** 4th
****** 486
- 
  第四世代

******* Series
******** 486SX, 487SX
- 
  486SXではFPUが無効にされている。487SXを追加することで不動小数点演算機能を追加できる。
  487SXは、一部のピンを除き486DXと同じもの。486SXを搭載したコンピュータに487SXを装着すると、486SXが動作を停止し、487SXが代わりに動作する。

******** 486DX2
- 
  クロックダブラーという技術を使って高速化を実現。
  CPU内部のクロック速度だけを高速にするもの。

******** ODP
- Over Drive Processor
  486DX2をユーザー向けの製品にしたもの。

******** DX4
- 
  CPU内部のクロック速度を3倍に引き上げるクロックトリプラー回路を内蔵。

******* 機能
- 基本機能/一般命令
  基本的な演算など。
  メモリやレジスタ間のデータ転送、加減乗除、条件分岐など。
  通常の方法でプログラムを作成する限り、一般命令以外の命令を使うことはない。

- システム管理機能/特殊命令
  OSのメモリ管理や保護機能を実現するためのもの。
  システムレジスタを特殊命令で操作することによって操作する。
  プロテクトモードで動作するOSでは、内部で特殊命令を実行することで、486のメモリ管理やタスク管理の機能を働かせている。
  高級言語では特殊命令を記述できないので、アセンブリ言語で記述する必要がある。

****** アーキテクチャ
- アドレスバス
  4GBのメモリ空間から任意の1バイト、あるいは2バイト、4バイトを選択するための32ビットのアドレスデータ、
  および任意のI/Oポートを選択するためのアドレスデータが通るバス。

- IOアドレスバス
  16本。
  アドレスバスのA0~A15の下位16本(ビット)が接続されている。
- データバス
  32本

***** 5th
****** Pentium
- 
  第五世代

***** 6th
****** Pentium Pro
****** Celeron
****** Xeon
***** 7th
****** Pentium 4
***** 8th
****** Intel Core 2
****** Nehalem/Westmere
- Intel Core i3, i5, i7
***** 9th
****** Sandy Bridge/Ivy Bridge
- Intel Core i3, i5, i7
****** Haswell/Broadwell
- Intel Core i3, i5, i7
***** 10th
****** Skylake/Kaby Lake/Cannonlake
- Intel Core i3, i5, i7j
**** 486 Architecture
***** About
****** Architecture
******* 32Bit Architecture
******** 32Bit Bus
******* Segment Mechanism
******* Paging Mechanism
******* Cache Memory
******** Write Through
- キャッシュメモリに書き込むと同時に本体のメモリにも書き込みを行う

******** Write Back
- メモリに書き込んだ時点でCPUは次の処理に進み、本来のメモリの書き込みはその後の別なタイミングで行う。

******* FPU
****** Function
******* 基本機能
- 
  演算を行い結果を出力する、ほとんどのCPUについて共通の機能

- 一般命令
  メモリやレジスタ間のデータ転送や、加減算や乗除算、条件分岐などの命令。
  通常のアプリケーションは一般命令のみをつって記述される。

******* システム管理機能
- 
  オペレーティングシステムのメモリ管理や保護機能を実現するために用意されている。

- 特殊命令
  CPU内のシステムレジスタを変更したり、参照したりする命令。
  内部で特殊命令を実行することによって、メモリ管理やタスク管理の機能を働かせている。
****** Register
******* 一般レジスタ群
- 
  全てのソフトウェアが利用するレジスタ群。

******** 汎用レジスタ
- EAX, EBX, ECX, EDX, ESI, EDI

******** ベースポインタ
- EBP

******** スタックポインタ
- ESP

******** インストラクションポインタ
- EIP
  CSで指定されたセグメントのオフセットアドレス。
  マシン語命令を指し示す。

******** フラグレジスタ
- EFLAGS

******** セグメントレジスタ
- CS
  マシン語命令を読み込むセグメントを指し示す。
  オフセットアドレスはIP(EIP)。

- DS
  命令の実行時に参照する。

- ES, FS, GS
  予備のセグメントレジスタ。
  DS以外にセグメントにアクセスしたい場合に使われる。
  セグメントオーバーライドプリフィックスをつけてメモリの指定を行う。
  ex) mov ax,es:[0080h]

- SS
  スタック領域を指し示す。
  BPレジスタはスタック領域中の変数を指し示す役割を持っている。

******* 浮動小数点レジスタ群
- 
  浮動小数点演算を行うプログラムが利用する。
  386まではFPUとして独立したチップでサポートしていた。

******** 浮動小数点レジスタ

******** コントロールレジスタ

******** ステータスレジスタ

******** タグワード

******** エラーポインタ

******* システムレジスタ群
- 
  オペレーティングシステムが管理するレジスタ郡。
  これらレジスタに適切な値をセットすることでメモリ管理やタスク管理機能を働かせる。
  一般のアプリケーションからは利用できない。

******** システムアドレスレジスタ
- GDTR, IDTR, LDTR, TR
- GDTR
  グローバルディスクリプタテーブルレジスタ。
  このレジスタにディスクリプタテーブルのリニアアドレスをロードしておくことにより、
  CPUがディスクリプタテーブルを参照できるようにする。
  
  リミット値(16bit), 先頭アドレス(32bit）より成る。
  GDTRに割り当てた後、LGDT命令を実行することでGDTRがディスクリプタテーブルを指し示すようになる。

******** コントロールレジスタ
- CR0, CR1, CR2, CR3

********* CR0
- PEビット
  Protection Enable Bit。
  1にセットすることでプロテクトモードに、0にセットすることでリアルモードに切り替わる。

******* デバッグレジスタ群
- 
  デバッグレジスタは386から追加された、主にデバッガが利用するレジスタ。
  プログラムの実行状況を確認するために利用する。
  テストレジスタは486から追加されたレジスタ。
  キャッシュメモリやページング機構の動作テストを行うためのレジスタで、
  OSや診断プログラムが使用する。

******** デバッグレジスタ
- DR0, DR1, ... , DR7

********* DR6
- 
  ステータスレジスタ

- 構造
  
********* DR7
- 
  デバッグコントロールレジスタ

******** テストレジスタ
- TR3, TR4, TR5, TR6, TR7
****** Calculation
******* Clock Doubler
- 
  クロック速度を倍速化する技術。CPU内部の処理のみ2倍の速度で実行される。
***** Unit
***** Mode
****** Real mode
- 
  従来の8086と同様の動作をするモード。
  起動時に使われる。

  リアルモードへ移るにはCR0のPEビットを0にリセットする。
  割り込みの設定、セグメントの設定等の手順を踏んでリアルモードへ移行する。

- 移行手順
  - 割り込みの設定
    - IDTRの再設定
  - セグメントの設定
    - セグメントディスクリプタキャッシュの再設定
  - リアルモードへの移行
    - CR0のPEビットを0にリセット
    - セグメントレジスタの再設定
  - アドレス制限の設定
    - アドレスバス A20ビットのマスク設定
  
****** Protect mode
- 
  拡張機能が有効になったモード。
  拡張機能を利用してメモリ管理やタスク管理を行う。

  CR0のPEビットを1にセットすると、リアルモードからプロテクトモードに移行する。
  逆にリアルモードへ移動する場合は、PEビットを0にセットすればよい。

- 移行手順
  - セグメントの設定
    - GDTの作成
    - GDTRの設定
  - 割り込みの設定
    - IDTの作成
    - IDTRの設定
  - アドレス制限の解除
    - アドレスバス A20ビットのマスク解除
  - プロテクトモードへの移行
    - CR0のPEビットをセット
    - セグメントレジスタの再設定

****** Virtual 8086 mode
- 
  プロテクトモードの状態のまま、8086と同様の動作を行うモード。

***** Segment
- 
  メモリの指定は、セグメントアドレスとオフセットアドレスで行う。
  セグメントアドレスを先頭のリニアアドレスに変換する（セグメントベース）。
  次にセグメントベースにオフセットアドレスを加え、リニアアドレスを算出する。

****** リアルモード
- 
  セグメントアドレスは、セグメントベースと固定的に対応する。
  セグメントアドレスが4A56(H)だとすると、セグメントベースは4A560(H)となる。

****** プロテクトモード
- プロテクトモードでセグメントを利用するための準備
  1. メモリの割り当てを決める
  2. ディスクリプタテーブルを作る
  3. GDTRにディスクリプタテーブルのアドレスをロードする

- セレクタ値
  リアルモードではセグメントレジスタにセットする値を「セグメントアドレス」と呼んだが、
  プロテクトモードではセグメントを選択し指定するという意味から「セレクタ値」という。

  0008(H), 0010(H), 0018(H), 0020(H)と、8つおきとびとびの値を用いる。

******* セグメントディスクリプタ
- 
  セグメントのセレクタ値とリニアアドレスとを対応づけるもの。
  セグメントベース、セグメントの大きさを表すリミット値、セグメントの属性の3種類の情報から成る。
  セグメントディスクリプタは、セレクタ値の順にディスクリプタテーブルに格納されている。

  セグメントテーブルには命令実行のたびにアクセスしているわけでなく、
  セレクタ値をロードすると「セグメントディスクリプタキャッシュ」というキャッシュにも自動的にロードされる。

- 種類
  - GDT
    グローバルディスクリプタテーブル。
    システム中にひとつだけ存在し、
    すべてのプログラムから共通に参照されるセグメントを定義するためのテーブル。

  - LDT
    ローカルディスクリプタテーブル。
    タスク1つにつき1つ存在する。

  - IDT
    割り込みディスクリプタテーブル。
    割り込みの設定に使われる。


- 286のセグメントディスクリプタ

  (セグメントディスクリプタ)
  |---+---+---+---+---+---+---+---|
  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
  |---+---+---+---+---+---+---+---|
  
  |------------------+----------+----------|
  | 種類             | 割り当て | 大きさ   |
  |------------------+----------+----------|
  | リミット値       | 1, 0     | 16 bit   |
  | セグメントベース | 4, 3, 2  | 24 bit   |
  | 属性             | 5        | 8 bit    |
  | 未割り当て       | 6,7      | (16 bit) |
  |------------------+----------+----------|

- 486のセグメントディスクリプタ
  
  |------------------+-------------+--------|
  | 種類             | 割り当て    | 大きさ |
  |------------------+-------------+--------|
  | リミット値       | 6(下), 1, 0 | 20 bit |
  | セグメントベース | 7, 4, 3, 2  | 32 bit |
  | 属性             | 6（上), 5   | 12 bit |
  |------------------+-------------+--------|

***** Protection
****** 特権管理
***** Interrupt
***** Task
***** Paging
***** Security
*** z/Architecture

** RISC
- 
  Reduced Instruction Set Computer
  命令の種類を減らし、回路を単純化して演算速度の向上を図る設計手法。

*** Alpha

*** ARM

*** Atmel AVR
- 
  Atmel社が製造している、RISCベースの8ビットマイクロコンピュータ製品群の総称。
  1996年に開発された。

*** PIC
- 
  Peripheral Interface Controllerの略。
  Microchip Technology Inc.が製造しているマイクロコントローラ製品群の総称。

- 
  CPU、メモリ(RAM、ROM)、I/Oなどが1チップにおさめられており、
  ROMに書込まれたプログラムにより制御される。

*** SPARC
- 
  
