* CPU

** x86

*** 486

**** モード

***** リアルモード
- 
  従来の8086と同様の動作をするモード。
  起動時に使われる。

  リアルモードへ移るにはCR0のPEビットを0にリセットする。
  割り込みの設定、セグメントの設定等の手順を踏んでリアルモードへ移行する。

***** プロテクトモード
- 
  拡張機能が有効になったモード。
  拡張機能を利用してメモリ管理やタスク管理を行う。

  CR0のPEビットを1にセットすると、リアルモードからプロテクトモードに移行する。
  逆にリアルモードへ移動する場合は、PEビットを0にセットすればよい。

  セグメントの設定、割り込みの設定、アドレス制限の解除等の手順を追ってプロテクトモードへ移行する。

***** 仮想8086モード
- 
  プロテクトモードの状態のまま、8086と同様の動作を行うモード。

**** レジスタ

***** 一般レジスタ群
- 
  全てのソフトウェアが利用するレジスタ群。

****** 汎用レジスタ
- EAX, EBX, ECX, EDX, ESI, EDI

****** ベースポインタ
- EBP

****** スタックポインタ
- ESP

****** インストラクションポインタ
- EIP
  CSで指定されたセグメントのオフセットアドレス。
  マシン語命令を指し示す。

****** フラグレジスタ
- EFLAGS

****** セグメントレジスタ
- CS
  マシン語命令を読み込むセグメントを指し示す。
  オフセットアドレスはIP(EIP)。

- DS
  命令の実行時に参照する。

- ES, FS, GS
  予備のセグメントレジスタ。
  DS以外にセグメントにアクセスしたい場合に使われる。
  セグメントオーバーライドプリフィックスをつけてメモリの指定を行う。
  ex) mov ax,es:[0080h]

- SS
  スタック領域を指し示す。
  BPレジスタはスタック領域中の変数を指し示す役割を持っている。


***** 浮動小数点レジスタ群
- 
  浮動小数点演算を行うプログラムが利用する。
  386まではFPUとして独立したチップでサポートしていた。

****** 浮動小数点レジスタ

****** コントロールレジスタ

****** ステータスレジスタ

****** タグワード

****** エラーポインタ

***** システムレジスタ群
- 
  オペレーティングシステムが管理するレジスタ郡。
  これらレジスタに適切な値をセットすることでメモリ管理やタスク管理機能を働かせる。
  一般のアプリケーションからは利用できない。

****** システムアドレスレジスタ
- GDTR, IDTR, LDTR, TR
- GDTR
  グローバルディスクリプタテーブルレジスタ。
  このレジスタにディスクリプタテーブルのリニアアドレスをロードしておくことにより、
  CPUがディスクリプタテーブルを参照できるようにする。
  
  リミット値(16bit), 先頭アドレス(32bit）より成る。
  GDTRに割り当てた後、LGDT命令を実行することでGDTRがディスクリプタテーブルを指し示すようになる。

****** コントロールレジスタ
- CR0, CR1, CR2, CR3

- CR0
  - PEビット
    Protection Enable Bit。
    1にセットすることでプロテクトモードに、0にセットすることでリアルモードに切り替わる。

***** デバッグレジスタ群
- 
  デバッグレジスタは386から追加された、主にデバッガが利用するレジスタ。
  プログラムの実行状況を確認するために利用する。
  テストレジスタは486から追加されたレジスタ。
  キャッシュメモリやページング機構の動作テストを行うためのレジスタで、
  OSや診断プログラムが使用する。

****** デバッグレジスタ
- DR0, DR1, ... , DR7

****** テストレジスタ
- TR3, TR4, TR5, TR6, TR7
**** セグメント
- 
  メモリの指定は、セグメントアドレスとオフセットアドレスで行う。
  セグメントアドレスを先頭のリニアアドレスに変換する（セグメントベース）。
  次にセグメントベースにオフセットアドレスを加え、リニアアドレスを算出する。

***** リアルモード
- 
  セグメントアドレスは、セグメントベースと固定的に対応する。
  セグメントアドレスが4A56(H)だとすると、セグメントベースは4A560(H)となる。

***** プロテクトモード
- プロテクトモードでセグメントを利用するための準備
  1. メモリの割り当てを決める
  2. ディスクリプタテーブルを作る
  3. GDTRにディスクリプタテーブルのアドレスをロードする

- セレクタ値
  リアルモードではセグメントレジスタにセットする値を「セグメントアドレス」と呼んだが、
  プロテクトモードではセグメントを選択し指定するという意味から「セレクタ値」という。

  0008(H), 0010(H), 0018(H), 0020(H)と、8つおきとびとびの値を用いる。

****** セグメントディスクリプタ
- 
  セグメントのセレクタ値とリニアアドレスとを対応づけるもの。
  セグメントベース、セグメントの大きさを表すリミット値、セグメントの属性の3種類の情報から成る。
  セグメントディスクリプタは、セレクタ値の順にディスクリプタテーブルに格納されている。

  セグメントテーブルには命令実行のたびにアクセスしているわけでなく、
  セレクタ値をロードすると「セグメントディスクリプタキャッシュ」というキャッシュにも自動的にロードされる。

- 種類
  - GDT
    グローバルディスクリプタテーブル。
    システム中にひとつだけ存在し、
    すべてのプログラムから共通に参照されるセグメントを定義するためのテーブル。

  - LDT
    ローカルディスクリプタテーブル。
    タスク1つにつき1つ存在する。

  - IDT
    割り込みディスクリプタテーブル。
    割り込みの設定に使われる。


- 286のセグメントディスクリプタ

  (セグメントディスクリプタ)
  |---+---+---+---+---+---+---+---|
  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
  |---+---+---+---+---+---+---+---|
  
  |------------------+----------+----------|
  | 種類             | 割り当て | 大きさ   |
  |------------------+----------+----------|
  | リミット値       | 1, 0     | 16 bit   |
  | セグメントベース | 4, 3, 2  | 24 bit   |
  | 属性             | 5        | 8 bit    |
  | 未割り当て       | 6,7      | (16 bit) |
  |------------------+----------+----------|

- 486のセグメントディスクリプタ
  
  |------------------+-------------+--------|
  | 種類             | 割り当て    | 大きさ |
  |------------------+-------------+--------|
  | リミット値       | 6(下), 1, 0 | 20 bit |
  | セグメントベース | 7, 4, 3, 2  | 32 bit |
  | 属性             | 6（上), 5   | 12 bit |
  |------------------+-------------+--------|


**** OSの役割

***** プロセス管理

****** マルチタスク

- イベント駆動
  イベントを待つタイミングで他のタスクに切り替える
  完全なマルチタスクでないという意味で「擬似マルチタスク」という。

- プリエンプティブ
  一定時間毎にハードウェア割り込みを発生させる回路を利用して、次のタスクに切り替える。
  「完全なマルチタスク」とも呼ばれる。

***** メモリ管理

****** メモリ割り当て
- 
  アプリケーションソフトウェアの要求に応じて、メモリを割り当てたり、回収したりする機能。
  システム領域とユーザ領域に分けられる。

****** メモリ保護
- 
  プログラムからアクセスできるメモリ領域を制限する機能。
  他のアプリケーションのメモリにアクセスできないように制限する。

- アドレス変換機能
  タスクごとにアドレスの対応を変えることによって、すべてのアドレスを自分のメモリのように使える機能。
  逆に、他のタスクのメモリやOSのメモリにはアクセスできないこととなる。

- MMU (Memory Management Unit)
  アドレス変換はMMUによって実現されている。
  アドレス変換表を内部に持ち、それに沿って送られてきた指示番号のアドレス部分を変換する。
  小さな領域を連続した領域として見せることもできる。

- 論理アドレスと物理アドレス
  MMUを通る前のアドレスが論理アドレス、MMUを通り実際にアクセスするアドレスを物理アドレスという。
  その対応状態をメモリマッピングという。

****** 仮想記憶
- 
  実際に搭載されているよりも多くのメモリ領域があるように見せる機能。
  メモリの内容を主記憶へ退避する事で、より多くのメモリが存在するように見せる。
  MMUにメモリ上にデータが存在するかどうかのフラグがある。

***** ファイルシステム

***** 入出力管理

