* CPU
** Type
*** CISC
- Complex Instruction Set Computer。
  RISCが出現した時に、従来のISA（命令セットアーキテクチャ）は複雑である、として名付けられた。
**** x86
***** Generation
****** 1st
******* 8080
- 
  8bit CPU.

******* 8086
- 第一世代
  16bit CPU.
  8080からの移行を容易にすることを主眼に置いて開発された。

******** 8087
- 
  数値計算専用のチップで、8086と協調して動作する。
  コプロセッサ(CoProcessor)とも呼ばれる。

******** 8088
- 
  8086と同一アーキテクチャで、外部データバスを8bitにしたもの。
  メモリのアクセスに倍の時間がかかるが、コストが下げられる。

******* 80186
- 改定第一世代
  8086に命令の種類が追加されている。
  それ以外はほぼ8086と同じ。

****** 2nd
******* 80286
- 第二世代
  プロテクトモードが導入された。
  アドレスバスが24ビットに拡張され、16Mバイトまでのメモリを扱えるようになった。
  ただしセグメントの最大サイズは64Kバイト。

****** 3rd
******* 80386
- 第三世代
  32ビットCPU。
  セグメントの最大サイズが4GBに拡張された。
  仮想8086モードとページング機能が追加されている。
  外部データバスが32ビット幅を持つ。

******** 386SX
- 
  386DXと内部アーキテクチャは同じ。外部データバスのみ16ビットとなっている。

****** 4th
******* 486
- 
  第四世代

******** Series
********* 486SX, 487SX
- 
  486SXではFPUが無効にされている。487SXを追加することで不動小数点演算機能を追加できる。
  487SXは、一部のピンを除き486DXと同じもの。486SXを搭載したコンピュータに487SXを装着すると、486SXが動作を停止し、487SXが代わりに動作する。

********* 486DX2
- 
  クロックダブラーという技術を使って高速化を実現。
  CPU内部のクロック速度だけを高速にするもの。

********* ODP
- Over Drive Processor
  486DX2をユーザー向けの製品にしたもの。

********* DX4
- 
  CPU内部のクロック速度を3倍に引き上げるクロックトリプラー回路を内蔵。

******** 機能
- 基本機能/一般命令
  基本的な演算など。
  メモリやレジスタ間のデータ転送、加減乗除、条件分岐など。
  通常の方法でプログラムを作成する限り、一般命令以外の命令を使うことはない。

- システム管理機能/特殊命令
  OSのメモリ管理や保護機能を実現するためのもの。
  システムレジスタを特殊命令で操作することによって操作する。
  プロテクトモードで動作するOSでは、内部で特殊命令を実行することで、486のメモリ管理やタスク管理の機能を働かせている。
  高級言語では特殊命令を記述できないので、アセンブリ言語で記述する必要がある。

******* アーキテクチャ
- アドレスバス
  4GBのメモリ空間から任意の1バイト、あるいは2バイト、4バイトを選択するための32ビットのアドレスデータ、
  および任意のI/Oポートを選択するためのアドレスデータが通るバス。

- IOアドレスバス
  16本。
  アドレスバスのA0~A15の下位16本(ビット)が接続されている。
- データバス
  32本

****** 5th
******* Pentium
- 
  第五世代

****** 6th
******* Pentium Pro
******* Celeron
******* Xeon
****** 7th
******* Pentium 4
****** 8th
******* Intel Core 2
******* Nehalem/Westmere
- Intel Core i3, i5, i7
****** 9th
******* Sandy Bridge
- 第2世代Intel Core i3, i5, i7
  2011/1/9
******* Ivy Bridge
- 第3世代Intel Core i3, i5, i7
  2012/4/29
******* Haswell
- 第4世代Intel Core i3, i5, i7
  2013/6/2
- 22nm
******* Broadwell
- 第5世代Intel Core i3, i5, i7
  2015/6l18
- 14nm
****** 10th
******* Skylake
- 第6世代Intel Core i3, i5, i7j
  2015/8/7
- 14nm
******* Kaby Lake
- 第7世代Intel Core i3, i5, i7
  2017/1/6
  Core i7 7700Kなど7000番台
- 14nm+
- CPUソケット : LGA1151
******* Coffee Lake
- 第8世代Intel Core i3, i5, i7
  Core i7 8700Kなど8000番台
- プロセスルール : 14nm++
- CPUソケット : LGA1151(第6・7世代と互換性なし)
******* Cannonlake
- 第8世代
****** 11th
******* Ice Lake
****** 末尾のアルファベット
- X : Extream、特別性能が高いCPU
- K : アンロック対応、オーバークロック可
- P : 内臓GPU非対応、グラッフィックボード要
- S : 性能と消費電力のバランス・効率重視
- T : 低消費電力
- C, R : 高性能GPU搭載(第五世代のみ)
***** 486 Architecture
****** About
******* Architecture
******** 32Bit Architecture
********* 32Bit Bus
******** Segment Mechanism
******** Paging Mechanism
******** Cache Memory
********* Write Through
- キャッシュメモリに書き込むと同時に本体のメモリにも書き込みを行う

********* Write Back
- メモリに書き込んだ時点でCPUは次の処理に進み、本来のメモリの書き込みはその後の別なタイミングで行う。

******** FPU
******* Function
******** 基本機能
- 
  演算を行い結果を出力する、ほとんどのCPUについて共通の機能

- 一般命令
  メモリやレジスタ間のデータ転送や、加減算や乗除算、条件分岐などの命令。
  通常のアプリケーションは一般命令のみをつって記述される。

******** システム管理機能
- 
  オペレーティングシステムのメモリ管理や保護機能を実現するために用意されている。

- 特殊命令
  CPU内のシステムレジスタを変更したり、参照したりする命令。
  内部で特殊命令を実行することによって、メモリ管理やタスク管理の機能を働かせている。
******* Register
******** 一般レジスタ群
- 
  全てのソフトウェアが利用するレジスタ群。

********* 汎用レジスタ
- EAX, EBX, ECX, EDX, ESI, EDI

********* ベースポインタ
- EBP

********* スタックポインタ
- ESP

********* インストラクションポインタ
- EIP
  CSで指定されたセグメントのオフセットアドレス。
  マシン語命令を指し示す。

********* フラグレジスタ
- EFLAGS

********* セグメントレジスタ
- CS
  マシン語命令を読み込むセグメントを指し示す。
  オフセットアドレスはIP(EIP)。

- DS
  命令の実行時に参照する。

- ES, FS, GS
  予備のセグメントレジスタ。
  DS以外にセグメントにアクセスしたい場合に使われる。
  セグメントオーバーライドプリフィックスをつけてメモリの指定を行う。
  ex) mov ax,es:[0080h]

- SS
  スタック領域を指し示す。
  BPレジスタはスタック領域中の変数を指し示す役割を持っている。

******** 浮動小数点レジスタ群
- 
  浮動小数点演算を行うプログラムが利用する。
  386まではFPUとして独立したチップでサポートしていた。

********* 浮動小数点レジスタ

********* コントロールレジスタ

********* ステータスレジスタ

********* タグワード

********* エラーポインタ

******** システムレジスタ群
- 
  オペレーティングシステムが管理するレジスタ郡。
  これらレジスタに適切な値をセットすることでメモリ管理やタスク管理機能を働かせる。
  一般のアプリケーションからは利用できない。

********* システムアドレスレジスタ
- GDTR, IDTR, LDTR, TR
- GDTR
  グローバルディスクリプタテーブルレジスタ。
  このレジスタにディスクリプタテーブルのリニアアドレスをロードしておくことにより、
  CPUがディスクリプタテーブルを参照できるようにする。
  
  リミット値(16bit), 先頭アドレス(32bit）より成る。
  GDTRに割り当てた後、LGDT命令を実行することでGDTRがディスクリプタテーブルを指し示すようになる。

********* コントロールレジスタ
- CR0, CR1, CR2, CR3

********** CR0
- PEビット
  Protection Enable Bit。
  1にセットすることでプロテクトモードに、0にセットすることでリアルモードに切り替わる。

******** デバッグレジスタ群
- 
  デバッグレジスタは386から追加された、主にデバッガが利用するレジスタ。
  プログラムの実行状況を確認するために利用する。
  テストレジスタは486から追加されたレジスタ。
  キャッシュメモリやページング機構の動作テストを行うためのレジスタで、
  OSや診断プログラムが使用する。

********* デバッグレジスタ
- DR0, DR1, ... , DR7

********** DR6
- 
  ステータスレジスタ

- 構造
  
********** DR7
- 
  デバッグコントロールレジスタ

********* テストレジスタ
- TR3, TR4, TR5, TR6, TR7
******* Calculation
******** Clock Doubler
- 
  クロック速度を倍速化する技術。CPU内部の処理のみ2倍の速度で実行される。
****** Unit
****** Mode
******* Real mode
- 
  従来の8086と同様の動作をするモード。
  起動時に使われる。

  リアルモードへ移るにはCR0のPEビットを0にリセットする。
  割り込みの設定、セグメントの設定等の手順を踏んでリアルモードへ移行する。

- 移行手順
  - 割り込みの設定
    - IDTRの再設定
  - セグメントの設定
    - セグメントディスクリプタキャッシュの再設定
  - リアルモードへの移行
    - CR0のPEビットを0にリセット
    - セグメントレジスタの再設定
  - アドレス制限の設定
    - アドレスバス A20ビットのマスク設定
  
******* Protect mode
- 
  拡張機能が有効になったモード。
  拡張機能を利用してメモリ管理やタスク管理を行う。

  CR0のPEビットを1にセットすると、リアルモードからプロテクトモードに移行する。
  逆にリアルモードへ移動する場合は、PEビットを0にセットすればよい。

- 移行手順
  - セグメントの設定
    - GDTの作成
    - GDTRの設定
  - 割り込みの設定
    - IDTの作成
    - IDTRの設定
  - アドレス制限の解除
    - アドレスバス A20ビットのマスク解除
  - プロテクトモードへの移行
    - CR0のPEビットをセット
    - セグメントレジスタの再設定

******* Virtual 8086 mode
- 
  プロテクトモードの状態のまま、8086と同様の動作を行うモード。

****** Segment
- 
  メモリの指定は、セグメントアドレスとオフセットアドレスで行う。
  セグメントアドレスを先頭のリニアアドレスに変換する（セグメントベース）。
  次にセグメントベースにオフセットアドレスを加え、リニアアドレスを算出する。

******* リアルモード
- 
  セグメントアドレスは、セグメントベースと固定的に対応する。
  セグメントアドレスが4A56(H)だとすると、セグメントベースは4A560(H)となる。

******* プロテクトモード
- プロテクトモードでセグメントを利用するための準備
  1. メモリの割り当てを決める
  2. ディスクリプタテーブルを作る
  3. GDTRにディスクリプタテーブルのアドレスをロードする

- セレクタ値
  リアルモードではセグメントレジスタにセットする値を「セグメントアドレス」と呼んだが、
  プロテクトモードではセグメントを選択し指定するという意味から「セレクタ値」という。

  0008(H), 0010(H), 0018(H), 0020(H)と、8つおきとびとびの値を用いる。

******** セグメントディスクリプタ
- 
  セグメントのセレクタ値とリニアアドレスとを対応づけるもの。
  セグメントベース、セグメントの大きさを表すリミット値、セグメントの属性の3種類の情報から成る。
  セグメントディスクリプタは、セレクタ値の順にディスクリプタテーブルに格納されている。

  セグメントテーブルには命令実行のたびにアクセスしているわけでなく、
  セレクタ値をロードすると「セグメントディスクリプタキャッシュ」というキャッシュにも自動的にロードされる。

- 種類
  - GDT
    グローバルディスクリプタテーブル。
    システム中にひとつだけ存在し、
    すべてのプログラムから共通に参照されるセグメントを定義するためのテーブル。

  - LDT
    ローカルディスクリプタテーブル。
    タスク1つにつき1つ存在する。

  - IDT
    割り込みディスクリプタテーブル。
    割り込みの設定に使われる。


- 286のセグメントディスクリプタ

  (セグメントディスクリプタ)
  |---+---+---+---+---+---+---+---|
  | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 |
  |---+---+---+---+---+---+---+---|
  
  |------------------+----------+----------|
  | 種類             | 割り当て | 大きさ   |
  |------------------+----------+----------|
  | リミット値       | 1, 0     | 16 bit   |
  | セグメントベース | 4, 3, 2  | 24 bit   |
  | 属性             | 5        | 8 bit    |
  | 未割り当て       | 6,7      | (16 bit) |
  |------------------+----------+----------|

- 486のセグメントディスクリプタ
  
  |------------------+-------------+--------|
  | 種類             | 割り当て    | 大きさ |
  |------------------+-------------+--------|
  | リミット値       | 6(下), 1, 0 | 20 bit |
  | セグメントベース | 7, 4, 3, 2  | 32 bit |
  | 属性             | 6（上), 5   | 12 bit |
  |------------------+-------------+--------|

****** Protection
******* 特権管理
****** Interrupt
****** Task
****** Paging
****** Security
****** Link
******* はじめて読む486
- [[https://github.com/tkmc/486][tkmg/486 - 『はじめて読む486』のサンプルプログラム集 - github]]
- [[https://gist.github.com/k-takata/32e9954d503d67233d6e][k-tanaka/486-OpenWatcom.md - github]]
- [[https://github.com/koron/486/releases][koron/486 - はじめて読む486 サンプルコード実験環境]]
**** Intel 64 and IA-32
- [[file:CPU_Intel64.org][CPU_Intel64.org]]
***** Memo
****** Register レジスタ
******* 汎用レジスタ(GBR)
******** 汎用レジスタ
- 
  |------+------+------+------+-----+------------------+----------------------------|
  | 63-0 | 31-0 | 15-0 | 15-8 | 7-0 | 名称             | 用途                       |
  |------+------+------+------+-----+------------------+----------------------------|
  |  RAX | EAX  | AX   | AH   | AL  | アキュムレータ   | 何にでも使う               |
  |  RBX | EBX  | BX   | BH   | BL  | ベースレジスタ   | 何にでも使う               |
  |  RCX | ECX  | CX   | CH   | CL  | カウントレジスタ | 何にでも使うが主にカウンタ |
  |  RDX | EDX  | DX   | DH   | DL  | データレジスタ   | 何でも使う                 |
  |------+------+------+------+-----+------------------+----------------------------|
- 
  EnXは32bit
  nH,nLが8bitで両者を合わせたものがnX（16bit）
  X, EはExtendから。

******** インデックスレジスタ
- 
  |------+------+--------------------------------+------------------------------------------------|
  | 31-0 | 15-0 | 名称                           | 用途                                           |
  |------+------+--------------------------------+------------------------------------------------|
  | ESI  | SI   | ソースインデックス             | ストリング命令に利用するが、何に利用してもよい |
  | EDI  | DI   | デスティネーションインデックス | 同上                                           |
  |------+------+--------------------------------+------------------------------------------------|

******** ポインタレジスタ
- 
  |------+------+------------------+----------------------------------------|
  | 31-0 | 15-0 | 名称             | 用途                                   |
  |------+------+------------------+----------------------------------------|
  | EBP  | BP   | ベースポインタ   | 特別な用途に利用し、めったに利用しない |
  | ESP  | SP   | スタックポインタ | スタックを格納するアドレスのオフセット |
  |------+------+------------------+----------------------------------------|

******* セグメントレジスタ
- 
  |------+----------------------+------------------------------------------------------|
  | 15-0 | 名称                 | 用途                                                 |
  |------+----------------------+------------------------------------------------------|
  | SS   | スタックセグメント   | スタックを格納するアドレスのセグメントを指す         |
  | CS   | コードセグメント     | 次に実行するアドレスのセグメントを指す               |
  | DS   | データセグメント     | データを読み書きするアドレスのセグメントを指す       |
  | ES   | エクストラセグメント | 追加のデータを読み書きするアドレスのセグメントを指す |
  |------+----------------------+------------------------------------------------------|

******* ステータス・制御レジスタ
- 
  |------+--------+-------+----------------------------+----------------------------------------|
  | 63-0 | 31-0   | 15-0  | 名称                       | 用途                                   |
  |------+--------+-------+----------------------------+----------------------------------------|
  |  RIP | EIP    | IP    | インストラクションポインタ | 次に実行するアドレスのオフセットを指す |
  |      | EFLAGS | FLAGS | ステータスレジスタ         | CPUの状態や前の命令のエラー状態が入る  |
  |------+--------+-------+----------------------------+----------------------------------------|

- フラグ
  |-------+------+-------------------------|
  |   bit | 略記 | 名称                    |
  |-------+------+-------------------------|
  |     0 | CF   | キャリーフラグ          |
  |     2 | PF   | パリティーフラグ        |
  |     4 | AF   | 補助フラグ              |
  |     6 | ZF   | ゼロフラグ              |
  |     7 | SF   | サインフラグ            |
  |     8 | TF   | トラップフラグ          |
  |     9 | IF   | 割り込み許可フラグ      |
  |    10 | DF   | ディレクションフラグ    |
  |    11 | OF   | オーバーフローフラグ    |
  | 12-13 | IOPL | I/O特権レベルフィールド |
  |-------+------+-------------------------|

****** 命令
******* move
- move dest,src
  (.COMはセグメントレジストが全て同じ値)

******* int
- 
  ソフトウェア割り込み
  "int 21h"がファンクションコール
  AHの内容で実行値が変わる。
  AHに4Chが入っている時にint 21hを動かすと終了する。

******* mov 即値の転送
- 
  mov ah,10     10進数
  mov ah,10h    16進数
  mov ah,10o    8進数
  mov ah,10b    2進数
  mov ah,'A'    文字コード
  mov ax,offset DATA    DATAという変数のアドレス


******** 直接アドレス法
- 
  mov DATA,al        変数に書き込む
  mov [1000h],al    アドレスに書き込む

  メモリ  レジストリと違い大きさが分からないため大きさを書く
  mov byte ptr DATA, 0 (byte ptr)
  mov word ptr DATA, 0 (word ptr)
  or
  mov DATA, byte ptr 0
  mov DATA, word ptr 0
  (コンパイラによって書き方が違う)

********* 間接アドレス法(メモリのアドレスをレジスタを使って指定)
- 
  mov bx,offset DATA
  mov byte ptr [bx], 0
  or
  mov [bx], byte ptr 0
  mov [byte ptr bx], 0

  ワード以上だと逆順に格納
  mov [1000h],word ptr 1234h ⇒ 34h(1000h), 12h(1001h)
  mov [1000h],dword ptr 12345678h ⇒ 78h(1000h), 56h(1001h), 34h(1000h), 12h(1000h)

******* 疑似命令
- 
  CPUでなくアセンブラに伝える命令を「疑似命令」という。
  DB    byte
  DW    word
  DD    dword

******* ADD 足し算
- 
  ADD DEST,SRC (DEST←DEST+SRC)
  ADC DEST,SRC

  AAA
    桁超えをしたものを補正してくれる

******* SUB 引き算
- 
  SUB DEST,SRC
  SBB DEST,SRC    (キャリーフラグつき)

******* MUL, IMUL かける
- MUL SRC        符号なし
- IMUL SRC    符号付き
  AX        AL×SRC
  DX:AX    AX×SRC
  EDX:EAX    EAX×SRC

******* DIV, IDIV わる
- DIV SRC
- IDIV SRC
  AX÷SRC→余AH, 商AL
  DX:AX÷SRC→余DX, 商AX
  EDX:EAX÷SRC→余EDX, 商EAX

******* INC, DEC
- 
  1足す（引く）

******* JMP DEST
- DESTに移行する
  short, near, farがある。

******* CMP SRC1,SRC2
- 
  比較
  SRC1 - SRC2のフラグのみ残る

******* JMP系
JCXZ DEST
JECXZ DEST
    条件分岐。CX(ECX)が0のときジャンプ。

LOOP SRC
    (E)CX=(E)CX-1,not equal 0ならSRCにショートジャンプ

LOOPZ, LOOPE SRC
    ZF=1ならジャンプ
LOOPNZ, LOOPNE SRC
    ZF=0ならジャンプ

******* サブルーチン
- 
    CALL
    RET
        SS:SPを2増やしてcall, 2減らしてret

    先：public サブルーチン名
    元：extern サブルーチン名:near

    PUSH
    POP

    PUSHA,POPA        AX,CX,DX,BX,SP,BP,SI,DI(POPはA逆順）
    PUSHAD,POPAD    EAX,ECX...

    PUSHF,POPF        FLAGS
    PUSHFD,POPFD    EFLAGS

******* 論理
- 
    AND DEST,SRC
    OR DEST,SRC
    XOR DEST,SRC
    NOT DEST
    NEG DEST
        2の補数
    TEST SRC1,SRC2
        論理積(ANDと同じ)、結果が保持されずフラグのみ持つ

******* シフト
- 
    SHR DEST,COUNT
    SHL DEST,COUNT
    SAR DEST,COUNT
    SAL DEST,COUNT
        算術（最上位ビットが保存）

******* ローテート
- 
    RCL, RCR キャリーフラグ込み
    ROL, ROR キャリーフラグは溢れ分

******* ストリング命令
- 
    読み出しは[DS:SI]
    書き出しは[ES:DI]
    レジスタはEAX,AX,ALのみ


    MOVSB, MOVSW, MOVSD
    REP MOVS?
        CX回繰り返す
    REP,REPE(REPZ),REPNE(REPNZ)

    CLD        DF=0
    STD        DF=1


    LODS?
        メモリをレジストリAL,AX.EAXに読み込む
    STOS?
        レジストリをメモリに
    SCAS?
        レジスタとメモリを比較
    CMPS?
        [DS:SI]と[ES:DI]の比較

******* 入出力
- 
    Memory Mapped I/O
        メモリ空間の一部を制御用の空間に
    I/O Mapped I/O
        メモリと制御は別
        IN,OUTなど専用命令がある

    IN DEST,SRC
        SRCのポートに接続されているデバイスの状態を読みだす
    OUT DEST,SRC
        DESTに接続されているデバイスにコマンドを送る

    INS?
    OUTS?
        ストリング命令用

******* 他
- 
    LEA DEST,SRC
        SRCの実行アドレスを計算し、DESTに代入
    XCHG DEST1,DEST2
        DEST1とDEST2を交換する
    NOP
        何もしない。あとで書くための場所の確保とか。

******* 割り込み
- 
    トラップ
        INT
    フォルト
        メモリー制限
    アボート
        例外。0除算などで発生。

******* IRET, STI, CLI
******** IRET
******** STI
- SeT Interrupt enable flag
  割り込みを許可
******** CLI
- CLear Interrupt enable flag
  割り込みを禁止
***** Link
- [[https://software.intel.com/en-us/articles/intel-sdm][Intel 64 and IA-32 Architectures Software Developer Manuals - Intel]]
**** z/Architecture
**** H8
- [[file:Microcontroller.org][Microcontroller.org]]
*** RISC
- Reduced Instruction Set Computer
  命令の種類を減らし、回路を単純化して演算速度の向上を図る設計手法。
**** Alpha

**** ARM
***** Brand
****** ARM
****** Snapdragon
******* Qualcomm Snapdragon S1, S2, S3
- v7-A, Scorpion
******* Qualcomm Snapdragon S4, 400/600/800
- v7-A, Krait
******* Qualcomm Snapdragon 820
- v8-A, Kryo
****** Apple Ax
******* Apple A6, A6X
- v7-A, Swift
******* Apple A7
- v8-A, Cyclone
******* Apple A8
- v8-A, Cyclone gen2
******* Apple A8X
- v8-A, Typhoon
******* Apple A9X
***** Link
- http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0471gj/BABFBJDG.html
**** MIPS
***** 龍芯
- MIPSアーキテクチャだが、x86とARMをバイナリ変換して実行可能
**** POWER
**** RISK-V
- https://riscv.org/

***** ISA
- [[https://riscv.org/risc-v-isa/][RISC-V ISA - RISC-V]]
**** Atmel AVR
- 
  Atmel社が製造している、RISCベースの8ビットマイクロコンピュータ製品群の総称。
  1996年に開発された。

**** PIC
- Peripheral Interface Controllerの略。
  Microchip Technology Inc.が製造しているマイクロコントローラ製品群の総称。

- 
  CPU、メモリ(RAM、ROM)、I/Oなどが1チップにおさめられており、
  ROMに書込まれたプログラムにより制御される。

**** SPARC
- 
  
