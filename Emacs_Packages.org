* Emacs Packages
** System Packages
- 24.5時点
  - /emacs/share/emacs/24.5/lisp(win)
*** C source code
**** Functions
***** abs
- (abs ARG)
  Return the absolute value of ARG.
***** assoc
- (assoc KEY LIST)
  Return non-nil if KEY is "equal" to the car of an element of LIST.
***** apropos
- (apropos PATTERN &optional DO-ALL)
  Show all meaningful Lisp symbols whose names match PATTERN.
  Symbols are shown if they are defined as functions, veriables, or faces, or if they have nonempty property lists.
***** autoload
- (autoload FUNCTION FILE &optional DOCSTRING INTERACTIVE TYPE)
  Define FUNCTION to autoload from FILE.
  FUNCTION is a symmol; FILE is a file name string to pass to "load".
***** backward-char
- (backward-char &optional N)
***** backward-word
- (backward-word &optional ARG)
  Move backward until encountering the beginning of a word.
***** beginning-of-line (C-a)
- (beginning-of-line &optional N)
  Move point to beginning of current line (in the logical order).
***** bobp
- (bobp)
  Return t if point is at the beginning of the buffer.
***** bolp
- (bolp)
  Return t if point is at the beginning of line.
***** buffer-substring
- (buffer-substring START END)
  Return the contents of part of the current buffer as a string.
***** buffer-substring-no-properties
***** ceiling
***** char-after
- (char-after &optional POS)
  Return character in current buffer at position POS.
***** char-before
- (char-before &optional POS)
  Return character in current buffer preceding position POS.
***** char-to-string
- (char-to-string CHAR)
  Convert arg CHAR to a string containing that character.
- ex
  (char-to-string ?a) -> "a"
***** concat
- (concat &rest SEQUENCES)
  Concatenate all the arguments and make the result a string.
***** count-lines
- (count-lines START END)
  Return number of lines between START and END.
***** current-buffer
- (current-buffer)
  Return the current buffer as a Lisp object.
***** current-column
- (current-column)
  Return the horizontal position of point.
***** current-time-string
- (current-time-string &optional SPECIFIED-TIME)
  Return the current local time, as a human-readable string.
***** defalias
- (defalias SYMBOL DEFINITION &optional DOCSTRING)
  Set SYMBOL's function defenition to DEFINITION.
***** define-key
- (define-key KEYMAP KEY DEF)
  In KEYMAP, define key sequence KEY as DEF.
***** delete
- (delete ELT SEQ)
  Delete members of SEQ which are "equal" to ELT, and erturn the result.
***** delete-char
- (delete-char N &optional KILLFLAG)
  Delete the following N characters (previous if N is negative)
***** delete-region
- (delete-region START END)
  Delete the text between START and END.
***** ding
- (ding &optional ARG)
  Beep, or flash the screen.
  Also, unles an argument is given, terminate any keyboard macro currently executing.
- 変数"visible-bell"の値に応じて端末のベルを鳴らしたり、画面をフラッシュする。
***** downcase
- (downcase OBJ)
  Convert argument to lower case and return that.
***** end-of-line
- (end-of-line &optional N)
  Move point to end of current line (in the logical order).
***** eobp
- (eobp)
  Return t if point is at the end of the buffer.
***** eolp
- (eolp)
  Return t if point is at the end of a line.
***** eq
- (eq OBJ1 OBJ2)
  Return t if the two args are the same Lisp object.
***** equal
- (equal O1 O2)
  Return t if two lisp objects have similar structure and contents.
***** erase-buffer
- (erase-buffer)
  Delete the entire contents of the current buffer.
***** expand-file-name
- (expand-file-name NAME &optoinal DEFAULT-DIRECTORY)
  Convert filename NAME to absolute, and canonicalize it.
***** expt
- (expt ARG1 ARG2)
  Return the exponential ARG1 ** ARG2.
***** eval
- (eval FORM &opitonal LEXICAL)
  Evaluate FORM and return its value.
***** eval-buffer
- (eval-buffer &optional BUFFER PRINTFLAG FILENAME UNIBYTE DO-ALLOW-PRINT)
  Execute the current buffer as Lisp code.
***** fboundp
- (fboundp SYMBOL)
  Return t if SYMBOL's function definition is not void.
***** fceiling
***** file-exists-p
- (file-exists-p FILENAME)
  Return t if file FILENAME exists.
  関数が定義済みかどうかのチェック
***** file-name-nondirectory
- (file-name-nondirectory FILENAME)
  Return file name FILENAME sans its directory.
  ディレクトリパスを除いたファイル名を取得
***** file-name-directory
- (file-name-directory FILENAME)
  Return the directory component in file name FILENAME.
  ファイル名を除いたディレクトリパスを取得。
***** ffloor
- (ffloor ARG)
  Retrun the largest integer no reater than ARG, as a float.
***** float
- (float ARG)
  Return the floating point number equal to ARG.
***** floatp
***** floor
- (floor ARG &optonal DIVISOR)
  Retrun the largest integer no reater than ARG.
***** following-char
- (following-char)
  Return the character folloing point, as a number.
  At the end of the buffer or accesible region, return 0.
***** format
- (format STRING &rest OBJECTS)
  Format a string out of a format-string and arguments.

- 書式指定子の%と文字の間に数を指定して、表示幅の変更や左寄せをすることができる。
  「桁.精度」として指定する。どちらも省略可能。通常右寄せ、負の数を指定すると左寄せとなる。
****** 書式指定子
- %s : 文字列、シンボル
- %d : 整数
- %o : 8進数
- %x : 16進数
- %c : 文字コードに対応する文字
- %f : 浮動小数点数
- %S : S式
- %% : %自身
***** format-time-string
- (format-time-string FORMAT-STRING &optional TIME UNIVERSAL)
  Use FORMAT-STRING to format the time TIME, or now if omitted.
***** forward-char
- (forward-char &optional N)
***** forward-line
- (forward-line &optional N)
  Move N lines forward (backward if N is negative).
- backward-lineは存在しないので、上に移動する場合は負の引数を渡す。
  必ず次の行の先頭位置に移動する。
***** forward-word
- (forward-word &optional ARG)
***** fround
- (fround ARG)
  Return the nearest integer to ARG, as a float.
***** ftruncate
***** get-buffer
- (get-buffer BUFFER-OR-NAME)
  Return the bufer named BUFFER-OR-NAME.
***** get-buffer-create
- (get-buffer-create BUFFER-OR-NAME)
  Return the bufer specified by BUFFER-OR-NAME, creating a new one if needed.
***** get-text-property
- (get-text-property POSITION PROP &optional OBJECT)
  Return the value of POSITION's property PROP, in OBJECT.
***** goto-char
- (goto-char POSITION)
  Set point to POSITION, a number or marker.
***** goto-line
- (goto-line LINE &optional BUFFER)
  Go to LINE, counting from line 1 at beginning of buffer.
***** integerp
***** intern
- (intern STRING &optional OBARRAY)
  Return the canonical symbol whose name is STRING.
***** insert
- (insert &rest ARGS)
  Insert the arguments, either strings or characters, at point.
***** insert-char
- (insert-char CHARCTER &optional COUNT INHERIT)
  Insert COUNT copies of CHARACTER.
***** kill-all-local-variables
- (kill-all-local-variables)
  Switch to Fundamental mode by killing current buffer's local variables.
***** line-end-position
- (line-end-position &optional N)
  Return the character position of the last character on the current line.
***** list
- (list &rest OBJECT)
  Return a newly created list with specified arguments as elements.
***** load
- (load FILE &optional NOERROR NOMESSAGE NOSUFFIX MUST-SUFFIX)
  Execute a file of Lisp code named FILE.
  First try FILE with ".elc" appendend, then try with ".el", then try FILE unmodified.

  This function searches the directories in "load-path".
  
  リロードの抑制がない以外はrequireと同じ動き。
***** lookin-at
- (looking-at REGEXP)
  Return t if text after point matches regular expression REGEXP.
***** macroexpand
- (macroexpand FORM &optional ENVIRONMENT)
  Return result of expanding macros at top level of FORM.
  
  ex) (macroexpand '(push 'a test))
***** make-key-map
- (make-keymap &optional STRING)
  Construct and return a new keymap, of the form (keymap CHARTABLE .ALIST).
  CHARTABLE is a char-table that holds the bindings for all characters without modifiers.
***** make-local-variable
- (make-local-variable VARIABLE)
  Make VARIABLE have a separate value in the current buffer.
***** make-string
- (make-string LENGTH INIT)
  Return a newly created string of length LENGTH, with INIT in each element.
  LENGTH must be an integer.
  INIT must be an integer that represents a character.
- 文字コードから文字を作る。
***** make-sparse-keymap
- (make-sparse-keymap &optional STRING)
  Construct and return a new sparse keymap.
***** mark
- (mark &optional FORCE)
  Return this buffer's mark value as integer, or nil if never set.
***** match-beginning
- (match-beginning SUBEXP)
  Return position of start of text matched by last search.
***** match-end
- (match-end SUBEXP)
  Return position of end of text matched by last search.
***** max
- (max NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)
  Return largest of all the arguments.
***** message
- (message FORMAT-STRING &rest ARGS)
  Display a message at the bottom of the screen.
***** min
- (min NUMBER-OR-MARKER &rest NUMBERS-OR-MARKERS)
  Return smallest of all the arguments.
***** mod
- (mod X Y)
  Return X modulo Y.
***** move-to-column (M-g TAB)
- (move-to-column COLUMN &optoinal FORCE)
  Move point to column COLUMN in the current line.
***** move-to-window-line
- (move-to-window-line ARG)
  Position point relative to window.
- ウィンドウの先頭行を基準に指定行に移動する。
***** number-p
- (numberp OBJECT)
***** number-to-string
- (number-to-string)
  Return the decimal representation of NUMBER as a string.
***** nth
- (nth N LIST)
  Return the Nth element of LIST.
  N counts from zero.
***** nreverse
- (nreverse LIST)
  Reverse LIST by modifying cdr pointers.
***** print
- (print OBJCET &optional PRINTCHARFUN)
  Output the printed representation of OBJECT, with newlines around it.
***** point
- (point)
  Return value of point, as an integer.
***** point-min
- (point-min)
  Return the minimum permissible value of point in the current buffer.
***** point-max
- (point-max)
  Return the maximum permissible value of point in the current buffer.
***** preceding-char
- (preceding-char)
  Return the character preceding point, as a number.
  At the beginning of the buffer or accessible region, return 0.
***** put-text-property
- (put-text-property START END PROPERTY VALUE &optional OBJECT)
  Set one property of the text from START to END.
  The arguments PROPERTY and VALUE specify the propety to add.
***** random
- (random &optional LIMIT)
  Return a pseudo-random number.
***** read-key-sequence
- (read-key-sequence PROMPT &optional CONTINUE-ECHO DONT-DONCASE-LAST CAN-RETURN-SWITCH-FRAME CMD-LOOP)
  Read a sequence of keystrokes and return as a string or vector.
***** region-beginning
- (region-beginning)
  Return the integer value of point or mark, whichever is smaller.
***** region-end
- (region-end)
  Return the integer value of point or mark, whichever is larger.
***** replace-match
- (replace-match NEWTEXT &optional FIXEDCASE LITERAL STRING SUBEXP)
  Replace text matched by last search with NEWTEXT.
  Leave point at the end of the replacement text.
***** re-search-backward
- (re-search-backward REGEXP &optional BOUND NOERROR COUNT)
  Search backward from point for match for regular expression REGEXP.
***** re-search-forward
- (re-search-forward REGEXP &optional BOUND NOERROR COUNT)
  Search forward from point for regular expression REGEXP.
***** require
- (require FEATURE &optional FILENAME NOERROR)
  If feature FEATURE is not loaded, load it from FILENAME.
  If FEATURE is not a member of the list "features", then the feature is not loaded; so load the file FILENAME.
***** round
- (round ARG &optional DIVIOR)
  Return the nearest integer to ARG.
***** search-backward
- (search-backward STRING &optional BOUND NOERROR COUNT)
  Search backward from point for STRING.
***** search-forward
- (search-forward STRING &optional BOUND NOERROR COUNT)
  Search forward from point for STRING.
  Set point to the end of occurrence found, and return point.

- 引数
  - BOUND : どこまで検索するかポイント位置で指定する。バッファ末までの時はnilを指定する。
  - NOERROR : 見つからなかった場合の処理を指定。
    - t : nilを返す(no error)
    - nil,t以外 : 検索範囲まで
  - COUNT : 指定した回数だけ検索を繰り返す。
***** self-insert-command
- (self-insert-command N)
  Insert the character you type.
- 一般の関数に割り当てられている関数。
  押したキーそのものを挿入したいときなどに利用する。
***** set
- (set SYMBOL NEWVAL)
  Set SYMBOL's value to NEWVAL, and return NEWVAL.
***** set-buffer
- (set-buffer BUFFER-OR-NAME)
  Make bufer BUFFER-OR-NAME current for editing operations.
***** set-default
- (set-default SYMBOL VALUE)
  Set SYMBOL's default value to VALUE. SYMBOL and VALUE are evaluated.
***** skip-chars-backward
- (skip-chars-backward STRING &optional LIM)
  Move point backward, stopping before a char not in STRING, or at pos LIM.
***** skip-chars-forward
- (skip-chars-forward STRING &optional LIM)
  Move point forward, stopping before a char not in STRING, or at pos LIM.
***** sleep-for
- (sleep-for SECONDS &optional MILLISECONDS)
  Pause, without updating display, for SECONDS seconds.
***** stringp
***** string-equal
***** string-match
- (string-match REGEXP STRING &optional STRAT)
  Return index of start of first match for REGEXP in STRING, or nil.
***** string-to-char
- (string-to-char STRING)
  Return the first character in STRING.
***** string-to-number
- (string-to-number STRING &optional BASE)
  Parse STRING as a decimal number and return the number.
***** substring
- (substring STRING FROM &optional TO)
  Return a new string whose contents are a substring of STRING.
***** symbol-function
- (sybmol-functon SYMBOL)
  Return SYMBOL's function definition, or nil if that is void.
***** system-name
- (system-name)
  Return the host name of the machine you are running on, as a string.
***** this-command-keys
- (this-command-keys)
  Return the key sequence that invoked this command.
***** throw
- (throw TAG VALUE)
  Throw to the catch for TAG and return VALUE from it.
***** truncate
- (truncate ARG &optional DIVISOR)
  Truncate a floating point number to an int.
- 小数点以下を切り捨てた数を返す。
***** upcase
- (upcase OBJ)
  Convert argument to upper case and return that.
***** use-global-map
- (use-global-map KEYMAP)
  Select KEYMAP as the global keymap.
***** use-local-map
- (use-local-map KEYMAP)
  Select KEYMAP as the local keymap.
***** user-login-name
- (user-login-name &optional UID)
  Return the name under which the user logged in, as a string.
***** user-uid
- (user-uid)
  Return the effective uid of Emacs.
  Value is an integer or a float, dependingon the value.
***** 1+
***** 1-
***** +
- (+ &rest NUMEBRS-OR-MARKERS)
***** -
***** %
***** *
***** /
***** <
***** <=
***** =
***** /=
***** >
***** >=
**** Special forms
***** and
- (and CONDITIONS...)
  Eval args until one of htem yields nil, then return nil.
***** catch
- (catch TAG BODY...)
  Eval BODY allowing nonlocal exists using "throw".
  TAG is evalled to get the tag to use; it must not be nil.
- 
  throwされた場合にcatch式の評価がその値でただちに行われ、catch式を抜ける。

***** cond
- (cond CLAUSES...)
  Try each clause until one succeeds.
  Each clause looks like (CONDITION BODY...).
- 
  条件分岐をする際に用いる。

***** condition-case
***** defconst
- (defconst SYMBOL INITVALUE [DOCSTRING])
  Define SYMBOL as a constant variable.
  This declares that neither programs nor users should ever change the value.
  This constancy is not actually enforced by Emacs Lisp, but SYMBOL is marked as a special variable so that it is never lexically bound.

- defvarと異なり、既に値が入っていても変更する。
***** defvar
- (defvar SYMBOL &optional INITVALUE DOCSTRING)
  Define SYMBOL as a variable, and return SYMBOL.
  You are not required to define a variable in order to use it,
  but defining it lets you supply an initial value and documentation,
  which can be referred to by the Emacs help facilities and other programming tools.
  
  The optional argument INITVALUE is evaluated, and used to set SYMBOL,
  only if SYMBOL's value is void.

- 
  変数は宣言をしなくてもsetqなどで代入・利用できるが、
  defvarで変数宣言することでバイトコンパイラが文句を言わない。
  defconstと異なり、既に値が入っている場合は設定しない。

***** function
***** if
- (if COND THEN ELSE...)
  If COND yields non-nil, do THEN, else do ELSE...
  Returns the value of THEN or the value of the last of the ELSE's.

- (if 式 From1 Form2 ... Fromn)
  式がnil以外だった場合、From1を、nilだった場合はFrom2 ... Fromn までを実行する。

***** interactive
- (interactive &optional ARGS)
  Specify a way of parsing arguments for interactive use of a function.

- ARGS
  ex) (interactive "sInputString :a\nsInputString :b\n"
  最初の文字が引数の型で、\nまでがプロンプトとして利用される。

****** Code letters
- a
- b
- B
- c : character
- C
- d
- D : Directory name
- e
- f : Exsisting file name
- F
- G
- i
- k
- K
- m
- M
- n : Number read using minibuffer.
- N
- p : Prefix arg converted to numebr. Does not do I/O.
  C-u prefixで与えた値。デフォルト1
- P : Prefix arg in raw form. Does not do I/O.
  C-u prefixで与えた値。デフォルト nil
- r : Region point and mark as 2 numeric args, smallest first. Des not do I/O.
  2つの引数に、関数呼び出し時に設定されているマークとポインタそれぞれの値が入る。
- s : Any string.
- S : Any symbol.
- U
- v
- x
- X
- z
- Z

***** lambda
- (lambda ARGS [DOCSTRING] [INTERACTIVE] BODY)
  Return a lambda expression.
  
***** let
- (let VARLIST BODY...)
  Bind variables according to VARLIST then eval BODY.

- 局所的に利用する変数を作成する。
  (let (変数リスト)
    本体)
***** let*
- (let* VARLIST BODY...)
- letとの違いは、直前の宣言部での値を代入可能。

***** or
- (or CONDITIONS...)
  Eval args until one of them yields non-nil, then return that value.
***** point-min
- (point-min)
  Return the minimum permissible value of point in the current buffer.
***** progn
- (progn BODY...)
  Eval BODY forms sequentially and return value of last one.
- 複数の処理をまとめる。
  式を順に評価していく。複数のS式を一つにまとめるためのもの。
  prognは最後の式を式を評価して返すが、prog1は一つ目の式、prog2は二つ目の式を返す。
***** prog1
- (prog1 FIRST BODY...)
  Eval FIRST and BODY sequentially; return value from FIRST.
***** prog2
- (prog2 FORM1 FORM2 BODY...)
  Eval FORM1, FORM2 and BODY sequentially; return value FORM2.
***** quote
- (quote ARG)
  Return the argument, without evaluating it.
***** save-current-buffer
***** save-excursion
- (save-excursion &rest BODY)
  Save point, mark, and current buffer; execute BODY; resutore those things.
***** save-restriction
***** setq
- (setq [SYM VAL]...)
  Set each SYM to the value of its VAL.
***** setq-default
- (setq-default [VAR VALUE]...)
  Set the default value of variable VAR to VALUE.
***** track-mouse
- (track-mouse BODY...)
  Evaluate BODY with mouse movement enabled.
***** unwind-protect
- (unwind-protect BODYFORM UNWINDFORMS...)
  Do BODYFORM, protecting with UNWINDFORMS.
  If BODYFORM completes normally, its value is returned after executing the UNWINDFORMS.
  If BODYFORM exits nonlocally, the UNWINDFORMS are executed anyway.
- 
  途中で何らかの理由で終了した場合でも、最後まで処理をおこなってくれる関数。
  prog1の最後までやりきる版みたいなもの。評価値は最初の式。
***** while
- (while TEST BODY...)
  If TEST yields non-nil, eval BODY... and repeat.
  The order of execution is thus TEST, BODY, TEST, BODY and so on until TEST returns nil.
- 
  while 式 本体
  ループ
**** Variables
***** buffer-file-coding-system
- Coding system to be used for encoding the buffer contents on saving.
***** buffer-file-name
- Name of file visited in current buffer, or nil if not visiting a file.
***** case-fold-search
- Non-nil if searches and matches should ignore case.
***** case-replace
- Non-nil means "query-replace" should preserve case in replacements.
***** debug-on-error
- Non-nil means enter ebugger if an error is signaled.
  Does not apply to errors handleb dy "condition-case" ore those matched by "debug-ignored-errors".
***** default-directory
- Name of default directory of current buffer.
***** default-major-mode
- Value of "major-mode" for new buffers.
***** exec-directory
- Directory for executables for Eamcs to invoke.
***** features
- A list of symbols which are the features of the executing Emacs.
***** last-command-event
- Last input event that was part of a command.
***** load-path
- List of directories to search for files to load.
***** major-mode
- Symbol for current buffer's major mode.
  
***** scroll-margin
- Number of lines of margin at the top and bottom of a window.
***** scroll-step
- The number of lines to try scrolling a window by when point moves out.
***** system-type
- The value is a sybmol indicating the type of operating system you are using.
- Values
  - gnu
  - gnu/linux
  - darwin
  - ms-dos
  - windows-nt
  - cygwin
***** this-command
- The command now being executed.
***** windows-system
- Name of window system through which the selected frame is displayed.
- Values:
  - nil : a termcap frame
  - x   : an Emacs frame that is really an X window
  - w32 : an Emacs frame that is a window on MS-Windows display.
  - ns  : an Emacs frame on a GNUstep on Macintosh Cocoa display.
  - pc  : a direct-write MS-DOS frame.
*** emacs-lisp(dir)
**** advice
- 再定義なしに挙動を変更する。
  24.4以降ではnadvice.elを使う。

***** Functions
****** ad-activate
****** ad-activate-all
- (ad-activate-all &optional COMPILE)
  Activate all currently advised functions.
- すべての関数を活性化する
****** ad-activate-regexp
- (ad-activate-regexp REGEXP &optional COMPILE)
  Activate functions with an advice name containing a REGEXP match.
****** ad-deactivate
****** ad-deactivate-all
****** ad-disable-advice
****** ad-disable-regexp
****** ad-enable-advice
****** ad-enable-regexp
****** ad-start-advice
****** ad-stop-advice
****** ad-update
- (ad-update FUNCTION &optional COMPILE)
  Update the advised definition of FUNCTION if its advice is active.
****** ad-update-regexp
****** ad-unadvice
- (ad-unadvice FUNCTION)
  Deactivate FUNCTION and then remove all its advice information.
***** Macros
****** defadvice
- (defadvice FUNCTION ARGS &rest BODY)
  Define a piece of advice for FUNCTION (a symbol).
  
- (defadvice FUNCTION (CLASS NAME [POSITION] [ARGLIST] FLAG...)
    [DOCSTRING] [INTERACTIVE-FORM]
    BODY...)

  - FUNCTION ::= Name of the function to be advised.
  - CLASS ::= "before" | "around" | "after" | "activation" | "deactivation"
  - NAME ::= Non-nil symbol that names this piece of advice.
  - POSITION ::=  "first" | "last" | NUMBER.
  - ARGLIST
  - FLAG ::= "protect" | "disable" | "activate" | "compile" | "preactive"
  - DOCSTRING
  - INTERACTIVE-FORM
  - BODY

- Variables : 
  - ad-return-value :
    after, aroundの場合、この値に設定した値が戻り値となる。
  - ad-do-it :
    aroundの場合に元の関数を実行する場所を指定する。
    
**** byte-run
***** Functions
****** eval-when-compile
- (eval-when-compile &rest BODY)
  Like "progn", but evaluates the body at compile time if you're compiling.
***** Macros
****** defmacro
- (defmacro NAME ARGLIST &optional DOCSTRING DECL &rest BODY)
  Define NAME as a macro.
  When the macro is called, as in (NAME ARGS...),
  the function (labmda ARGLIST BODY...) is applied to the list ARGS...
  as it appears in the epxression,
  and the result should be a form to be evaluated instead of the original.
****** defun
- (defun NAME ARGLIST &optional DOCSTRING DECL &rest BODY... )
  Define NAME as function.
  
**** cl
***** Alias
****** loop
- (loop CLAUSE)
  alias for "cl-loop"
***** Functions
****** cl-loop
- (cl-loop CLAUSE...)
  The Common Lisp "loop" macro.
  
**** edebug
***** Alias
****** eval-defun
- (eval-defun EDEBUG-IT)
  alias for "edebu-eval-defun"

***** Functions
****** edebug
- (edebug &optional ARG-MODE &rest ARGS)
  Replacement for "debug".
****** edebug-eval-defun
- (edebug-eval-defun EDEBUG-IT)
  Evaluate the top-level form containing point, or after point.

**** lisp
***** Functions
****** backward-sexp (C-M-b, C-M-left)
- (backward-sexp &optional ARG)
  Move backward across one balanced expression (sexp).
****** forward-sexp (C-M-f, C-M-right)
- (forward-sexp &optional ARG)
  Move forward across one balanced expression (sexp).
**** lisp-mode
***** Functions
****** emacs-lisp-mode
- (emacs-lisp-mode)
  major mode for editing Lisp code ot run in Emacs.
****** eval-defun (C-M-x)
- (eval-defun EDEBUG-IT)
  Evaluate the top-level form containing point, or after point.
****** eval-print-last-sexp (C-j)
- (eval-print-last-sexp &optional EVAL-LAST-SEXP-ARG-INTERNAL)
  Evaluate sexp before point; print value into current buffer.
****** eval-last-sexp (C-x C-e)
- (eval-last-sexp EVAL-LAST-SEXP-ARG-INTERNAL)
  Evaluate sexp before point; print value in the echo area.
****** kill-sexp (C-M-k)
- (kill-sexp &optional ARG)
  Kill the sexp (balanced expression) following point.
****** lisp-interaction-mode
- (lisp-interaction-mode)
  Major mode for typing and evaluating Lisp forms.
**** nadvice
***** Functions
****** advice-add
- (advice-add SYMBOL WHERE FUNCTION &option PROPS)
  Like "add-function" but for the function named SYMBOL.
  Contrary to "add-function", this will properly handel tha cases 
  where SYMBOL is defeined as macro, alias, command, ...

- 引数に関数名、場所、アドバイス関数名を取る。

****** advice-remove
- (advice-remove SYMBOL FUNCTION)
  Like "remove-function" but for the function named SYMBOL.
  Contrary to "remove-function", this also works when SYMBOL is a macro
  or an autoload and it preserves "fboundp".

**** package
***** Functions
****** describe-package (C-h P)
- (describe-package PACKAGE)
  Display the full documentation of PACKAGE (a symbol)
  
****** list-packages
- (ilst-packages &option NO-FETTH)
  Display a list of packages.
- 用法
  1. インストールしたいパッケージの上で"i"を押す
  2. 選択し終わったら"x"を押す
****** package-initialize
- (package-initialize &optional NO-ACTIVATE)
  Load Emacs Lisp packages, and activate them.
  The variable "package-load-list" controles which packages to load.
****** package-install
- (package-install PKG)
  install the package PKG.
****** package-refresh-contents
- (package-refresh-contents)
  Download the ELPA archive description if needed.
***** Variables
****** package-load-list
- List of packages for "package-initialize" to load.
****** package-archives
- An alist of archives from which to fetch.
  The default value points to the GNU Emacs package repository.
***** Link
- [[http://emacs-jp.github.io/packages/package-management/package-el.html][package.el - Emacs JP]]

**** re-builder
***** re-builder
- (re-builder)
  Construct a regexp interactively.
***** reb-change-target-buffer (C-c C-b)
- (reb-change-target-buffer BUF)
  Change the target buffer and display it in the target window.
***** reb-quit (C-c C-q)
- (reb-quit)
  Quit the RE Bulider mode.
***** reb-copy (C-c C-w)
- Copy current RE into the kill ring for later insertion.
***** reb-change-syntax (C-c TAB)
- (reb-changne-syntax &optional SYNTAX)
  Changne the syntax used by the RE Bulider.

***** reb-toggle-case (C-c C-c)
***** reb-enter-subexp-mode (C-c C-e)
***** reb-prev-match (C-c C-r)
***** reb-next-match (C-c C-s)
***** reb-force-update (C-c C-u)
***** reb-copy (C-c C-w)
*** emmulation(dir)
**** cua-base
***** Functions
****** cua-set-mark / C-SPC, C-@
- (cua-set-mark &optional ARG)
  Set mark at where point is, clear mark, or jump to mark.
*** eshell(dir)
**** em-alias
***** Functions
***** Variables
****** eshell-command-aliases-list
- A list of command aliases currently defined by the user.
**** em-hist
***** Variables
****** eshell-hist-ignoredups
- If non-nil, don't add input matching the last on the input ring.
**** em-dirs
***** Functions
****** eshell/pwd
- (eshell/pwd &rest ARGS)
  Change output from "pwd" to be cleaner.
**** em-prompt
***** Variables
****** eshell-prompt-function
- A function that returns the Eshell prompt string.
****** eshell-prompt-regexp
- A regexp which fully matches your eshell prompt.
  it affects how eshell will interpret the lines that arpe passed to it.
*** international(dir)
**** mule-cmds
***** toggle-input-method (C-\)
- (toggle-input-method &optoinal ARG INTERACTIVE)
  Enable or disable multilingual text input method for the curret buffer.
***** set-language-environment LANGUAGE-NAME)
- (set-language-environment LANGUAGE-NAME)
  Set up multilingual environment for using LANGUAGE-NAME.
*** progmodes(dir)
**** cc-cmds
***** Functions
****** c-electric-delete
- (c-electric-delete ARG)
  Delets preceding or following character or whitespace.
*** url(dir)
**** url
***** Functions
****** url-retrieve-synchronously
- (url-retrieve-synchronously URL &optional SILENT INHIBIT-COOKIES)
  Retrieve URL synchronously.
*** compile
**** Functions
***** compile
- (compile COMMAND &optional COMINT)
  Compile the program including the current buffer.
***** compilation-window-height
- Number of lines in a compilation window.
  
*** custom
**** Functions
***** custom-set-variables
- (custom-set-variables &rest ARGS)
  Install user customizations of variable values specified in ARGS.
  These settings are registered as theme "user".
  The arguments should each be a list of the form :
    (SYMBOL EXP [NOW [REQUEST [COMMENT]]])
***** user-variable-p
- (user-variable-p VARIABLE)
  Return non-nil if VARIABLE is a customizable variable.
**** Macros
***** defcustom
- (defcustom SYMBOL STANDARD DOC &rest ARGS)
  Declare SYMBOL as a customizable variable.
  SYMBOL is the variable name.
  STANDARD is an expression specifying the variable's standard value.
  It is evaluated once by "defcustom", and the value is assigned to SYMBOL if the variable is unbound.
  
  This macro uses "devar" as a subroutine, which also marks the variable as "special",
  so that it is always dynamically bound even when "lexical-binding" is t.
  
  The remeining arguments should have the form [KEYWORD VALUE]...

- ARGS keywords
  - :type
    VALUE should be a widget type for editing the symbol's value
  - :options
  - :initialize
  - :set
  - :require
  - :set-after
  - :risky
  - :safe
  - :group
    VALUE should be a customization group.
    Add SYMBOL (or FACE with "defface") to that group.
  - :link
  - :version
  - :package-version
  - :tag
  - :load

- ユーザが編集可能な変数を宣言する。
***** defface
- (defface FACE SPEC DOC &rest ARGS)
  Declare FACE as a customizable face that defaultts to SPEC.
  FACE does not need to be quoted.
*** cus-edit
**** Variables
***** custom-file
- File used for storing customization information.
*** env
**** Functions
***** setenv
- (setenv VARIABLE &optional VALUE SUBSTITUTE-ENV-VARS)
  Set the value of the environment variable named VARIABLE to VALUE.
  
*** files
**** Functions
***** abbreviate-file-name
- (abbreviate-file-name FILENAME)
  Return a version of FILENAME shortened using "directory-abbrev-alist".
  This also substitutes "~" for the user's home directory and removes automounter prefixes.
***** basic-save-buffer
- (basic-save-buffer)
  Save the current buffer in its visited file, if it has been modified.
***** file-name-extension
- (file-name-extension FILENAME &optional PERIOD)
  Return FILENAME's final "extension".
***** file-name-sans-extension
- (file-name-sans-extension FILENAME)
  Return FILENAME sans final "extension"
***** find-file (C-x C-f)
- (find-file FILENAME &optional WILDCARDS)
  Edit file FILENAME.
***** load-file
- (load-file FILE)
  Load the Lisp file named FILE.
**** Variables
***** auto-mode-alist
- 
  Alist of filename patterns vs corresponding major mode functions.
  Each element looks like (REGEXP . FUNCTION) or (REGEXP FUNCTION NON-NIL).

***** backup-directory-alist
- Alist of filename patterns and backup directory names.
***** directory-abbrev-alist
- Alist of abbreviations for file directories.
  A list of elements of the form (FROM . TO), each meaning to replace FROM with TO when it appears in a directory name.
***** make-backup-files
- Non-nil means make a backup of a file the first time it is saved.
  This can be done by renaming the file or by copying.
***** visible-bell
- Non-nil means try to flash the frame to represent a bell.
***** write-file-hooks
- List of functions to be called before writing out a buffer to a file.
  
- ファイルを書き込む直前に呼び出されるフックを指定する。
*** frame
**** Functions
***** blink-cursor-mode
- (blink-cursor-mode &otoinal ARG)
  Toggle cursor blinking (Blink Cursor mode).
*** help
**** Functions
***** help
- (help)
  an alias for `help-for-help-internal`
***** describe-bindings (C-h b)
- 
  show key-bindings list

***** describe-key (C-h k key)
- 
  show key bindings that you will press

***** describe-key-briefly (C-h c key)
- 
  Print the name of the function KEY invokes.
***** describe-mode (C-h m)
- 
  現在のメジャーモードの説明

***** describe-function (C-h f)
- (describe-function FUNCTION)

***** describe-variable (C-h v)
- 
  Display the full documentation of VARIABLE (a symbol).
  Returns the documentation as a string, also.

***** help-with-tutorial (C-h t)
- 
  Emacsの対話型チュートリアルに入る

***** view-lossage (C-h l)
- 
  これまでに打鍵した最後の100文字を表示する
*** image-file
**** Functions
***** auto-image-file-mode
- (auto-image-file-mode &optional ARG)
  Toggle visiting of image files as image (Auto Image File mode).
*** indent
**** Functions
***** indent-for-tab-command
- C-i
***** indent-region (C-M-\)
- (indent-region START END &optional COLUMN)
  Indent each nonblank line in the region.
**** Variables
***** tab-stop-list
- List of tab stop positions used by "tab-to-tab-stop"
*** info
**** Functions
***** info
- (info &optional FILE_OR_NODE BUFFER)
  the documentation browser.
***** info-emacs-manual
- (info-emacs-manual)
  Display the Emacs manual in Info mode.
*** info-look
**** Functions
***** info-lookup-symbol (C-h S)
- (ifo-lookup-symbol SYMBOL &optional MODE)
  Display the definition of SYMBOL, as found in the relevant manual.
*** isearch
**** Functions
***** isearch-delete-char
- (isearch-delete-char)
  Discard last input item and move point back.
***** isearch-backward (C-r)
- (isearch-backward &optional REGEXP-P NO-RECURSIVE-EDIT)
  Do incremental search backward.
***** isearch-forward
- (isearch-forward &optiona REGEXP-P NO-RECURSIVE-EDIT)
  Do incremental search forward.
***** word-search-backward
- (word-search-backward STRING &optional BOUND NOERROR COUNT)
  Search backward from point for STRING, ignoring differences in punctuation.
***** word-search-forward
- (word-search-forward STRING &optional BOUND NOERROR COUNT)
  Search forward from point for STRING, ignoring differences in punctuation.
*** jka-cmpr-hook
**** Functions
***** auto-compression-mode
- (auto-compression-mode &optional ARG)
  Toggle Auto Compression mode.
*** linum
**** Functions
***** global-linum-mode
- (global-linum-mode &optional ARG)
  Toggle Linum mode in all buffers.
***** linum-mode
- (linum-mode &optional ARG)
  Toggle display of line numbers in the left margin.
*** menu-bar
**** Functions
***** menu-bar-mode
- (menu-bar-mode &optional ARG)
  Toggle display of a menu bar on each frame (Menu Bar mode)
*** minibuffer
**** Functions
***** completion-at-point
- (completion-at-point)
  Perform completion on the text around point.
*** newcomment
**** Functions
***** comment-region
- (comment-region BEG END &optional ARG)

*** paren
**** Variables
***** show-paren-style
- Style used when showing a matching paren.
- Value
  - parenthesis
  - expression
  - mixed
*** replace
**** Functions
***** replace-string (M-r)
- (replace-string FROM-STRING TO-STRING &optional DELIMITED STRAT END BACKWARD)
  Replace occurrences of FROM-STRING with TO-STRING.
***** replace-regexp
- (replace-regexp REGEXP TO-STRING &optional DELIMITED START END BACKWARD)
  Replace things after point matching REGEXP with TO-STRING.
*** server
**** Functions
***** (server-running-p &optional NAME)
      Test whether server NAME is running.
*** simple
**** Functions
***** beginning-of-buffer (M-<, C-home)
- (beginning-of-buffer &optional ARG)
  Move point to the beginning of the buffer.
  With numeric arg N, put point N/10 of the way from the beginning.
- マーク位置を変更してしまうため、プログラムでは利用しない。代わりに(goto-char (point-min))などを使う。
***** column-number-mode
- (column-number-mode &optional ARG)
  Toggle column number display in the mode line.
***** delete-backward-char
- (delete-backward-char N &optional KILLFLAG)
  Delete the previous N characters (following if N is negative).
***** end-of-buffer (M->, C-end)
- (end-of-buffer &optional ARG)
  Move point to the end of the buffer.
  With numeric arg N, put point N/10 of the way from the end.
***** eval-expression (M-:)
- (eval-expression EXP &optional INSERT-VALUE)
  Evaluate EXP and print value in the echo area.
***** keyboard-quit (C-g)
- (keyboard-quit)
  Signal a "quit" condition.

***** kill-line
- (kill-line &optional ARG)
  Kill the rest of the current line; if no nonblanks there, kill thru newline.
***** kill-region
- (kill-region BEG END &optional REGION)
  Kill ("cut") text between point and mark.
- Kill-ringを変更するため、Emacs-Lisp中からは利用しない。
***** move-end-of-line
- (move-end-of-line ARG)
  Move point to end of current line as displayed.
***** next-line (C-n)
- (next-line &optoinal ARG TRY-VSCROLL)
  Move cursor vertically down ARG lines.
- goal-columnの制御などが含まれているため、プログラムとして使用する場合はforward-lineを用いる。
***** previous-line (C-p)
- (previous-line &optional ARG TRY-VSCROLL)
  Move cursor vertically up ARG lines.
***** repeat-complex-command (C-x M-:)
- (repeat-complex-command ARG)
  Edit and re-evaluate last complex command, or ARGth from last.
**** Variables
***** column-number-mode
- Non-nil if Column-Number mode is enabled.
***** eval-expression-print-length
- Value for "print-length" while printing value in "eval-expression".
  
***** next-line-add-enwlines
- If non-nil, "next-line" inserts newline to avoid "end of buffer" error.
*** startup
**** Functions
***** normal-top-levevl-add-subdirs-to-load-path
- (normal-top-levevl-add-subdirs-to-load-path)
  Add all subdirectories of "default-directory" to "load-path"
**** Variables
***** after-init-hook
- Normal hook run after initializing the Emacs session.
  It is run after Emacs loads the init file, "default" library,
  the abbrevs file, and additional Lisp packages (if any),
  and setting the value of "after-init-time".
*** subr
**** Alias
***** int-to-string
- (int-to-string NUMBER)
  alias for "number-to-string"
***** not
- alias for "null"
  (not OBJECT)
***** store-match-data
- 
  alias for "set-match-data"
***** string=
- (string= S1 S2)
  alias for "string-equal"
  Return t if two strings have identical contents.

***** string<
- 
  alias for "string-lessp"
***** string-to-int
- (string-to-int STRING &optional BASE)
  alias for "string-to-number"
***** (obsolete)
****** eval-current-buffer
- alias for "eval-buffer"
  obsolete since 22.1. use "eval-buffer".
**** Functions
***** add-hook
- (add-hook HOOK FUNCTION &optional APPEND LOCAL)
  Add to the value of HOOK the function FUNCTION.
  FUNCTION is not added if already present.

***** add-to-list
- (add-to-list LIST-VAR ELEMENT &optional APPEND COMPARE-FN)
  This function has a compiler macro.
  Add ELEMENT to the value of LIST-VAR if it isn't there yet.
***** error
- (error STRING &rest ARGS)
  Signal a error, making error message by passing all args to "format".
  
***** eval-after-load
- (eval-after-load FILE FORM)
  Arrange that if FILE is loaded, FORM will be run immediately afterwards.
  If FILE is already loaded, evaluate FORM right now.
***** kbd
- (kdb KEYS)
  Convert KEYS to the internal Emacs key representation.
***** keyboard-translate
- (keyboard-translate FROM TO)
  Translate character FROM to TO on the current terminal.
***** local-set-key
- (local-set-key KEY COMMAND)
  Give KEY a local binding as COMMAND.
  
  呼び出した際に使われているキーマップに対してキーを設定する。
***** global-set-key
- (global-set-key KEY COMMAND)
  Give KEY a global binding as COMMAND.
  
  same as (define-key global-map KEY COMMAND).
***** match-string
- (match-string NUM &optional STRING)
  Return string of text matched by last search.
  
***** match-string-no-properties
- (match-string-no-properties NUM &optional STRING)
  Return string of text matched by last search, without text properties.
***** save-match-data
- (save-match-data &rest BODY)
  Execute the BODY forms, restoring the global value of the match data.
  The value returned is the value of the last form in BODY.
- match-dataの内容を保存して"BODY"を評価した後内容を復帰する。
***** set-match-data
- (set-match-data LIST &optional RESEAT)
  Set internal data on last search match from elements of LIST.
***** sit-for
- (sit-for SECONDS &optional NODISP)
  Redisplay, then wait for SECONDS seconds. Stop when input is available.
***** string-equal
- (string-equal S1 S2)
  Return t if two strings have identical contents.
***** string-lessp
- (string-lessp S1 S2)
  Return t if first arg string is less than second in lexicographic order.
***** y-or-n-p
- (y-or-n-p PROMPT)
  Ask user a "y or n" question. Return t if answer is "y".
  PROMPT is the string to display to ask the question.
**** Macros
***** dolist
- (dolist (VAR LIST [RESULT]) BODY...)
  Evaluate BODY with VAR bound to each car from LIST, in turn.
  Then evaluate RESULT to get return value, default nil.
***** dotimes
- (dotimes (VAR COUNT [RESULT]) BODY...)
  Loop a certain number of times.
***** lambda
- (lambda ARGS [DOCSTRING] [INTERACTIVE] BODY)
  Return a lambda expression.

***** push
- (push NEWELT PLACE)
  Add NEWELT to the list stored in the generalized variable PLACE.
***** unless
- (unless COND BODY...)
  If COND yields nil, do BODY, else return nil.
***** when
- (when COND BODY...)
  If COND yields non-nil, do BODY, else return nil.
**** Variables
***** user-emacs-directory
- Directory beneath which additional per-user Emacs-specific files are placed.
*** time
**** Functions
***** dispaly-time
- (display-time)
  Enable display of time, load level, and mail flag in mode lines.
*** tutorial
**** Functions
***** help-with-tutorial
- (help-with-tutorial &optional ARG DONT-ASK-FOR-REVERT)
- Command : (C-h t)
  Select the Emacs learn-by-doing tutorial.
*** window
**** Functions
***** display-buffer
- (display-buffer BUFFER-OR-NAME &optional ACTION FRAME)
  Display BUFFER-OR-NAME in some window, without selecting it.
***** pop-to-buffer
- (pop-to-buffer BUFFER &optional ACTION NORECORD)
  Select buffer BUFFER in some window, preferably a different one.
***** switch-to-buffer
- (switch-to-buffer BUFFER-OR-NAME &optional NORECORD FORCE-SAME-WINDOW)
  Display buffer BUFFER-OR-NAME in teh selected window.
***** switch-to-next-buffer
- (switch-to-next-buffer &optoinal WINDOW)
  In WINDOW switch to next buffer.
***** switch-to-prev-buffer
- (switch-to-prev-buffer &optional WINDOW BURY-OR-KILL)
  WINDOW switch to previous buffer.
** Other Packages
*** auto-complete-config
**** Functions
***** auto-complete-config
- (ac-config-default)
*** auto-save-buffers
- http://0xcc.net/misc/auto-save/

*** bind-key
- [[http://emacs.rubikitch.com/bind-key/][bind-key.el : define-keyを直接書くのは時代遅れ！Emacsの重鎮が行っているスタイリッシュキー割り当て管理術！ - るびきち「新生日刊Emacs」]]
**** Macros
***** bind-key
- (bind-key KEY-NAME COMMAND &optional KEYMAP PREDICATE)
  Bind KEY-NAME to COMMAND in KEYMAP ("global-map" if not passed).
***** bind-key*
- (bind-key* KEY-NAME COMMAND &optional PREDICATE)
  Similar to "bind-key", but overrides any mode-specific bindings.

*** cl-lib
- GNU Emacs Common Lisp Emulation
**** About
- 
  The CL package adds a number of Common Lisp functions and control structures to Emacs Lisp.
  While not a 100% complete implementation of Common Lisp, it ads enough functionality to make Emacs Lisp programming significantly more convenient.
  
**** Link
- [[http://www.gnu.org/software/emacs/manual/html_mono/cl.html][GNU Emacs Common Lisp Emulation]]
*** el-get
**** Functions
**** Link
- [[https://github.com/dimitri/el-get][dimitri/el-get - github]]a
- [[http://tarao.hatenablog.com/entry/20150221/1424518030][Caskはもう古い、これからはEl-Get - いまどきのEmacsパッケージ管理 - 貳佰伍拾陸夜日記]]
*** el-get-build
**** Variables
***** el-get-install-info
- install-info path
*** etags
- Etags
**** Command
***** find-tags
- M-. / <menu-bar><edit><goto><find-tag>
*** esup
*** evil
*** initchart
- https://github.com/yuttie/initchart
- provides macros and functions to measure and visualize a init process of Emacs.
**** Functions
***** initchart-record-execution-time-of
***** initchart-visualize-init-sequence
- (initchart-visualize-init-sequence &optional FP)
  指定したfilepathに計測結果をsvg形式でグラフ表示する。
*** init-loader
*** noflet
- https://github.com/nicferrier/emacs-noflet
- Local function decoration
  ローカル関数を定義するマクロ。
**** About
- 
  By default, valid names of configuration files stat with two digits.
- platform specific configration file has prefix corresponds to the platform.
  these are loaded after non-platform specific configuration files.
  |-----------+-------------------+---------------+-----------------------------|
  | Platform  | Subplatform       | Prefix        | Exapmle                     |
  |-----------+-------------------+---------------+-----------------------------|
  | Windows   |                   | windows-      | windows-fonts.el            |
  |           | Meadow            | meadow-       | meadow-commands.el          |
  | Mac OS X  | Carbon Emacs      | carbon-emacs- | carbon-emacs-applescript.el |
  |           | Cocoa Emacs       | cocoa-emacs-  | cocoa-emacs-plist.el        |
  | GNU/Linux |                   | linux-        | linux-commands.el           |
  | All       | Non-window system | nw-           | nw-key.el                   |
  |-----------+-------------------+---------------+-----------------------------|

**** Functions
***** init-loader-load
***** init-loader-show-log
- (init-loader-show-log)
  Show init-loader log buffer.
**** Link
- [[https://github.com/emacs-jp/init-loader][emacs-jp/init-loader - github]]
*** magit
**** Link
- [[https://github.com/magit/magit][magit/magit - github]]
- [[https://magit.vc/manual/][magit - User Manuals]]
  
*** use-package

**** Link
- [[http://emacs.rubikitch.com/use-package-2/][use-package.el : Emacsの世界的権威が行っている最先端ラクラクinit.el整理術 - るびきち「新生日刊Emacs」]]
- [[http://qiita.com/kai2nenobu/items/5dfae3767514584f5220][use-packageで可読性の高いinit.elを書く - Qiita]]
** Memo
*** パッケージ管理
**** package.el
- デフォルト
**** Cask
**** El-Get
- [[http://tarao.hatenablog.com/entry/20150221/1424518030][Caskはもう古い、これからはEl-Get - いまどきのEmacsパッケージ管理 - 貳佰伍拾陸夜日記]]
** Link
- [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs - emacs-tw/awesome-emacs - github]]
- [[http://krazedkrish.com/blog/2015/12/27/awesome-emacs-plugins/][Awesome Emacs plugins you might not know - krazedkrish]]
- [[http://qiita.com/hottestseason/items/1e8a46ad1ebcf7d0e11c][Emacsパッケージ特集 - Qiita]]
